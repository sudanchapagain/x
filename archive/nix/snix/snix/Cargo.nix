# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate" "--all-features"
# See https://github.com/kolloch/crate2nix for more info.

{
  nixpkgs ? <nixpkgs>,
  pkgs ? import nixpkgs { config = { }; },
  lib ? pkgs.lib,
  stdenv ? pkgs.stdenv,
  buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate,
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
  defaultCrateOverrides ? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures ? [ "default" ],
  # If true, throw errors instead of issueing deprecation warnings.
  strictDeprecation ? false,
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
  targetFeatures ? [ ],
  # Whether to perform release builds: longer compile times, faster binaries.
  release ? true,
  # Additional crate2nix configuration if it exists.
  crateConfig ?
    if builtins.pathExists ./crate-config.nix then pkgs.callPackage ./crate-config.nix { } else { },
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "nar-bridge" = rec {
      packageId = "nar-bridge";
      build = internal.buildRustCrateWithFeatures {
        packageId = "nar-bridge";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "nix-compat" = rec {
      packageId = "nix-compat";
      build = internal.buildRustCrateWithFeatures {
        packageId = "nix-compat";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "nix-compat-derive" = rec {
      packageId = "nix-compat-derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "nix-compat-derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "nix-compat-derive-tests" = rec {
      packageId = "nix-compat-derive-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "nix-compat-derive-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "nix-daemon" = rec {
      packageId = "nix-daemon";
      build = internal.buildRustCrateWithFeatures {
        packageId = "nix-daemon";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-build" = rec {
      packageId = "snix-build";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-build";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-castore" = rec {
      packageId = "snix-castore";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-castore";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-castore-http" = rec {
      packageId = "snix-castore-http";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-castore-http";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-cli" = rec {
      packageId = "snix-cli";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-cli";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-eval" = rec {
      packageId = "snix-eval";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-eval";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-eval-builtin-macros" = rec {
      packageId = "snix-eval-builtin-macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-eval-builtin-macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-glue" = rec {
      packageId = "snix-glue";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-glue";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-serde" = rec {
      packageId = "snix-serde";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-serde";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-store" = rec {
      packageId = "snix-store";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-store";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snix-tracing" = rec {
      packageId = "snix-tracing";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snix-tracing";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths =
      let
        members = builtins.attrValues workspaceMembers;
      in
      builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [ ];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [
            "loader"
            "rustc-demangle"
            "cpp_demangle"
            "fallible-iterator"
            "smallvec"
            "dep:clap"
          ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [
            "rustc-demangle"
            "cpp_demangle"
            "loader"
            "fallible-iterator"
            "smallvec"
          ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [
            "std"
            "dep:object"
            "dep:memmap2"
            "dep:typed-arena"
          ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins"
            "gimli/rustc-dep-of-std"
          ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "perf-literal"
          ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [
          "perf-literal"
          "std"
        ];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.21";
        edition = "2018";
        sha256 = "08zrzs022xwndihvzdn78yqarv2b9696y67i6h78nla3ww87jgb8";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];

      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "anes" = rec {
        crateName = "anes";
        version = "0.1.6";
        edition = "2018";
        sha256 = "16bj1ww1xkwzbckk32j2pnbn5vk6wgsl3q4p3j9551xbcarwnijb";
        authors = [
          "Robert Vojta <rvojta@me.com>"
        ];
        features = {
          "bitflags" = [ "dep:bitflags" ];
          "parser" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.18";
        edition = "2021";
        sha256 = "16sjk4x3ns2c3ya1x28a44kh6p47c7vhk27251i015hik1lm7k4a";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [
            "auto"
            "wincon"
          ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [
          "auto"
          "default"
          "wincon"
        ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.10";
        edition = "2021";
        sha256 = "1yai2vppmd7zlvlrp9grwll60knrmscalf8l2qpfz8b7y5lkpk2m";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.6";
        edition = "2021";
        sha256 = "1acqayy22fwzsrvr6n0lz6a4zvjjcvgr5sm941m7m0b2fr81cb9v";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "utf8"
        ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.2";
        edition = "2021";
        sha256 = "036nm3lkyk43xbps1yql3583fp4hg3b1600is7mcyxs1gzrpm53r";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_System_Console"
              "Win32_Foundation"
            ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.6";
        edition = "2021";
        sha256 = "099ir0w3lbpsp1nxdzbf4anq98ww8ykyc9pd1g03xgkj1v7dn291";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_System_Console"
              "Win32_Foundation"
            ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.95";
        edition = "2018";
        sha256 = "010vd1ki8w84dzgx6c81sc8qm9n02fxic1gkpv52zp4nwrn0kb1l";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "arc-swap" = rec {
        crateName = "arc-swap";
        version = "1.7.1";
        edition = "2018";
        sha256 = "0mrl9a9r9p9bln74q6aszvf22q1ijiw089jkrmabfqkbj31zixv9";
        libName = "arc_swap";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "assert-json-diff" = rec {
        crateName = "assert-json-diff";
        version = "2.0.2";
        edition = "2018";
        sha256 = "04mg3w0rh3schpla51l18362hsirl23q93aisws2irrj32wg5r27";
        libName = "assert_json_diff";
        authors = [
          "David Pedersen <david.pdrsn@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "2.3.1";
        edition = "2021";
        sha256 = "0skvwxj6ysfc6d7bhczz9a2550260g62bm5gl0nmjxxyn007id49";
        libName = "async_channel";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "concurrent-queue/std"
            "event-listener-strategy/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "async-compression" = rec {
        crateName = "async-compression";
        version = "0.4.18";
        edition = "2018";
        sha256 = "08pmavgjha81hf1acwxka82vi0r711whnp5lyha68r3hbx8mm2fz";
        libName = "async_compression";
        authors = [
          "Wim Looman <wim@nemo157.com>"
          "Allen Bui <fairingrey@gmail.com>"
        ];
        dependencies = [
          {
            name = "bzip2";
            packageId = "bzip2";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "xz2";
            packageId = "xz2";
            optional = true;
          }
          {
            name = "zstd";
            packageId = "zstd";
            rename = "libzstd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zstd-safe";
            packageId = "zstd-safe";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [
              "io-util"
              "macros"
              "rt-multi-thread"
              "io-std"
            ];
          }
        ];
        features = {
          "all" = [
            "all-implementations"
            "all-algorithms"
          ];
          "all-algorithms" = [
            "brotli"
            "bzip2"
            "deflate"
            "gzip"
            "lzma"
            "xz"
            "zlib"
            "zstd"
            "deflate64"
          ];
          "all-implementations" = [
            "futures-io"
            "tokio"
          ];
          "brotli" = [ "dep:brotli" ];
          "bzip2" = [ "dep:bzip2" ];
          "deflate" = [ "flate2" ];
          "deflate64" = [ "dep:deflate64" ];
          "flate2" = [ "dep:flate2" ];
          "futures-io" = [ "dep:futures-io" ];
          "gzip" = [ "flate2" ];
          "libzstd" = [ "dep:libzstd" ];
          "lzma" = [ "xz2" ];
          "tokio" = [ "dep:tokio" ];
          "xz" = [ "xz2" ];
          "xz2" = [ "dep:xz2" ];
          "zlib" = [ "flate2" ];
          "zstd" = [
            "libzstd"
            "zstd-safe"
          ];
          "zstd-safe" = [ "dep:zstd-safe" ];
          "zstdmt" = [
            "zstd"
            "zstd-safe/zstdmt"
          ];
        };
        resolvedDefaultFeatures = [
          "bzip2"
          "flate2"
          "gzip"
          "libzstd"
          "tokio"
          "xz"
          "xz2"
          "zstd"
          "zstd-safe"
        ];
      };
      "async-io" = rec {
        crateName = "async-io";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0n8h0vy53n4vdkq529scqnkzm9vcl3r73za9nj81s2nfrhiv78j3";
        libName = "async_io";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [
              "fs"
              "net"
              "std"
            ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" ];
          }
        ];

      };
      "async-lock" = rec {
        crateName = "async-lock";
        version = "3.4.0";
        edition = "2021";
        sha256 = "060vh45i809wcqyxzs5g69nqiqah7ydz0hpkcjys9258vqn4fvpz";
        libName = "async_lock";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [
            "event-listener/loom"
            "dep:loom"
          ];
          "std" = [
            "event-listener/std"
            "event-listener-strategy/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "async-process" = rec {
        crateName = "async-process";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1fr6cpqdw7hrmzns1983lgx86cg8vyz7nlrn0h0125iqq8fmy9b3";
        libName = "async_process";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null));
          }
          {
            name = "async-io";
            packageId = "async-io";
          }
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "async-signal";
            packageId = "async-signal";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-task";
            packageId = "async-task";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null));
          }
          {
            name = "blocking";
            packageId = "blocking";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "event-listener";
            packageId = "event-listener";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!("linux" == target."os" or null)));
            features = [
              "std"
              "fs"
              "process"
            ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "std"
              "fs"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];

      };
      "async-signal" = rec {
        crateName = "async-signal";
        version = "0.2.10";
        edition = "2018";
        sha256 = "1wxrq3871l00mil43nmh0akvwjjjnv0bn7n2pzwbvh00k0s00zk3";
        libName = "async_signal";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-lock";
            packageId = "async-lock";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "process"
              "std"
            ];
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Console"
            ];
          }
        ];
        devDependencies = [
          {
            name = "async-io";
            packageId = "async-io";
          }
        ];

      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0xl4zqncrdmw2g6241wgr11dxdg4h7byy6bz3l6si03qyfk72nhb";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0kaplfb5axsvf1gfs2gk6c4zx6zcsns0yf3ssk7iwni7bphlvhn7";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "visit-mut"
            ];
          }
        ];

      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.7.1";
        edition = "2021";
        sha256 = "1pp3avr4ri2nbh7s6y9ws0397nkx1zymmcr14sq761ljarh3axcb";
        libName = "async_task";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.83";
        edition = "2021";
        sha256 = "1p8q8gm4fv2fdka8hwy2w3f8df7p5inixqi7rlmbnky3wmysw73j";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "full"
              "parsing"
              "printing"
              "proc-macro"
              "visit-mut"
            ];
          }
        ];

      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "auto-future" = rec {
        crateName = "auto-future";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0wykbakzh227vz6frx9p48zsq0wpswgmb7v3917m53m7gr2pw7iw";
        libName = "auto_future";
        authors = [
          "Joseph Lenton <josephlenton@gmail.com>"
        ];

      };
      "auto_impl" = rec {
        crateName = "auto_impl";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0hmfcahj0vrnzq7rayk7r428zp54x9a8awgw6wil753pbvqz71rw";
        procMacro = true;
        authors = [
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "visit"
              "visit-mut"
            ];
          }
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.4.0";
        edition = "2015";
        sha256 = "09lz3by90d2hphbq56znag9v87gfpd9gb8nr82hll8z6x2nhprdc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "axum" = rec {
        crateName = "axum";
        version = "0.7.9";
        edition = "2021";
        sha256 = "07z7wqczi9i8xb4460rvn39p4wjqwr32hx907crd1vwb2fy8ijpd";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum-core";
            packageId = "axum-core";
          }
          {
            name = "axum-macros";
            packageId = "axum-macros";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [
              "tokio"
              "server"
              "service"
            ];
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "matchit";
            packageId = "matchit 0.7.3";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            features = [ "raw_value" ];
          }
          {
            name = "serde_path_to_error";
            packageId = "serde_path_to_error";
            optional = true;
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            optional = true;
            features = [ "time" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "axum-macros";
            packageId = "axum-macros";
            features = [ "__private" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            features = [
              "macros"
              "rt"
              "rt-multi-thread"
              "net"
              "test-util"
            ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            rename = "tower";
            features = [
              "util"
              "timeout"
              "limit"
              "load-shed"
              "steer"
              "filter"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "__private_docs" = [
            "axum-core/__private_docs"
            "tower/full"
            "dep:tower-http"
          ];
          "default" = [
            "form"
            "http1"
            "json"
            "matched-path"
            "original-uri"
            "query"
            "tokio"
            "tower-log"
            "tracing"
          ];
          "form" = [ "dep:serde_urlencoded" ];
          "http1" = [
            "dep:hyper"
            "hyper?/http1"
            "hyper-util?/http1"
          ];
          "http2" = [
            "dep:hyper"
            "hyper?/http2"
            "hyper-util?/http2"
          ];
          "json" = [
            "dep:serde_json"
            "dep:serde_path_to_error"
          ];
          "macros" = [ "dep:axum-macros" ];
          "multipart" = [ "dep:multer" ];
          "query" = [ "dep:serde_urlencoded" ];
          "tokio" = [
            "dep:hyper-util"
            "dep:tokio"
            "tokio/net"
            "tokio/rt"
            "tower/make"
            "tokio/macros"
          ];
          "tower-log" = [ "tower/log" ];
          "tracing" = [
            "dep:tracing"
            "axum-core/tracing"
          ];
          "ws" = [
            "dep:hyper"
            "tokio"
            "dep:tokio-tungstenite"
            "dep:sha1"
            "dep:base64"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "form"
          "http1"
          "http2"
          "json"
          "macros"
          "matched-path"
          "original-uri"
          "query"
          "tokio"
          "tower-log"
          "tracing"
        ];
      };
      "axum-core" = rec {
        crateName = "axum-core";
        version = "0.4.5";
        edition = "2021";
        sha256 = "16b1496c4gm387q20hkv5ic3k5bd6xmnvk50kwsy6ymr8rhvvwh9";
        libName = "axum_core";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "__private_docs" = [ "dep:tower-http" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "axum-extra" = rec {
        crateName = "axum-extra";
        version = "0.9.6";
        edition = "2021";
        sha256 = "011gr9fkxild2yv7rxgn9shzlbcpyzvps3vlnwpiq2jgj06b7567";
        libName = "axum_extra";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "original-uri" ];
          }
          {
            name = "axum-core";
            packageId = "axum-core";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "headers";
            packageId = "headers";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "multer";
            packageId = "multer";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "util" ];
          }
        ];
        features = {
          "async-read-body" = [
            "dep:tokio-util"
            "tokio-util?/io"
            "dep:tokio"
          ];
          "attachment" = [ "dep:tracing" ];
          "cookie" = [ "dep:cookie" ];
          "cookie-key-expansion" = [
            "cookie"
            "cookie?/key-expansion"
          ];
          "cookie-private" = [
            "cookie"
            "cookie?/private"
          ];
          "cookie-signed" = [
            "cookie"
            "cookie?/signed"
          ];
          "default" = [
            "tracing"
            "multipart"
          ];
          "erased-json" = [
            "dep:serde_json"
            "dep:typed-json"
          ];
          "form" = [ "dep:serde_html_form" ];
          "json-deserializer" = [
            "dep:serde_json"
            "dep:serde_path_to_error"
          ];
          "json-lines" = [
            "dep:serde_json"
            "dep:tokio-util"
            "dep:tokio-stream"
            "tokio-util?/io"
            "tokio-stream?/io-util"
            "dep:tokio"
          ];
          "multipart" = [
            "dep:multer"
            "dep:fastrand"
          ];
          "protobuf" = [ "dep:prost" ];
          "query" = [ "dep:serde_html_form" ];
          "tracing" = [
            "axum-core/tracing"
            "axum/tracing"
          ];
          "typed-header" = [ "dep:headers" ];
          "typed-routing" = [
            "dep:axum-macros"
            "dep:percent-encoding"
            "dep:serde_html_form"
            "dep:form_urlencoded"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "multipart"
          "tracing"
          "typed-header"
        ];
      };
      "axum-macros" = rec {
        crateName = "axum-macros";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1klv77c889jm05bzayaaiinalarhvh2crc2w4nvp3l581xaj7lap";
        procMacro = true;
        libName = "axum_macros";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "parsing"
              "extra-traits"
            ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        features = {
          "__private" = [ "syn/visit-mut" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "axum-range" = rec {
        crateName = "axum-range";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1gb4r3x00yiaggapy002w0q8mx3dg9x4z2iwgzfyn5pplyc07hxi";
        libName = "axum_range";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
          }
          {
            name = "axum-extra";
            packageId = "axum-extra";
            features = [ "typed-header" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "io-util"
            ];
          }
        ];
        devDependencies = [
          {
            name = "axum";
            packageId = "axum";
            features = [ "macros" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "rt"
              "rt-multi-thread"
              "macros"
            ];
          }
        ];
        features = {
        };
      };
      "axum-test" = rec {
        crateName = "axum-test";
        version = "16.4.1";
        edition = "2021";
        sha256 = "1p5qxacvxsagnqq30nr2wznjyhgb8svsfb925ah3d2b0s91s9qv3";
        libName = "axum_test";
        authors = [
          "Joseph Lenton <josephlenton@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "assert-json-diff";
            packageId = "assert-json-diff";
          }
          {
            name = "auto-future";
            packageId = "auto-future";
          }
          {
            name = "axum";
            packageId = "axum";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "bytesize";
            packageId = "bytesize";
          }
          {
            name = "cookie";
            packageId = "cookie";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "http1" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [
              "client"
              "http1"
              "client-legacy"
            ];
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
            optional = true;
          }
          {
            name = "reserve-port";
            packageId = "reserve-port";
          }
          {
            name = "rust-multipart-rfc7578_2";
            packageId = "rust-multipart-rfc7578_2";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [
              "util"
              "make"
            ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "axum";
            packageId = "axum";
            features = [
              "multipart"
              "tokio"
              "ws"
            ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "rt"
              "rt-multi-thread"
              "sync"
              "time"
              "macros"
            ];
          }
        ];
        features = {
          "all" = [
            "pretty-assertions"
            "yaml"
            "msgpack"
            "reqwest"
            "shuttle"
            "typed-routing"
            "ws"
          ];
          "default" = [ "pretty-assertions" ];
          "msgpack" = [ "dep:rmp-serde" ];
          "pretty-assertions" = [ "dep:pretty_assertions" ];
          "reqwest" = [ "dep:reqwest" ];
          "shuttle" = [ "dep:shuttle-axum" ];
          "typed-routing" = [ "dep:axum-extra" ];
          "ws" = [
            "axum/ws"
            "tokio/time"
            "dep:uuid"
            "dep:base64"
            "dep:tokio-tungstenite"
            "dep:futures-util"
          ];
          "yaml" = [ "dep:serde_yaml" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "pretty-assertions"
        ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.74";
        edition = "2021";
        sha256 = "06pfif7nwx66qf2zaanc2fcq7m64i91ki9imw9xd3bnz5hrwp0ld";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
            features = [
              "read_core"
              "elf"
              "macho"
              "pe"
              "xcoff"
              "unaligned"
              "archive"
            ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "base64ct" = rec {
        crateName = "base64ct";
        version = "1.6.0";
        edition = "2021";
        sha256 = "0nvdba4jb8aikv60az40x2w1y96sjdq8z3yp09rwzmkhiwv1lg4c";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "bigtable_rs" = rec {
        crateName = "bigtable_rs";
        version = "0.2.16";
        edition = "2021";
        sha256 = "0n2j8zq6p3rl2g46v2hnmwq0azzjs4nkx72hxpqcmsb6yi4a769l";
        authors = [
          "Fuyang Liu <liufuyang@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "gcp_auth";
            packageId = "gcp_auth";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "tokio" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
          }
          {
            name = "prost-wkt";
            packageId = "prost-wkt";
          }
          {
            name = "prost-wkt-types";
            packageId = "prost-wkt-types";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            features = [ "base64" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [
              "tls"
              "transport"
            ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "util" ];
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "prost-wkt-build";
            packageId = "prost-wkt-build";
          }
          {
            name = "tonic-build";
            packageId = "tonic-build";
            features = [ "cleanup-markdown" ];
          }
        ];

      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.6.0" = rec {
        crateName = "bitflags";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1pkidwzn3hnxlsl8zizh0bncgbjnw7c41cx7bby26ncbzmiznj5h";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.5.5";
        edition = "2021";
        sha256 = "07k07q7f2m0hr6z944gf0wn1s15f3gwsydhpz2ssbpn44hc0rvmq";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest";
            optional = true;
            features = [ "mac" ];
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [
            "std"
            "dep:memmap2"
          ];
          "rayon" = [
            "dep:rayon-core"
            "std"
          ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "dep:digest" ];
          "zeroize" = [
            "dep:zeroize"
            "arrayvec/zeroize"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "rayon"
          "std"
          "traits-preview"
        ];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "blocking" = rec {
        crateName = "blocking";
        version = "1.6.1";
        edition = "2021";
        sha256 = "1si99l8zp7c4zq87y35ayjgc5c9b60jb8h0k14zfcs679z2l2gvh";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "piper";
            packageId = "piper";
          }
        ];
        devDependencies = [
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "1.11.1";
        edition = "2021";
        sha256 = "1j32ghvgwvc40bc6g38ximk52dv1xfknkzfmdwpgjnrsd1yk0skq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "dfa-search" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "memchr/alloc"
            "serde?/alloc"
          ];
          "default" = [
            "std"
            "unicode"
          ];
          "serde" = [ "dep:serde" ];
          "std" = [
            "alloc"
            "memchr/std"
            "serde?/std"
          ];
          "unicode" = [ "dep:regex-automata" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "serde"
          "std"
          "unicode"
        ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.16.0";
        edition = "2021";
        sha256 = "0b015qb4knwanbdlp1x48pkb4pm57b8gidbhhhxr900q2wb6fabr";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.9.0";
        edition = "2018";
        sha256 = "16ykzx24v1x4f42v2lxyvlczqhdfji3v7r4ghwckpwijzvb1hn9j";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "bytesize" = rec {
        crateName = "bytesize";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1k3aak70iwz4s2gsjbxf0ws4xnixqbdz6p2ha96s06748fpniqx3";
        authors = [
          "Hyunsik Choi <hyunsik.choi@gmail.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bzip2" = rec {
        crateName = "bzip2";
        version = "0.4.4";
        edition = "2015";
        sha256 = "1y27wgqkx3k2jmh4k26vra2kqjq1qc1asww8hac3cv1zxyk1dcdx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "bzip2-sys";
            packageId = "bzip2-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "futures" = [ "dep:futures" ];
          "static" = [ "bzip2-sys/static" ];
          "tokio" = [
            "tokio-io"
            "futures"
          ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
      };
      "bzip2-sys" = rec {
        crateName = "bzip2-sys";
        version = "0.1.11+1.0.8";
        edition = "2015";
        links = "bzip2";
        sha256 = "1p2crnv8d8gpz5c2vlvzl0j55i3yqg5bi0kwsl1531x77xgraskk";
        libName = "bzip2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
      };
      "caps" = rec {
        crateName = "caps";
        version = "0.5.5";
        edition = "2018";
        sha256 = "02vk0w48rncgvfmj2mz2kpzvdgc14z225451w7lvvkwvaansl2qr";
        authors = [
          "Luca Bruno <lucab@lucabruno.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" ];
        };
      };
      "cast" = rec {
        crateName = "cast";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1dbyngbyz2qkk0jn2sxil8vrz3rnpcj142y184p9l4nbl9radcip";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.17";
        edition = "2018";
        sha256 = "0flf697b5p87ds39s3g076q75xlnfgiicpz8792sy7df833mgjqz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [
            "dep:libc"
            "dep:jobserver"
          ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.39";
        edition = "2021";
        sha256 = "09g8nf409lb184kl9j4s85k0kn8wzgjkp5ls9zid50b886fwqdky";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = { target, features }: (target."unix" or false);
            features = [ "fallback" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target =
              { target, features }:
              (
                ("wasm32" == target."arch" or null)
                && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null)))
              );
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target =
              { target, features }:
              (
                ("wasm32" == target."arch" or null)
                && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null)))
              );
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [
            "winapi"
            "iana-time-zone"
            "android-tzdata"
            "now"
          ];
          "default" = [
            "clock"
            "std"
            "oldtime"
            "wasmbind"
          ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [
            "dep:rkyv"
            "rkyv/size_32"
          ];
          "rkyv-16" = [
            "dep:rkyv"
            "rkyv?/size_16"
          ];
          "rkyv-32" = [
            "dep:rkyv"
            "rkyv?/size_32"
          ];
          "rkyv-64" = [
            "dep:rkyv"
            "rkyv?/size_64"
          ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [
            "wasm-bindgen"
            "js-sys"
          ];
          "winapi" = [ "windows-targets" ];
          "windows-targets" = [ "dep:windows-targets" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "android-tzdata"
          "clock"
          "default"
          "iana-time-zone"
          "js-sys"
          "now"
          "oldtime"
          "serde"
          "std"
          "wasm-bindgen"
          "wasmbind"
          "winapi"
          "windows-targets"
        ];
      };
      "ciborium" = rec {
        crateName = "ciborium";
        version = "0.2.2";
        edition = "2021";
        sha256 = "03hgfw4674im1pdqblcp77m7rc8x2v828si5570ga5q9dzyrzrj2";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
            features = [ "alloc" ];
          }
          {
            name = "ciborium-ll";
            packageId = "ciborium-ll";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "derive"
            ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "ciborium-io/std"
            "serde/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "ciborium-io" = rec {
        crateName = "ciborium-io";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0my7s5g24hvp1rs1zd1cxapz94inrvqpdf1rslrvxj8618gfmbq5";
        libName = "ciborium_io";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "ciborium-ll" = rec {
        crateName = "ciborium-ll";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1n8g4j5rwkfs3rzfi6g1p7ngmz6m5yxsksryzf5k72ll7mjknrjp";
        libName = "ciborium_ll";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [
            "alloc"
            "half/std"
          ];
        };
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.23";
        edition = "2021";
        crateBin = [ ];
        sha256 = "110cf0i9fmkfqzqhi1h8za9y0vnr5rwhy3wmv1p0rcgp5vnffd9i";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [
            "clap_builder/debug"
            "clap_derive?/debug"
          ];
          "default" = [
            "std"
            "color"
            "help"
            "usage"
            "error-context"
            "suggestions"
          ];
          "deprecated" = [
            "clap_builder/deprecated"
            "clap_derive?/deprecated"
          ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [
            "clap_builder/unstable-doc"
            "derive"
          ];
          "unstable-ext" = [ "clap_builder/unstable-ext" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [
            "clap_builder/unstable-v5"
            "clap_derive?/unstable-v5"
            "deprecated"
          ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [
          "color"
          "default"
          "derive"
          "env"
          "error-context"
          "help"
          "std"
          "suggestions"
          "usage"
        ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.23";
        edition = "2021";
        sha256 = "0f28rgc09kdgfq1hgg1bb1ydaw243w6dwyw74syz439k6b32yn1h";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [
            "std"
            "color"
            "help"
            "usage"
            "error-context"
            "suggestions"
          ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [
            "dep:strsim"
            "error-context"
          ];
          "unicode" = [
            "dep:unicode-width"
            "dep:unicase"
          ];
          "unstable-doc" = [
            "cargo"
            "wrap_help"
            "env"
            "unicode"
            "string"
            "unstable-ext"
          ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [
            "help"
            "dep:terminal_size"
          ];
        };
        resolvedDefaultFeatures = [
          "color"
          "env"
          "error-context"
          "help"
          "std"
          "suggestions"
          "usage"
        ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.18";
        edition = "2021";
        sha256 = "1ardb26bvcpg72q9myr7yir3a8c83gx7vxk1cccabsd9n73s1ija";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.4";
        edition = "2021";
        sha256 = "19nwfls5db269js5n822vkc8dw0wjq2h1wf0hgr06ld2g52d2spl";

      };
      "clipboard-win" = rec {
        crateName = "clipboard-win";
        version = "4.5.0";
        edition = "2018";
        sha256 = "0qh3rypkf1lazniq4nr04hxsck0d55rigb5sjvpvgnap4dyc54bi";
        libName = "clipboard_win";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "error-code";
            packageId = "error-code";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "str-buf";
            packageId = "str-buf";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [
              "basetsd"
              "shellapi"
              "winbase"
              "winuser"
              "winerror"
              "stringapiset"
              "errhandlingapi"
              "synchapi"
            ];
          }
        ];
        features = {
          "std" = [ "error-code/std" ];
        };
      };
      "codemap" = rec {
        crateName = "codemap";
        version = "0.1.3";
        edition = "2015";
        sha256 = "091azkslwkcijj3lp9ymb084y9a0wm4fkil7m613ja68r2snkrxr";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];

      };
      "codemap-diagnostic" = rec {
        crateName = "codemap-diagnostic";
        version = "0.1.2";
        edition = "2015";
        sha256 = "08l1b84bn8r8a72rbvyi2v8a5i0j0kk0a5gr7fb6lmjvw05pf86c";
        libName = "codemap_diagnostic";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "codemap";
            packageId = "codemap";
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
        ];

      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1439m3r3jy3xqck8aa13q658visn71ki76qa93cy55wkmalwlqsv";

      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        libName = "concurrent_queue";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "console" = rec {
        crateName = "console";
        version = "0.15.10";
        edition = "2018";
        sha256 = "06q4ag46machxp5w381x1v9l2g7d801q6sawvxcpidarh36nwg7a";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.2.0";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Console"
              "Win32_Storage_FileSystem"
              "Win32_UI_Input_KeyboardAndMouse"
            ];
          }
        ];
        features = {
          "default" = [
            "unicode-width"
            "ansi-parsing"
          ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
        resolvedDefaultFeatures = [
          "ansi-parsing"
          "unicode-width"
        ];
      };
      "const-oid" = rec {
        crateName = "const-oid";
        version = "0.9.6";
        edition = "2021";
        sha256 = "1y0jnqaq7p2wvspnx7qj76m7hjcqpz73qzvr9l2p9n2s51vr6if2";
        libName = "const_oid";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
        };
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "cookie" = rec {
        crateName = "cookie";
        version = "0.18.1";
        edition = "2018";
        sha256 = "0iy749flficrlvgr3hjmf3igr738lk81n5akzf4ym4cs6cxg7pjd";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [
              "std"
              "parsing"
              "formatting"
              "macros"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "aes-gcm" = [ "dep:aes-gcm" ];
          "base64" = [ "dep:base64" ];
          "hkdf" = [ "dep:hkdf" ];
          "hmac" = [ "dep:hmac" ];
          "key-expansion" = [
            "sha2"
            "hkdf"
          ];
          "percent-encode" = [ "percent-encoding" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "private" = [
            "aes-gcm"
            "base64"
            "rand"
            "subtle"
          ];
          "rand" = [ "dep:rand" ];
          "secure" = [
            "private"
            "signed"
            "key-expansion"
          ];
          "sha2" = [ "dep:sha2" ];
          "signed" = [
            "hmac"
            "sha2"
            "base64"
            "rand"
            "subtle"
          ];
          "subtle" = [ "dep:subtle" ];
        };
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.10.0";
        edition = "2018";
        sha256 = "0qscay14s2rwkg8nd8ljhiaf149hj8sfy95d70zssy64r3jp2lmm";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "count-write" = rec {
        crateName = "count-write";
        version = "0.1.0";
        edition = "2018";
        sha256 = "11bswmgr81s3jagdci1pr6qh9vnz9zsbbf2dqpi260daa2mhgmff";
        libName = "count_write";
        authors = [
          "SOFe <sofe2038@gmail.com>"
        ];
        features = {
          "futures" = [ "futures-io-preview" ];
          "futures-io-preview" = [ "dep:futures-io-preview" ];
          "tokio" = [ "tokio-io" ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
      };
      "countme" = rec {
        crateName = "countme";
        version = "3.0.1";
        edition = "2018";
        sha256 = "0dn62hhvgmwyxslh14r4nlbvz8h50cp5mnn1qhqsw63vs7yva13p";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "dashmap" = [ "dep:dashmap" ];
          "enable" = [
            "dashmap"
            "once_cell"
            "rustc-hash"
          ];
          "once_cell" = [ "dep:once_cell" ];
          "print_at_exit" = [ "enable" ];
          "rustc-hash" = [ "dep:rustc-hash" ];
        };
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.16";
        edition = "2018";
        sha256 = "1hy466fkhxjbb16i7na95wz8yr14d0kd578pwzj5lbkz14jh5f0n";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1czp7vif73b8xslr3c9yxysmh9ws2r8824qda7j47ffs9pcnjxx9";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "criterion" = rec {
        crateName = "criterion";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0bv9ipygam3z8kk6k771gh9zi0j0lb9ir0xi1pc075ljg80jvcgj";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "anes";
            packageId = "anes";
          }
          {
            name = "cast";
            packageId = "cast";
          }
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "clap";
            packageId = "clap";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "criterion-plot";
            packageId = "criterion-plot";
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "oorandom";
            packageId = "oorandom";
          }
          {
            name = "plotters";
            packageId = "plotters";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "svg_backend"
              "area_series"
              "line_series"
            ];
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tinytemplate";
            packageId = "tinytemplate";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "async" = [ "futures" ];
          "async-std" = [ "dep:async-std" ];
          "async_futures" = [
            "futures/executor"
            "async"
          ];
          "async_smol" = [
            "smol"
            "async"
          ];
          "async_std" = [
            "async-std"
            "async"
          ];
          "async_tokio" = [
            "tokio"
            "async"
          ];
          "csv" = [ "dep:csv" ];
          "csv_output" = [ "csv" ];
          "default" = [
            "rayon"
            "plotters"
            "cargo_bench_support"
          ];
          "futures" = [ "dep:futures" ];
          "plotters" = [ "dep:plotters" ];
          "rayon" = [ "dep:rayon" ];
          "smol" = [ "dep:smol" ];
          "stable" = [
            "csv_output"
            "html_reports"
            "async_futures"
            "async_smol"
            "async_tokio"
            "async_std"
          ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [
          "cargo_bench_support"
          "default"
          "html_reports"
          "plotters"
          "rayon"
        ];
      };
      "criterion-plot" = rec {
        crateName = "criterion-plot";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1c866xkjqqhzg4cjvg01f8w6xc1j3j7s58rdksl52skq89iq4l3b";
        libName = "criterion_plot";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "cast";
            packageId = "cast";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
        ];

      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0l9f1saqp1gn5qy0rxvkmz4m6n7fc0b3dbm6q1r5pmgpnyvi3lcx";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "crossbeam-epoch/std"
            "crossbeam-utils/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [
            "loom-crate"
            "crossbeam-utils/loom"
          ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [
            "alloc"
            "crossbeam-utils/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "limit_128"
        ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "4.1.3";
        edition = "2021";
        sha256 = "1gmjb9dsknrr8lypmhkyjd67p1arb8mbfamlwxm7vph38my8pywp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target =
              { target, features }:
              (
                (!("fiat" == target."curve25519_dalek_backend" or null))
                && (!("serial" == target."curve25519_dalek_backend" or null))
                && ("x86_64" == target."arch" or null)
              );
          }
          {
            name = "digest";
            packageId = "digest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = { target, features }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "default" = [
            "alloc"
            "precomputed-tables"
            "zeroize"
          ];
          "digest" = [ "dep:digest" ];
          "ff" = [ "dep:ff" ];
          "group" = [
            "dep:group"
            "rand_core"
          ];
          "group-bits" = [
            "group"
            "ff/bits"
          ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "digest"
          "precomputed-tables"
          "zeroize"
        ];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];

      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1299h2z88qn71mizhh05j26yr3ik0wnqmw11ijds89l8i9nbhqvg";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "suggestions"
        ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1rgr9nci61ahnim93yh3xy6fkfayh7sk4447hahawah3m1hkh4wm";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [
          "strsim"
          "suggestions"
        ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.10";
        edition = "2021";
        sha256 = "01kq3ibbn47czijj39h3vxyw0c2ksd0jvc097smcrk7n2jjs4dnk";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];

      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.6.0";
        edition = "2018";
        sha256 = "1qnn68n4vragxaxlkqcb1r28d3hhj43wch67lm4rpxlw89wnjmp8";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "der" = rec {
        crateName = "der";
        version = "0.7.9";
        edition = "2021";
        sha256 = "1h4vzjfa1lczxdf8avfj9qlwh1qianqlxdy1g5rn762qnvkzhnzm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "arbitrary" = [
            "dep:arbitrary"
            "const-oid?/arbitrary"
            "std"
          ];
          "bytes" = [
            "dep:bytes"
            "alloc"
          ];
          "derive" = [ "dep:der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "dep:const-oid" ];
          "pem" = [
            "dep:pem-rfc7468"
            "alloc"
            "zeroize"
          ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "oid"
          "std"
          "zeroize"
        ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.3.11";
        edition = "2021";
        sha256 = "1d1ibqqnr5qdrpw8rclwrf1myn3wf0dygl04idf4j2s49ah6yaxl";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [
            "dep:quickcheck"
            "alloc"
          ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "powerfmt"
          "serde"
          "std"
        ];
      };
      "derive_builder" = rec {
        crateName = "derive_builder";
        version = "0.20.2";
        edition = "2018";
        sha256 = "0is9z7v3kznziqsxa5jqji3ja6ay9wzravppzhcaczwbx84znzah";
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Pascal Hertleif <killercup@gmail.com>"
          "Jan-Erik Rediger <janerik@fnordig.de>"
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "derive_builder_macro";
            packageId = "derive_builder_macro";
          }
        ];
        features = {
          "alloc" = [ "derive_builder_macro/alloc" ];
          "clippy" = [ "derive_builder_macro/clippy" ];
          "default" = [ "std" ];
          "std" = [ "derive_builder_macro/lib_has_std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "derive_builder_core" = rec {
        crateName = "derive_builder_core";
        version = "0.20.2";
        edition = "2018";
        sha256 = "1s640r6q46c2iiz25sgvxw3lk6b6v5y8hwylng7kas2d09xwynrd";
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Pascal Hertleif <killercup@gmail.com>"
          "Jan-Erik Rediger <janerik@fnordig.de>"
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "lib_has_std" ];
      };
      "derive_builder_macro" = rec {
        crateName = "derive_builder_macro";
        version = "0.20.2";
        edition = "2018";
        sha256 = "0g1zznpqrmvjlp2w7p0jzsjvpmw5rvdag0rfyypjhnadpzib0qxb";
        procMacro = true;
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Pascal Hertleif <killercup@gmail.com>"
          "Jan-Erik Rediger <janerik@fnordig.de>"
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "derive_builder_core";
            packageId = "derive_builder_core";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        features = {
          "alloc" = [ "derive_builder_core/alloc" ];
          "clippy" = [ "derive_builder_core/clippy" ];
          "lib_has_std" = [ "derive_builder_core/lib_has_std" ];
        };
        resolvedDefaultFeatures = [ "lib_has_std" ];
      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.13";
        edition = "2015";
        sha256 = "1j0nzjxci2zqx63hdcihkp0a4dkdmzxd7my4m7zk6cjyfy34j9an";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];

      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [
            "alloc"
            "crypto-common/std"
          ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "block-buffer"
          "core-api"
          "default"
          "mac"
          "std"
          "subtle"
        ];
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "4.0.0";
        edition = "2015";
        sha256 = "0n8020zl4f0frfnzvgb9agvk4a14i1kjz4daqnxkgslndwmaffna";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];

      };
      "dirs-next" = rec {
        crateName = "dirs-next";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1q9kr151h9681wwp6is18750ssghz6j9j7qm7qi1ngcwy7mzi35r";
        libName = "dirs_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys-next";
            packageId = "dirs-sys-next";
          }
        ];

      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.3.7";
        edition = "2015";
        sha256 = "19md1cnkazham8a6kh22v12d8hh3raqahfk6yb043vrjr68is78v";
        libName = "dirs_sys";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "knownfolders"
              "objbase"
              "shlobj"
              "winbase"
              "winerror"
            ];
          }
        ];

      };
      "dirs-sys-next" = rec {
        crateName = "dirs-sys-next";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kavhavdxv4phzj4l0psvh55hszwnr0rcz8sxbvx20pyqi2a3gaf";
        libName = "dirs_sys_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "knownfolders"
              "objbase"
              "shlobj"
              "winbase"
              "winerror"
            ];
          }
        ];

      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "dissimilar" = rec {
        crateName = "dissimilar";
        version = "1.0.9";
        edition = "2018";
        sha256 = "0bcn4s99ghigd3yadpd7i3gljv5z2hkr07ijvvxvsxmz3yfygy2r";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "doc-comment" = rec {
        crateName = "doc-comment";
        version = "0.3.3";
        edition = "2015";
        sha256 = "043sprsf3wl926zmck1bm7gw0jq50mb76lkpk49vasfr6ax1p97y";
        libName = "doc_comment";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        features = {
        };
      };
      "document-features" = rec {
        crateName = "document-features";
        version = "0.2.10";
        edition = "2018";
        sha256 = "182h528pjyv4ppil2pd2nir46qrb393x5kvm4y51yhnjmgm6jsfb";
        procMacro = true;
        libName = "document_features";
        libPath = "lib.rs";
        authors = [
          "Slint Developers <info@slint.dev>"
        ];
        dependencies = [
          {
            name = "litrs";
            packageId = "litrs";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "downcast" = rec {
        crateName = "downcast";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1wa78ahlc57wmqyq2ncr80l7plrkgz57xsg7kfzgpcnqac8gld8l";
        authors = [
          "Felix Köpge <fkoep@mailbox.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "ed25519" = rec {
        crateName = "ed25519";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0lydzdf26zbn82g7xfczcac9d7mzm3qgx934ijjrd5hjpjx32m8i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "pkcs8?/alloc" ];
          "default" = [ "std" ];
          "pem" = [
            "alloc"
            "pkcs8/pem"
          ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" ];
          "serde_bytes" = [
            "serde"
            "dep:serde_bytes"
          ];
          "std" = [
            "pkcs8?/std"
            "signature/std"
          ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "2.1.1";
        edition = "2021";
        sha256 = "0w88cafwglg9hjizldbmlza0ns3hls81zk1bcih3m5m3h67algaa";
        libName = "ed25519_dalek";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
          "Tony Arcieri <bascule@gmail.com>"
          "Michael Rosenberg <michael@mrosenberg.pub>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "digest" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [
              "digest"
              "rand_core"
            ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [
            "curve25519-dalek/alloc"
            "ed25519/alloc"
            "serde?/alloc"
            "zeroize/alloc"
          ];
          "asm" = [ "sha2/asm" ];
          "batch" = [
            "alloc"
            "merlin"
            "rand_core"
          ];
          "default" = [
            "fast"
            "std"
            "zeroize"
          ];
          "digest" = [ "signature/digest" ];
          "fast" = [ "curve25519-dalek/precomputed-tables" ];
          "legacy_compatibility" = [ "curve25519-dalek/legacy_compatibility" ];
          "merlin" = [ "dep:merlin" ];
          "pem" = [
            "alloc"
            "ed25519/pem"
            "pkcs8"
          ];
          "pkcs8" = [ "ed25519/pkcs8" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [
            "dep:serde"
            "ed25519/serde"
          ];
          "signature" = [ "dep:signature" ];
          "std" = [
            "alloc"
            "ed25519/std"
            "serde?/std"
            "sha2/std"
          ];
          "zeroize" = [
            "dep:zeroize"
            "curve25519-dalek/zeroize"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "fast"
          "std"
          "zeroize"
        ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1w2c1mybrd7vljyxk77y9f4w9dyjrmp3yp82mk7bcm8848fazcb0";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "use_std" ];
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1h5j7j7byi289by63s3w4a8b3g6l5ccdrws7a67nn07vdxj77ail";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.35";
        edition = "2018";
        sha256 = "1wv64xdrr9v37rqqdjsyb8l8wzlcbab80ryxhrszvnj59wy0y0vm";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = [ "dep:any_all_workaround" ];
          "default" = [ "alloc" ];
          "fast-legacy-encode" = [
            "fast-hangul-encode"
            "fast-hanja-encode"
            "fast-kanji-encode"
            "fast-gb-hanzi-encode"
            "fast-big5-hanzi-encode"
          ];
          "serde" = [ "dep:serde" ];
          "simd-accel" = [ "any_all_workaround" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
        ];
      };
      "endian-type" = rec {
        crateName = "endian-type";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0bbh88zaig1jfqrm7w3gx0pz81kw2jakk3055vbgapw3dmk08ky3";
        libName = "endian_type";
        authors = [
          "Lolirofle <lolipopple@hotmail.com>"
        ];

      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "erased-serde" = rec {
        crateName = "erased-serde";
        version = "0.4.5";
        edition = "2021";
        sha256 = "13dirfj9972nvk05b20w3xyn3xp1j6qyfp9avhksnkxbcnfkiqi4";
        libName = "erased_serde";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "typeid";
            packageId = "typeid";
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "serde/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.10";
        edition = "2018";
        sha256 = "0pgblicz1kjz9wa9m0sghkhh2zw1fhq1mxzj7ndjm746kg5m5n1k";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Diagnostics_Debug"
            ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "error-code" = rec {
        crateName = "error-code";
        version = "2.3.1";
        edition = "2018";
        sha256 = "08baxlf8qz01lgjsdbfhs193r9y1nlc566s5xvzyf4dzwy8qkwb4";
        libName = "error_code";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "str-buf";
            packageId = "str-buf";
          }
        ];
        features = {
        };
      };
      "event-listener" = rec {
        crateName = "event-listener";
        version = "5.3.1";
        edition = "2021";
        sha256 = "1fkm6q4hjn61wl52xyqyyxai0x9w0ngrzi0wf1qsf8vhsadvwck0";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [
            "concurrent-queue/loom"
            "parking?/loom"
            "dep:loom"
          ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [
            "portable-atomic-util"
            "portable_atomic_crate"
            "concurrent-queue/portable-atomic"
          ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [
            "concurrent-queue/std"
            "parking"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "parking"
          "std"
        ];
      };
      "event-listener-strategy" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.3";
        edition = "2021";
        sha256 = "1ch5gf6knllyq12jkb5zdfag573dh44307q4pwwi2g37sc6lwgiw";
        libName = "event_listener_strategy";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "expect-test" = rec {
        crateName = "expect-test";
        version = "1.5.1";
        edition = "2018";
        sha256 = "1c5c081ykm4k5rlsam9jw56w4wgs2h7r4aj78zxlis1i8kzl7bv3";
        libName = "expect_test";
        authors = [
          "rust-analyzer developers"
        ];
        dependencies = [
          {
            name = "dissimilar";
            packageId = "dissimilar";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];

      };
      "fastcdc" = rec {
        crateName = "fastcdc";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1wi82qd58j3ysf8m2dhb092qga6rj1wwbppgsajabadzjz862457";
        authors = [
          "Nathan Fiedler <nathanfiedler@fastmail.fm>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "io-util" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "io-util"
              "rt"
              "rt-multi-thread"
              "macros"
            ];
          }
        ];
        features = {
          "async-stream" = [ "dep:async-stream" ];
          "futures" = [ "dep:futures" ];
          "tokio" = [
            "dep:tokio"
            "tokio-stream"
            "async-stream"
          ];
          "tokio-stream" = [ "dep:tokio-stream" ];
        };
        resolvedDefaultFeatures = [
          "async-stream"
          "default"
          "tokio"
          "tokio-stream"
        ];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.3.0";
        edition = "2018";
        sha256 = "1ghiahsw1jd68df895cy5h3gzwk30hndidn3b682zmshpgmrx41p";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [
            "std"
            "getrandom"
          ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "fd-lock" = rec {
        crateName = "fd-lock";
        version = "3.0.13";
        edition = "2018";
        sha256 = "1df1jdncda67g65hrnmd2zsl7q5hdn8cm84chdalxndsx7akw0zg";
        libName = "fd_lock";
        authors = [
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: (target."unix" or false);
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Storage_FileSystem"
              "Win32_System_IO"
            ];
          }
        ];

      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.2.9";
        edition = "2018";
        sha256 = "07c1vknddv3ak7w89n85ik0g34nzzpms6yb845vrjnv9m4csbpi8";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.25";
        edition = "2018";
        sha256 = "11l5zr86n5sr6g6k6sqldswk0jzklm0q95rzikxcns0yk0p55h1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libredox";
            packageId = "libredox";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Storage_FileSystem"
            ];
          }
        ];

      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "101v41amgv5n9h4hcghvrbfk5vrncx1jwm35rn5szv4rk55i7rqc";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.35";
        edition = "2018";
        sha256 = "0z6h0wa095wncpfngx75wyhyjnqwld7wax401gsvnzjhzgdbydn9";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [
            "any_zlib"
            "cloudflare-zlib-sys"
          ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-rs-sys" = [ "dep:libz-rs-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [
            "miniz_oxide"
            "any_impl"
          ];
          "zlib" = [
            "any_zlib"
            "libz-sys"
          ];
          "zlib-default" = [
            "any_zlib"
            "libz-sys/default"
          ];
          "zlib-ng" = [
            "any_zlib"
            "libz-ng-sys"
          ];
          "zlib-ng-compat" = [
            "zlib"
            "libz-sys/zlib-ng"
          ];
          "zlib-rs" = [
            "any_zlib"
            "libz-rs-sys"
          ];
        };
        resolvedDefaultFeatures = [
          "any_impl"
          "default"
          "miniz_oxide"
          "rust_backend"
        ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "foldhash" = rec {
        crateName = "foldhash";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0vsxw2iwpgs7yy6l7pndm7b8nllaq5vdxwnmjn1qpm5kyzhzvlm0";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "percent-encoding/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "fragile" = rec {
        crateName = "fragile";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1ajfdnwdn921bhjlzyvsqvdgci8ab40ln6w9ly422lf8svb428bc";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
          "slab" = [ "dep:slab" ];
        };
      };
      "fuse-backend-rs" = rec {
        crateName = "fuse-backend-rs";
        version = "0.12.0";
        edition = "2018";
        sha256 = "06yimnygx8k1mx7wgbs6fg8id346zgnanxbzdhx28rg1ra038rp1";
        libName = "fuse_backend_rs";
        authors = [
          "Liu Bo <bo.liu@linux.alibaba.com>"
          "Liu Jiang <gerry@linux.alibaba.com>"
          "Peng Tao <bergwolf@hyper.sh>"
        ];
        dependencies = [
          {
            name = "arc-swap";
            packageId = "arc-swap";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "caps";
            packageId = "caps";
            optional = true;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            features = [
              "os-poll"
              "os-ext"
            ];
          }
          {
            name = "nix";
            packageId = "nix 0.24.3";
          }
          {
            name = "radix_trie";
            packageId = "radix_trie";
          }
          {
            name = "vhost";
            packageId = "vhost";
            optional = true;
            features = [ "vhost-user-slave" ];
          }
          {
            name = "virtio-queue";
            packageId = "virtio-queue";
            optional = true;
          }
          {
            name = "vm-memory";
            packageId = "vm-memory";
            features = [ "backend-mmap" ];
          }
          {
            name = "vmm-sys-util";
            packageId = "vmm-sys-util";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "vm-memory";
            packageId = "vm-memory";
            features = [
              "backend-mmap"
              "backend-bitmap"
            ];
          }
          {
            name = "vmm-sys-util";
            packageId = "vmm-sys-util";
          }
        ];
        features = {
          "async-io" = [
            "async-trait"
            "tokio-uring"
            "tokio/fs"
            "tokio/net"
            "tokio/sync"
            "tokio/rt"
            "tokio/macros"
            "io-uring"
          ];
          "async-trait" = [ "dep:async-trait" ];
          "caps" = [ "dep:caps" ];
          "core-foundation-sys" = [ "dep:core-foundation-sys" ];
          "dbs-snapshot" = [ "dep:dbs-snapshot" ];
          "default" = [ "fusedev" ];
          "fusedev" = [
            "vmm-sys-util"
            "caps"
            "core-foundation-sys"
          ];
          "io-uring" = [ "dep:io-uring" ];
          "persist" = [
            "dbs-snapshot"
            "versionize"
            "versionize_derive"
          ];
          "tokio" = [ "dep:tokio" ];
          "tokio-uring" = [ "dep:tokio-uring" ];
          "versionize" = [ "dep:versionize" ];
          "versionize_derive" = [ "dep:versionize_derive" ];
          "vhost" = [ "dep:vhost" ];
          "vhost-user-fs" = [
            "virtiofs"
            "vhost"
            "caps"
          ];
          "virtio-queue" = [ "dep:virtio-queue" ];
          "virtiofs" = [
            "virtio-queue"
            "caps"
            "vmm-sys-util"
          ];
          "vmm-sys-util" = [ "dep:vmm-sys-util" ];
        };
        resolvedDefaultFeatures = [
          "caps"
          "core-foundation-sys"
          "default"
          "fusedev"
          "vhost"
          "vhost-user-fs"
          "virtio-queue"
          "virtiofs"
          "vmm-sys-util"
        ];
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [
            "futures-core/alloc"
            "futures-task/alloc"
            "futures-sink/alloc"
            "futures-channel/alloc"
            "futures-util/alloc"
          ];
          "async-await" = [
            "futures-util/async-await"
            "futures-util/async-await-macro"
          ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [
            "std"
            "futures-util/compat"
          ];
          "default" = [
            "std"
            "async-await"
            "executor"
          ];
          "executor" = [
            "std"
            "futures-executor/std"
          ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [
            "compat"
            "futures-util/io-compat"
          ];
          "std" = [
            "alloc"
            "futures-core/std"
            "futures-task/std"
            "futures-io/std"
            "futures-sink/std"
            "futures-util/std"
            "futures-util/io"
            "futures-util/channel"
          ];
          "thread-pool" = [
            "executor"
            "futures-executor/thread-pool"
          ];
          "unstable" = [
            "futures-core/unstable"
            "futures-task/unstable"
            "futures-channel/unstable"
            "futures-io/unstable"
            "futures-util/unstable"
          ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "async-await"
          "default"
          "executor"
          "futures-executor"
          "std"
        ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [
            "alloc"
            "futures-core/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "futures-sink"
          "sink"
          "std"
        ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [
            "futures-core/std"
            "futures-task/std"
            "futures-util/std"
          ];
          "thread-pool" = [
            "std"
            "num_cpus"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "futures-lite" = rec {
        crateName = "futures-lite";
        version = "2.5.0";
        edition = "2021";
        sha256 = "18cii1zgxbm04almisj0ycnmf7nj7qqyvy8x0i8mnl9cmqhhvx6f";
        libName = "futures_lite";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [
            "race"
            "std"
          ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "race" = [ "fastrand" ];
          "std" = [
            "alloc"
            "fastrand/std"
            "futures-io"
            "parking"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "fastrand"
          "futures-io"
          "parking"
          "race"
          "std"
        ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [
            "futures-core/alloc"
            "futures-task/alloc"
          ];
          "async-await-macro" = [
            "async-await"
            "futures-macro"
          ];
          "channel" = [
            "std"
            "futures-channel"
          ];
          "compat" = [
            "std"
            "futures_01"
          ];
          "default" = [
            "std"
            "async-await"
            "async-await-macro"
          ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [
            "std"
            "futures-io"
            "memchr"
          ];
          "io-compat" = [
            "io"
            "compat"
            "tokio-io"
          ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [
            "alloc"
            "futures-core/std"
            "futures-task/std"
            "slab"
          ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [
            "futures-core/unstable"
            "futures-task/unstable"
          ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "async-await"
          "async-await-macro"
          "channel"
          "default"
          "futures-channel"
          "futures-io"
          "futures-macro"
          "futures-sink"
          "io"
          "memchr"
          "sink"
          "slab"
          "std"
        ];
      };
      "gcp_auth" = rec {
        crateName = "gcp_auth";
        version = "0.12.3";
        edition = "2021";
        sha256 = "0cvpr1d1md5y704wawbp5m085kjr8ss1zh34j81ml14f34q7zxnv";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "serde" ];
          }
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            features = [
              "client"
              "http1"
              "http2"
            ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            usesDefaultFeatures = false;
            features = [
              "http1"
              "http2"
            ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" ];
          }
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [
              "derive"
              "rc"
            ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "sync"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "macros"
              "parking_lot"
              "rt-multi-thread"
            ];
          }
        ];
        features = {
          "default" = [
            "hyper-rustls/rustls-native-certs"
            "hyper-rustls/ring"
          ];
          "webpki-roots" = [ "hyper-rustls/webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "genawaiter" = rec {
        crateName = "genawaiter";
        version = "0.99.1";
        edition = "2018";
        sha256 = "1861a6vy9lc9a8lbw496m9j9jcjcn9nf7rkm6jqkkpnb3cvd0sy8";
        authors = [
          "John Simon <john@whatisaph.one>"
        ];
        dependencies = [
          {
            name = "genawaiter-macro";
            packageId = "genawaiter-macro";
          }
        ];
        features = {
          "default" = [ "proc_macro" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures03" = [ "futures-core" ];
          "genawaiter-proc-macro" = [ "dep:genawaiter-proc-macro" ];
          "proc-macro-hack" = [ "dep:proc-macro-hack" ];
          "proc_macro" = [
            "genawaiter-proc-macro"
            "proc-macro-hack"
            "genawaiter-macro/proc_macro"
          ];
        };
      };
      "genawaiter-macro" = rec {
        crateName = "genawaiter-macro";
        version = "0.99.1";
        edition = "2018";
        sha256 = "1g6zmr88fk48f1ksz9ik1i2mwjsiam9s4p9aybhvs2zwzphxychb";
        libName = "genawaiter_macro";
        authors = [
          "Devin R <devin.ragotzy@gmail.com>"
        ];
        features = {
        };
      };
      "generator" = rec {
        crateName = "generator";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1p9qqk9nzarjdcl5fr4iylvsv446g0svlpk63lxis4ysrqad2syc";
        authors = [
          "Xudong Huang <huangxu008@hotmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "windows";
            packageId = "windows";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_System_Memory"
              "Win32_System_Kernel"
              "Win32_Foundation"
              "Win32_System_SystemInformation"
              "Win32_System_Diagnostics_Debug"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];

      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1mzlnrb3dgyd1fb84gvw10pyr8wdqdl4ry4sr64i1s8an66pqmn4";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target =
              { target, features }:
              (
                (("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null))
                && ("unknown" == target."os" or null)
              );
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null))
                && ("unknown" == target."os" or null)
              );
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [
            "wasm-bindgen"
            "js-sys"
          ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [
            "compiler_builtins"
            "core"
            "libc/rustc-dep-of-std"
            "wasi/rustc-dep-of-std"
          ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [
          "js"
          "js-sys"
          "std"
          "wasm-bindgen"
        ];
      };
      "getset" = rec {
        crateName = "getset";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0g2ixn6zhrpba58hcv4kiygpc6nydixw4byr5v9sh81ifidn0dpn";
        procMacro = true;
        authors = [
          "Ana Hobden <ana@hoverbear.org>"
          "John Baublitz <john.m.baublitz@gmail.com"
        ];
        dependencies = [
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];

      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = [
            "read-all"
            "write"
          ];
          "endian-reader" = [
            "read"
            "dep:stable_deref_trait"
          ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [
            "read"
            "std"
            "fallible-iterator"
            "endian-reader"
          ];
          "rustc-dep-of-std" = [
            "dep:core"
            "dep:alloc"
            "dep:compiler_builtins"
          ];
          "std" = [
            "fallible-iterator?/std"
            "stable_deref_trait?/std"
          ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [
          "read"
          "read-core"
        ];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cm2w34b5w45fxr522h5b0fv1bxchfswcj560m3pnjbia7asvld8";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "h2" = rec {
        crateName = "h2";
        version = "0.4.7";
        edition = "2021";
        sha256 = "0bljg66n2x3c5yzbi12v2jfcj77hb35rjq0gq21x0d6n52bjgbnc";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.7.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [
              "codec"
              "io"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "rt-multi-thread"
              "macros"
              "sync"
              "net"
            ];
          }
        ];
        features = {
        };
      };
      "half" = rec {
        crateName = "half";
        version = "2.4.1";
        edition = "2021";
        sha256 = "123q4zzw1x4309961i69igzd1wb7pj04aaii3kwasrz3599qrl3d";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [
            "dep:rand"
            "dep:rand_distr"
          ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "ahash"
            "inline-more"
          ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [
            "nightly"
            "core"
            "compiler_builtins"
            "alloc"
            "rustc-internal-api"
          ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "ahash"
            "inline-more"
            "allocator-api2"
          ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [
            "allocator-api2?/nightly"
            "bumpalo/allocator_api"
          ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [
            "nightly"
            "core"
            "compiler_builtins"
            "alloc"
            "rustc-internal-api"
          ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "inline-more" ];
      };
      "hashbrown 0.15.4" = rec {
        crateName = "hashbrown";
        version = "0.15.4";
        edition = "2021";
        sha256 = "1mg045sm1nm00cwjm7ndi80hcmmv1v3z7gnapxyhd9qxc62sqwar";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "equivalent";
            packageId = "equivalent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "core" = [ "dep:core" ];
          "default" = [
            "default-hasher"
            "inline-more"
            "allocator-api2"
            "equivalent"
            "raw-entry"
          ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [
            "nightly"
            "core"
            "alloc"
            "rustc-internal-api"
          ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "allocator-api2"
          "default"
          "default-hasher"
          "equivalent"
          "inline-more"
          "raw-entry"
        ];
      };
      "headers" = rec {
        crateName = "headers";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1abari69kjl2yv2dg06g2x17qgd1a20xp7aqmmg2vfhcppk0c89j";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "headers-core";
            packageId = "headers-core";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
        ];
        features = {
        };
      };
      "headers-core" = rec {
        crateName = "headers-core";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1r1w80i2bhmyh8s5mjr2dz6baqlrm6cak6yvzm4jq96lacjs5d2l";
        libName = "headers_core";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 1.2.0";
          }
        ];

      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi 0.3.9" = rec {
        crateName = "hermit-abi";
        version = "0.3.9";
        edition = "2021";
        sha256 = "092hxjbjnq5fmz66grd9plxd0sh6ssg5fhgwwwqbrzgzkjwdycfj";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins/rustc-dep-of-std"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.4.0" = rec {
        crateName = "hermit-abi";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k1zwllx6nfq417hy38x4akw1ivlv68ymvnzyxs76ffgsqcskxpv";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins/rustc-dep-of-std"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "hex-literal" = rec {
        crateName = "hex-literal";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0iny5inkixsdr41pm2vkqh3fl66752z5j5c0cdxw16yl9ryjdqkg";
        libName = "hex_literal";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "home" = rec {
        crateName = "home";
        version = "0.5.11";
        edition = "2021";
        sha256 = "1kxb4k87a9sayr8jipr7nq9wpgmjk4hk4047hmf9kc24692k75aq";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_UI_Shell"
              "Win32_System_Com"
            ];
          }
        ];

      };
      "http 0.2.12" = rec {
        crateName = "http";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1w81s4bcbmcj9bjp7mllm8jlz6b31wzvirz8bgpzbqkpwmbvn730";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];

      };
      "http 1.2.0" = rec {
        crateName = "http";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1skglzdf98j5nzxlii540n11is0w4l80mi5sm3xrj716asps4v7i";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
        ];

      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kslwazg4400qnc2azkrgqqci0fppv12waicnsy5d8hncvbjjd3r";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.9.5";
        edition = "2018";
        sha256 = "0ip9v8m9lvgvq1lznl31wvn0ch1v254na7lhid9p29yx9rbx6wbx";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];

      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.1.0";
        edition = "2018";
        sha256 = "1r55pfkkf5v0ji1x6izrjwdq9v6sc7bv99xj6srywcar37xmnfls";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];

      };
      "hyper" = rec {
        crateName = "hyper";
        version = "1.5.2";
        edition = "2021";
        sha256 = "1q7akfb443yrjzkmnnbp2vs8zi15hgbk466rr4y144v4ppabhvr5";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [
              "const_generics"
              "const_new"
            ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = [ "sink" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "sink"
            ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "macros"
              "net"
              "io-std"
              "io-util"
              "rt"
              "rt-multi-thread"
              "sync"
              "time"
              "test-util"
            ];
          }
        ];
        features = {
          "client" = [
            "dep:want"
            "dep:pin-project-lite"
            "dep:smallvec"
          ];
          "ffi" = [
            "dep:http-body-util"
            "futures-util?/alloc"
          ];
          "full" = [
            "client"
            "http1"
            "http2"
            "server"
          ];
          "http1" = [
            "dep:futures-channel"
            "dep:futures-util"
            "dep:httparse"
            "dep:itoa"
          ];
          "http2" = [
            "dep:futures-channel"
            "dep:futures-util"
            "dep:h2"
          ];
          "server" = [
            "dep:httpdate"
            "dep:pin-project-lite"
            "dep:smallvec"
          ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [
          "client"
          "default"
          "http1"
          "http2"
          "server"
        ];
      };
      "hyper-rustls" = rec {
        crateName = "hyper-rustls";
        version = "0.27.5";
        edition = "2021";
        sha256 = "1cjr3yf3x5mr3194llsfibacl6j7n2dknii2dwjha4ysyf1ia69d";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [
              "client-legacy"
              "tokio"
            ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "io-std"
              "macros"
              "net"
              "rt-multi-thread"
            ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "default" = [
            "native-tokio"
            "http1"
            "tls12"
            "logging"
            "aws-lc-rs"
          ];
          "fips" = [
            "aws-lc-rs"
            "rustls/fips"
          ];
          "http1" = [ "hyper-util/http1" ];
          "http2" = [ "hyper-util/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [
            "log"
            "tokio-rustls/logging"
            "rustls/logging"
          ];
          "native-tokio" = [ "rustls-native-certs" ];
          "ring" = [ "rustls/ring" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls12" = [
            "tokio-rustls/tls12"
            "rustls/tls12"
          ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "webpki-roots" ];
        };
        resolvedDefaultFeatures = [
          "http1"
          "http2"
          "native-tokio"
          "ring"
          "rustls-native-certs"
          "tls12"
        ];
      };
      "hyper-timeout" = rec {
        crateName = "hyper-timeout";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1c431l5ckr698248yd6bnsmizjy2m1da02cbpmsnmkpvpxkdb41b";
        libName = "hyper_timeout";
        authors = [
          "Herman J. Radtke III <herman@hermanradtke.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [
              "client-legacy"
              "http1"
            ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "http1" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [
              "client-legacy"
              "http1"
              "server"
              "server-graceful"
            ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "io-std"
              "io-util"
              "macros"
            ];
          }
        ];

      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.10";
        edition = "2021";
        sha256 = "1d1iwrkysjhq63pg54zk3vfby1j7zmxzm9zzyfr4lwvp0szcybfz";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "macros"
              "test-util"
              "signal"
            ];
          }
        ];
        features = {
          "client" = [
            "hyper/client"
            "dep:tracing"
            "dep:futures-channel"
            "dep:tower-service"
          ];
          "client-legacy" = [
            "client"
            "dep:socket2"
            "tokio/sync"
          ];
          "full" = [
            "client"
            "client-legacy"
            "server"
            "server-auto"
            "server-graceful"
            "service"
            "http1"
            "http2"
            "tokio"
          ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "server" = [ "hyper/server" ];
          "server-auto" = [
            "server"
            "http1"
            "http2"
          ];
          "server-graceful" = [
            "server"
            "tokio/sync"
            "futures-util/alloc"
          ];
          "service" = [ "dep:tower-service" ];
          "tokio" = [
            "dep:tokio"
            "tokio/net"
            "tokio/rt"
            "tokio/time"
          ];
        };
        resolvedDefaultFeatures = [
          "client"
          "client-legacy"
          "default"
          "http1"
          "http2"
          "server"
          "server-auto"
          "service"
          "tokio"
        ];
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.61";
        edition = "2018";
        sha256 = "085jjsls330yj1fnwykfzmb2f10zp6l7w4fhq81ng81574ghhpi3";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.52.0";
            target = { target, features }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "1.5.0";
        edition = "2021";
        sha256 = "09j5kskirl59mvqc8kabhy7005yyy7dp88jw9f6f3gkf419a8byv";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [
              "derive"
              "yoke"
            ];
          }
        ];
        features = {
          "databake" = [
            "dep:databake"
            "zerovec/databake"
          ];
          "serde" = [
            "dep:serde"
            "zerovec/serde"
          ];
        };
      };
      "icu_locid" = rec {
        crateName = "icu_locid";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0dznvd1c5b02iilqm044q4hvar0sqibq1z46prqwjzwif61vpb0k";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bench" = [ "serde" ];
          "databake" = [ "dep:databake" ];
          "serde" = [
            "dep:serde"
            "tinystr/serde"
          ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "icu_locid_transform" = rec {
        crateName = "icu_locid_transform";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0kmmi1kmj9yph6mdgkc7v3wz6995v7ly3n80vbg0zr78bp1iml81";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid";
            packageId = "icu_locid";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_locid_transform_data";
            packageId = "icu_locid_transform_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "zerovec"
            ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "yoke" ];
          }
        ];
        features = {
          "bench" = [ "serde" ];
          "compiled_data" = [ "dep:icu_locid_transform_data" ];
          "datagen" = [
            "serde"
            "dep:databake"
            "zerovec/databake"
            "icu_locid/databake"
            "tinystr/databake"
          ];
          "default" = [ "compiled_data" ];
          "serde" = [
            "dep:serde"
            "icu_locid/serde"
            "tinystr/serde"
            "zerovec/serde"
            "icu_provider/serde"
          ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_locid_transform_data" = rec {
        crateName = "icu_locid_transform_data";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0vkgjixm0wzp2n3v5mw4j89ly05bg3lx96jpdggbwlpqi0rzzj7x";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_normalizer" = rec {
        crateName = "icu_normalizer";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0kx8qryp8ma8fw1vijbgbnf7zz9f2j4d14rw36fmjs7cl86kxkhr";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_normalizer_data";
            packageId = "icu_normalizer_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "utf16_iter";
            packageId = "utf16_iter";
            usesDefaultFeatures = false;
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
            usesDefaultFeatures = false;
          }
          {
            name = "write16";
            packageId = "write16";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "write16";
            packageId = "write16";
            usesDefaultFeatures = false;
            features = [ "arrayvec" ];
          }
        ];
        features = {
          "compiled_data" = [
            "dep:icu_normalizer_data"
            "icu_properties/compiled_data"
          ];
          "datagen" = [
            "serde"
            "dep:databake"
            "icu_collections/databake"
            "zerovec/databake"
            "icu_properties/datagen"
          ];
          "default" = [ "compiled_data" ];
          "serde" = [
            "dep:serde"
            "icu_collections/serde"
            "zerovec/serde"
            "icu_properties/serde"
          ];
          "std" = [
            "icu_collections/std"
            "icu_properties/std"
            "icu_provider/std"
          ];
        };
        resolvedDefaultFeatures = [
          "compiled_data"
          "default"
        ];
      };
      "icu_normalizer_data" = rec {
        crateName = "icu_normalizer_data";
        version = "1.5.0";
        edition = "2021";
        sha256 = "05lmk0zf0q7nzjnj5kbmsigj3qgr0rwicnn5pqi9n7krmbvzpjpq";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "1.5.1";
        edition = "2021";
        sha256 = "1xgf584rx10xc1p7zjr78k0n4zn3g23rrg6v2ln31ingcq3h5mlk";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid_transform";
            packageId = "icu_locid_transform";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "compiled_data" ];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "zerovec"
            ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "bidi" = [ "dep:unicode-bidi" ];
          "compiled_data" = [
            "dep:icu_properties_data"
            "dep:icu_locid_transform"
          ];
          "datagen" = [
            "serde"
            "dep:databake"
            "zerovec/databake"
            "icu_collections/databake"
            "tinystr/databake"
          ];
          "default" = [ "compiled_data" ];
          "serde" = [
            "dep:serde"
            "tinystr/serde"
            "zerovec/serde"
            "icu_collections/serde"
            "icu_provider/serde"
          ];
          "std" = [
            "icu_collections/std"
            "icu_provider/std"
          ];
        };
        resolvedDefaultFeatures = [
          "compiled_data"
          "default"
        ];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0scms7pd5a7yxx9hfl167f5qdf44as6r3bd8myhlngnxqgxyza37";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "1.5.0";
        edition = "2021";
        sha256 = "1nb8vvgw8dv2inqklvk05fs0qxzkw8xrg2n9vgid6y7gm3423m3f";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid";
            packageId = "icu_locid";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider_macros";
            packageId = "icu_provider_macros";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "derive"
            ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "derive"
            ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "datagen" = [
            "serde"
            "dep:erased-serde"
            "dep:databake"
            "std"
            "sync"
          ];
          "deserialize_bincode_1" = [
            "serde"
            "dep:bincode"
            "std"
          ];
          "deserialize_json" = [
            "serde"
            "dep:serde_json"
          ];
          "deserialize_postcard_1" = [
            "serde"
            "dep:postcard"
          ];
          "log_error_context" = [ "logging" ];
          "logging" = [ "dep:log" ];
          "macros" = [ "dep:icu_provider_macros" ];
          "serde" = [
            "dep:serde"
            "yoke/serde"
          ];
          "std" = [ "icu_locid/std" ];
        };
        resolvedDefaultFeatures = [ "macros" ];
      };
      "icu_provider_macros" = rec {
        crateName = "icu_provider_macros";
        version = "1.5.0";
        edition = "2021";
        sha256 = "1mjs0w7fcm2lcqmbakhninzrjwqs485lkps4hz0cv3k36y9rxj0y";
        procMacro = true;
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];

      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "1.0.3";
        edition = "2018";
        sha256 = "0zlajvm2k3wy0ay8plr07w22hxkkmrxkffa6ah57ac6nci984vv8";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna_adapter";
            packageId = "idna_adapter";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "const_generics" ];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
        ];
        features = {
          "compiled_data" = [ "idna_adapter/compiled_data" ];
          "default" = [
            "std"
            "compiled_data"
          ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "compiled_data"
          "std"
        ];
      };
      "idna_adapter" = rec {
        crateName = "idna_adapter";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0wggnkiivaj5lw0g0384ql2d7zk4ppkn3b1ry4n0ncjpr7qivjns";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "icu_normalizer";
            packageId = "icu_normalizer";
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
          }
        ];
        features = {
          "compiled_data" = [
            "icu_normalizer/compiled_data"
            "icu_properties/compiled_data"
          ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [
          "serde"
          "serde-1"
          "std"
        ];
      };
      "indexmap 2.7.0" = rec {
        crateName = "indexmap";
        version = "2.7.0";
        edition = "2021";
        sha256 = "07s7jmdymvd0rm4yswp0j3napx57hkjm9gs9n55lvs2g78vj5y32";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "serde"
          "std"
        ];
      };
      "indicatif" = rec {
        crateName = "indicatif";
        version = "0.17.9";
        edition = "2021";
        sha256 = "10dj53x2a2bfhnfi78nhi4kb4zgc3rq6jm2wgg3d6d6rbsw7bxnb";
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
            features = [ "ansi-parsing" ];
          }
          {
            name = "number_prefix";
            packageId = "number_prefix";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.2.0";
            optional = true;
          }
          {
            name = "vt100";
            packageId = "vt100";
            optional = true;
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "default" = [
            "unicode-width"
            "console/unicode-width"
          ];
          "futures" = [ "dep:futures-core" ];
          "improved_unicode" = [
            "unicode-segmentation"
            "unicode-width"
            "console/unicode-width"
          ];
          "in_memory" = [ "vt100" ];
          "rayon" = [ "dep:rayon" ];
          "tokio" = [ "dep:tokio" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "vt100" = [ "dep:vt100" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "in_memory"
          "unicode-width"
          "vt100"
        ];
      };
      "inventory" = rec {
        crateName = "inventory";
        version = "0.3.16";
        edition = "2021";
        sha256 = "05y8h94pv0hgjmbld1yv73g2s9zjiv2zgdls1p721m4dx2nhzn75";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
            target =
              { target, features }: (("emscripten" == target."os" or null) || ("wasi" == target."os" or null));
          }
        ];
        devDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];

      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.10.1";
        edition = "2018";
        sha256 = "025p9wm94q1w2l13hbbr4cbmfygly3a2ag8g5s618l2jhq4l3hnx";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = [ "std" ];
          "heapless" = [ "dep:heapless" ];
          "json" = [
            "serde"
            "schemars"
          ];
          "schemars" = [ "dep:schemars" ];
          "ser_as_str" = [ "heapless" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "is-terminal" = rec {
        crateName = "is-terminal";
        version = "0.4.13";
        edition = "2018";
        sha256 = "0jwgjjz33kkmnwai3nsdk1pz9vb6gkqvw1d1vq7bs3q48kinh7r6";
        libName = "is_terminal";
        authors = [
          "softprops <d.tangren@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.4.0";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Storage_FileSystem"
              "Win32_System_Console"
            ];
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
        ];

      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.14";
        edition = "2018";
        sha256 = "0x26kr9m062mafaxgcf2p6h2x7cmixm0zw95aipzn2hr3d5jlnnp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.32";
        edition = "2021";
        sha256 = "1l2k50qmj84x9mn39ivjz76alqmx72jhm12rw33zx9xnpv5xpla8";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.76";
        edition = "2021";
        sha256 = "1dz7v777h2j38wkf8k5iwkfxskn6nff2cdv2jsslyxkpn2svc5v7";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "lexical-core" = rec {
        crateName = "lexical-core";
        version = "0.8.5";
        edition = "2018";
        sha256 = "0ihf0x3vrk25fq3bv9q35m0xax0wmvwkh0j0pjm2yk4ddvh5vpic";
        libName = "lexical_core";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-parse-float";
            packageId = "lexical-parse-float";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-parse-integer";
            packageId = "lexical-parse-integer";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-write-float";
            packageId = "lexical-write-float";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-write-integer";
            packageId = "lexical-write-integer";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compact" = [
            "lexical-write-integer/compact"
            "lexical-write-float/compact"
            "lexical-parse-integer/compact"
            "lexical-parse-float/compact"
          ];
          "default" = [
            "std"
            "write-integers"
            "write-floats"
            "parse-integers"
            "parse-floats"
          ];
          "f128" = [
            "lexical-util/f128"
            "lexical-parse-float/f128"
            "lexical-write-float/f128"
          ];
          "f16" = [
            "lexical-util/f16"
            "lexical-parse-float/f16"
            "lexical-write-float/f16"
          ];
          "format" = [
            "lexical-util/format"
            "lexical-parse-integer/format"
            "lexical-parse-float/format"
            "lexical-write-integer/format"
            "lexical-write-float/format"
          ];
          "lexical-parse-float" = [ "dep:lexical-parse-float" ];
          "lexical-parse-integer" = [ "dep:lexical-parse-integer" ];
          "lexical-write-float" = [ "dep:lexical-write-float" ];
          "lexical-write-integer" = [ "dep:lexical-write-integer" ];
          "lint" = [
            "lexical-util/lint"
            "lexical-write-integer/lint"
            "lexical-write-float/lint"
            "lexical-parse-integer/lint"
            "lexical-parse-float/lint"
          ];
          "nightly" = [
            "lexical-write-integer/nightly"
            "lexical-write-float/nightly"
            "lexical-parse-integer/nightly"
            "lexical-parse-float/nightly"
          ];
          "parse-floats" = [
            "lexical-parse-float"
            "parse"
            "floats"
          ];
          "parse-integers" = [
            "lexical-parse-integer"
            "parse"
            "integers"
          ];
          "power-of-two" = [
            "lexical-util/power-of-two"
            "lexical-write-integer/power-of-two"
            "lexical-write-float/power-of-two"
            "lexical-parse-integer/power-of-two"
            "lexical-parse-float/power-of-two"
          ];
          "radix" = [
            "lexical-util/radix"
            "lexical-write-integer/radix"
            "lexical-write-float/radix"
            "lexical-parse-integer/radix"
            "lexical-parse-float/radix"
          ];
          "safe" = [
            "lexical-write-integer/safe"
            "lexical-write-float/safe"
            "lexical-parse-integer/safe"
            "lexical-parse-float/safe"
          ];
          "std" = [
            "lexical-util/std"
            "lexical-write-integer/std"
            "lexical-write-float/std"
            "lexical-parse-integer/std"
            "lexical-parse-float/std"
          ];
          "write-floats" = [
            "lexical-write-float"
            "write"
            "floats"
          ];
          "write-integers" = [
            "lexical-write-integer"
            "write"
            "integers"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "floats"
          "format"
          "integers"
          "lexical-parse-float"
          "lexical-parse-integer"
          "lexical-write-float"
          "lexical-write-integer"
          "parse"
          "parse-floats"
          "parse-integers"
          "std"
          "write"
          "write-floats"
          "write-integers"
        ];
      };
      "lexical-parse-float" = rec {
        crateName = "lexical-parse-float";
        version = "0.8.5";
        edition = "2018";
        sha256 = "0py0gp8hlzcrlvjqmqlpl2v1as65iiqxq2xsabxvhc01pmg3lfv8";
        libName = "lexical_parse_float";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-parse-integer";
            packageId = "lexical-parse-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "parse-floats" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [
            "lexical-util/compact"
            "lexical-parse-integer/compact"
          ];
          "default" = [ "std" ];
          "f128" = [ "lexical-util/f128" ];
          "f16" = [ "lexical-util/f16" ];
          "format" = [
            "lexical-util/format"
            "lexical-parse-integer/format"
          ];
          "lint" = [
            "lexical-util/lint"
            "lexical-parse-integer/lint"
          ];
          "nightly" = [ "lexical-parse-integer/nightly" ];
          "power-of-two" = [
            "lexical-util/power-of-two"
            "lexical-parse-integer/power-of-two"
          ];
          "radix" = [
            "lexical-util/radix"
            "lexical-parse-integer/radix"
            "power-of-two"
          ];
          "safe" = [ "lexical-parse-integer/safe" ];
          "std" = [
            "lexical-util/std"
            "lexical-parse-integer/std"
          ];
        };
        resolvedDefaultFeatures = [
          "format"
          "std"
        ];
      };
      "lexical-parse-integer" = rec {
        crateName = "lexical-parse-integer";
        version = "0.8.6";
        edition = "2018";
        sha256 = "1sayji3mpvb2xsjq56qcq3whfz8px9a6fxk5v7v15hyhbr4982bd";
        libName = "lexical_parse_integer";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "parse-integers" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [ "lexical-util/compact" ];
          "default" = [ "std" ];
          "format" = [ "lexical-util/format" ];
          "lint" = [ "lexical-util/lint" ];
          "power-of-two" = [ "lexical-util/power-of-two" ];
          "radix" = [
            "lexical-util/radix"
            "power-of-two"
          ];
          "std" = [ "lexical-util/std" ];
        };
        resolvedDefaultFeatures = [
          "format"
          "std"
        ];
      };
      "lexical-util" = rec {
        crateName = "lexical-util";
        version = "0.8.5";
        edition = "2018";
        sha256 = "1z73qkv7yxhsbc4aiginn1dqmsj8jarkrdlyxc88g2gz2vzvjmaj";
        libName = "lexical_util";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "f128" = [ "floats" ];
          "f16" = [ "floats" ];
          "parse-floats" = [
            "parse"
            "floats"
          ];
          "parse-integers" = [
            "parse"
            "integers"
          ];
          "radix" = [ "power-of-two" ];
          "write-floats" = [
            "write"
            "floats"
          ];
          "write-integers" = [
            "write"
            "integers"
          ];
        };
        resolvedDefaultFeatures = [
          "floats"
          "format"
          "integers"
          "parse"
          "parse-floats"
          "parse-integers"
          "std"
          "write"
          "write-floats"
          "write-integers"
        ];
      };
      "lexical-write-float" = rec {
        crateName = "lexical-write-float";
        version = "0.8.5";
        edition = "2018";
        sha256 = "0qk825l0csvnksh9sywb51996cjc2bylq6rxjaiha7sqqjhvmjmc";
        libName = "lexical_write_float";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "write-floats" ];
          }
          {
            name = "lexical-write-integer";
            packageId = "lexical-write-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [
            "lexical-util/compact"
            "lexical-write-integer/compact"
          ];
          "default" = [ "std" ];
          "f128" = [ "lexical-util/f128" ];
          "f16" = [ "lexical-util/f16" ];
          "format" = [ "lexical-util/format" ];
          "lint" = [
            "lexical-util/lint"
            "lexical-write-integer/lint"
          ];
          "nightly" = [ "lexical-write-integer/nightly" ];
          "power-of-two" = [
            "lexical-util/power-of-two"
            "lexical-write-integer/power-of-two"
          ];
          "radix" = [
            "lexical-util/radix"
            "lexical-write-integer/radix"
            "power-of-two"
          ];
          "safe" = [ "lexical-write-integer/safe" ];
          "std" = [
            "lexical-util/std"
            "lexical-write-integer/std"
          ];
        };
        resolvedDefaultFeatures = [
          "format"
          "std"
        ];
      };
      "lexical-write-integer" = rec {
        crateName = "lexical-write-integer";
        version = "0.8.5";
        edition = "2018";
        sha256 = "0ii4hmvqrg6pd4j9y1pkhkp0nw2wpivjzmljh6v6ca22yk8z7dp1";
        libName = "lexical_write_integer";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "write-integers" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [ "lexical-util/compact" ];
          "default" = [ "std" ];
          "format" = [ "lexical-util/format" ];
          "lint" = [ "lexical-util/lint" ];
          "power-of-two" = [ "lexical-util/power-of-two" ];
          "radix" = [
            "lexical-util/radix"
            "power-of-two"
          ];
          "std" = [ "lexical-util/std" ];
        };
        resolvedDefaultFeatures = [
          "format"
          "std"
        ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.169";
        edition = "2021";
        sha256 = "02m253hs8gw0m1n8iyrsc4n15yzbqwhddi7w1l0ds7i92kdsiaxm";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "align"
            "rustc-std-workspace-core"
          ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "extra_traits"
          "std"
        ];
      };
      "libmimalloc-sys" = rec {
        crateName = "libmimalloc-sys";
        version = "0.1.39";
        edition = "2018";
        links = "mimalloc";
        sha256 = "0i3b0dzz7cp0ik7ys66q92r16va78gwlbrnxhj5fnkdxsc8niai3";
        libName = "libmimalloc_sys";
        authors = [
          "Octavian Oncescu <octavonce@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "cty" = [ "dep:cty" ];
          "extended" = [ "cty" ];
        };
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.3";
        edition = "2021";
        sha256 = "139602gzgs0k91zb7dvgj1qh4ynb8g1lbxsswdim18hcb6ykgzy0";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.8";
            optional = true;
          }
        ];
        features = {
          "default" = [
            "call"
            "std"
            "redox_syscall"
          ];
          "ioslice" = [ "dep:ioslice" ];
          "mkns" = [ "ioslice" ];
          "redox_syscall" = [ "dep:redox_syscall" ];
        };
        resolvedDefaultFeatures = [
          "call"
          "default"
          "redox_syscall"
          "std"
        ];
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.14";
        edition = "2021";
        sha256 = "12gsjgbhhjwywpqcrizv80vrp7p7grsz5laqq773i33wphjsxcvq";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "std"
            "general"
            "errno"
          ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
            "no_std"
          ];
        };
        resolvedDefaultFeatures = [
          "elf"
          "errno"
          "general"
          "if_ether"
          "ioctl"
          "net"
          "netlink"
          "no_std"
          "prctl"
          "std"
          "xdp"
        ];
      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.7.4";
        edition = "2021";
        sha256 = "012ili3vppd4952sh6y3qwcd0jkd0bq2qpr9h7cppc8sj11k7saf";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "bench" = [ "serde" ];
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "testing" = [ "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "litrs" = rec {
        crateName = "litrs";
        version = "0.4.1";
        edition = "2018";
        sha256 = "19cssch9gc0x2snd9089nvwzz79zx6nzsi3icffpx25p4hck1kml";
        authors = [
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        features = {
          "check_suffix" = [ "unicode-xid" ];
          "default" = [ "proc-macro2" ];
          "proc-macro2" = [ "dep:proc-macro2" ];
          "unicode-xid" = [ "dep:unicode-xid" ];
        };
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "atomic_usize"
          "default"
        ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.22";
        edition = "2021";
        sha256 = "093vs0wkm1rgyykk7fjbqp2lwizbixac1w52gv109p5r4jh0p9x7";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [
            "kv_std"
            "value-bag/serde"
            "serde"
          ];
          "kv_std" = [
            "std"
            "kv"
            "value-bag/error"
          ];
          "kv_sval" = [
            "kv"
            "value-bag/sval"
            "sval"
            "sval_ref"
          ];
          "kv_unstable" = [
            "kv"
            "value-bag"
          ];
          "kv_unstable_serde" = [
            "kv_serde"
            "kv_unstable_std"
          ];
          "kv_unstable_std" = [
            "kv_std"
            "kv_unstable"
          ];
          "kv_unstable_sval" = [
            "kv_sval"
            "kv_unstable"
          ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "loom" = rec {
        crateName = "loom";
        version = "0.7.2";
        edition = "2018";
        sha256 = "1jpszf9qxv8ydpsm2h9vcyvxvyxcfkhmmfbylzd4gfbc0k40v7j1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "generator";
            packageId = "generator";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
        ];
        features = {
          "checkpoint" = [
            "serde"
            "serde_json"
          ];
          "futures" = [ "pin-utils" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "lru" = rec {
        crateName = "lru";
        version = "0.12.5";
        edition = "2015";
        sha256 = "0f1a7cgqxbyhrmgaqqa11m3azwhcc36w0v5r4izgbhadl3sg8k13";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [
            "hashbrown"
            "hashbrown/nightly"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "hashbrown"
        ];
      };
      "lzma-sys" = rec {
        crateName = "lzma-sys";
        version = "0.1.20";
        edition = "2018";
        links = "lzma";
        sha256 = "09sxp20waxyglgn3cjz8qjkspb3ryz2fwx4rigkwvrk46ymh9njz";
        libName = "lzma_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "matchit 0.7.3" = rec {
        crateName = "matchit";
        version = "0.7.3";
        edition = "2021";
        sha256 = "156bgdmmlv4crib31qhgg49nsjk88dxkdqp80ha2pk2rk6n6ax0f";
        authors = [
          "Ibraheem Ahmed <ibraheem@ibraheem.ca>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "matchit 0.8.5" = rec {
        crateName = "matchit";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p5lsh0ixl593n72g2shq6c6hxsh6aph51zwibb0h6w6rawa82mx";
        authors = [
          "Ibraheem Ahmed <ibraheem@ibraheem.ca>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "md-5" = rec {
        crateName = "md-5";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1kvq5rnpm4fzwmyv5nmnxygdhhb2369888a06gdc9pxyrzh7x7nq";
        libName = "md5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "md5-asm" ];
          "default" = [ "std" ];
          "md5-asm" = [ "dep:md5-asm" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1kkrzll58a3ayn5zdyy9i1f1v3mx0xgl29x0chq614zazba638ss";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "mimalloc" = rec {
        crateName = "mimalloc";
        version = "0.1.43";
        edition = "2018";
        sha256 = "0csnyrxc16i592gm5ffham07jyj2w98qsh9jyy1rv59lmr8474b8";
        authors = [
          "Octavian Oncescu <octavonce@gmail.com>"
          "Vincent Rouillé <vincent@speedy37.fr>"
          "Thom Chiovoloni <chiovolonit@gmail.com>"
        ];
        dependencies = [
          {
            name = "libmimalloc-sys";
            packageId = "libmimalloc-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "libmimalloc-sys/debug" ];
          "debug_in_debug" = [ "libmimalloc-sys/debug_in_debug" ];
          "extended" = [ "libmimalloc-sys/extended" ];
          "local_dynamic_tls" = [ "libmimalloc-sys/local_dynamic_tls" ];
          "no_thp" = [ "libmimalloc-sys/no_thp" ];
          "override" = [ "libmimalloc-sys/override" ];
          "secure" = [ "libmimalloc-sys/secure" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.17";
        edition = "2015";
        sha256 = "16hkibgvb9klh0w0jk5crr5xv90l3wlf77ggymzjmvl1818vnxv8";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "mime_guess" = rec {
        crateName = "mime_guess";
        version = "2.0.5";
        edition = "2015";
        sha256 = "03jmg3yx6j39mg0kayf7w4a886dl3j15y8zs119zw01ccy74zi7p";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        dependencies = [
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        buildDependencies = [
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        features = {
          "default" = [ "rev-mappings" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "rev-mappings"
        ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.2";
        edition = "2021";
        sha256 = "1543asrvhla92sby4z6m9ilkg2cmmq8ja6bj84k1vp6f48qfiysg";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins"
            "adler2/rustc-dep-of-std"
          ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "with-alloc" ];
      };
      "mio 0.8.11" = rec {
        crateName = "mio";
        version = "0.8.11";
        edition = "2018";
        sha256 = "034byyl0ardml5yliy1hmvx8arkmn9rv479pid794sm07ia519m4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_Storage_FileSystem"
              "Win32_System_IO"
              "Win32_System_WindowsProgramming"
            ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [
            "os-poll"
            "windows-sys/Win32_System_Pipes"
            "windows-sys/Win32_Security"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "log"
          "os-ext"
          "os-poll"
        ];
      };
      "mio 1.0.3" = rec {
        crateName = "mio";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1gah0h4ia3avxbwym0b6bi6lr6rpysmj9zvw6zis5yq0z0xq91i8";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Wdk_Foundation"
              "Wdk_Storage_FileSystem"
              "Wdk_System_IO"
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_Storage_FileSystem"
              "Win32_System_IO"
              "Win32_System_WindowsProgramming"
            ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [
            "os-poll"
            "windows-sys/Win32_System_Pipes"
            "windows-sys/Win32_Security"
          ];
        };
        resolvedDefaultFeatures = [
          "net"
          "os-ext"
          "os-poll"
        ];
      };
      "mockall" = rec {
        crateName = "mockall";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1lir70dd9cnsjlf20gi3i51ha9n7mlrkx74bx5gfszlcdk6bz9ir";
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "downcast";
            packageId = "downcast";
          }
          {
            name = "fragile";
            packageId = "fragile";
          }
          {
            name = "mockall_derive";
            packageId = "mockall_derive";
          }
          {
            name = "predicates";
            packageId = "predicates";
            usesDefaultFeatures = false;
          }
          {
            name = "predicates-tree";
            packageId = "predicates-tree";
          }
        ];
        features = {
          "nightly" = [
            "mockall_derive/nightly_derive"
            "downcast/nightly"
          ];
        };
      };
      "mockall_derive" = rec {
        crateName = "mockall_derive";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1608qajqrz23xbvv81alc6wm4l24as1bsqg4shdh3sggq8231ji5";
        procMacro = true;
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "extra-traits"
              "full"
            ];
          }
        ];
        features = {
          "nightly_derive" = [ "proc-macro2/nightly" ];
        };
      };
      "multer" = rec {
        crateName = "multer";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0jr2snfay5fjz50yvdja4vbnddlj1iriiqjym88pbj3daiv7gs43";
        authors = [
          "Rousan Ali <hello@rousan.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            features = [ "spin_mutex" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "all" = [ "json" ];
          "json" = [
            "serde"
            "serde_json"
          ];
          "log" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-io" = [
            "tokio"
            "tokio-util"
          ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "multimap" = rec {
        crateName = "multimap";
        version = "0.10.0";
        edition = "2015";
        sha256 = "00vs2frqdhrr8iqx4y3fbq73ax5l12837fvbjrpi729d85alrz6y";
        authors = [
          "Håvar Nøvik <havar.novik@gmail.com>"
        ];
        features = {
          "default" = [ "serde_impl" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "nar-bridge" = rec {
        crateName = "nar-bridge";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "nar-bridge";
            path = "src/bin/nar-bridge.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./nar-bridge;
        };
        libName = "nar_bridge";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            features = [ "http2" ];
          }
          {
            name = "axum-extra";
            packageId = "axum-extra";
          }
          {
            name = "axum-range";
            packageId = "axum-range";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [
              "derive"
              "env"
            ];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "lru";
            packageId = "lru";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "nix-compat";
            packageId = "nix-compat";
            features = [ "async" ];
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "snix-castore";
            packageId = "snix-castore";
          }
          {
            name = "snix-store";
            packageId = "snix-store";
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
            features = [
              "tonic"
              "axum"
            ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-listener";
            packageId = "tokio-listener";
            features = [
              "axum07"
              "clap"
              "multi-listener"
              "sd_listen"
            ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [
              "io"
              "io-util"
              "compat"
            ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [
              "tls"
              "tls-roots"
            ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [
              "compression-zstd"
              "trace"
            ];
          }
          {
            name = "tower-otel-http-metrics";
            packageId = "tower-otel-http-metrics";
            optional = true;
            features = [ "axum" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
          {
            name = "tracing-test";
            packageId = "tracing-test";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "tonic-build";
            packageId = "tonic-build";
          }
        ];
        devDependencies = [
          {
            name = "axum-test";
            packageId = "axum-test";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
        ];
        features = {
          "default" = [ "otlp" ];
          "otlp" = [
            "snix-tracing/otlp"
            "tower-otel-http-metrics"
          ];
          "tower-otel-http-metrics" = [ "dep:tower-otel-http-metrics" ];
          "xp-store-composition-cli" = [ "snix-store/xp-composition-cli" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "otlp"
          "tower-otel-http-metrics"
          "xp-store-composition-cli"
        ];
      };
      "nibble_vec" = rec {
        crateName = "nibble_vec";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0hsdp3s724s30hkqz74ky6sqnadhp2xwcj1n1hzy4vzkz4yxi9bp";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];

      };
      "nix 0.24.3" = rec {
        crateName = "nix";
        version = "0.24.3";
        edition = "2018";
        sha256 = "0sc0yzdl51b49bqd9l9cmimp1sw1hxb8iyv4d35ww6d7m5rfjlps";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
            optional = true;
            target = { target, features }: (!("redox" == target."os" or null));
          }
        ];
        features = {
          "default" = [
            "acct"
            "aio"
            "dir"
            "env"
            "event"
            "feature"
            "fs"
            "hostname"
            "inotify"
            "ioctl"
            "kmod"
            "mman"
            "mount"
            "mqueue"
            "net"
            "personality"
            "poll"
            "process"
            "pthread"
            "ptrace"
            "quota"
            "reboot"
            "resource"
            "sched"
            "signal"
            "socket"
            "term"
            "time"
            "ucontext"
            "uio"
            "user"
            "zerocopy"
          ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "acct"
          "aio"
          "default"
          "dir"
          "env"
          "event"
          "feature"
          "fs"
          "hostname"
          "inotify"
          "ioctl"
          "kmod"
          "memoffset"
          "mman"
          "mount"
          "mqueue"
          "net"
          "personality"
          "poll"
          "process"
          "pthread"
          "ptrace"
          "quota"
          "reboot"
          "resource"
          "sched"
          "signal"
          "socket"
          "term"
          "time"
          "ucontext"
          "uio"
          "user"
          "zerocopy"
        ];
      };
      "nix 0.25.1" = rec {
        crateName = "nix";
        version = "0.25.1";
        edition = "2018";
        sha256 = "1r4vyp5g1lxzpig31bkrhxdf2bggb4nvk405x5gngzfvwxqgyipk";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [
            "acct"
            "aio"
            "dir"
            "env"
            "event"
            "feature"
            "fs"
            "hostname"
            "inotify"
            "ioctl"
            "kmod"
            "mman"
            "mount"
            "mqueue"
            "net"
            "personality"
            "poll"
            "process"
            "pthread"
            "ptrace"
            "quota"
            "reboot"
            "resource"
            "sched"
            "signal"
            "socket"
            "term"
            "time"
            "ucontext"
            "uio"
            "user"
            "zerocopy"
          ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "fs"
          "ioctl"
          "poll"
          "process"
          "signal"
          "term"
        ];
      };
      "nix 0.26.4" = rec {
        crateName = "nix";
        version = "0.26.4";
        edition = "2018";
        sha256 = "06xgl4ybb8pvjrbmc3xggbgk3kbs1j0c4c0nzdfrmpbgrkrym2sr";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [
            "acct"
            "aio"
            "dir"
            "env"
            "event"
            "feature"
            "fs"
            "hostname"
            "inotify"
            "ioctl"
            "kmod"
            "mman"
            "mount"
            "mqueue"
            "net"
            "personality"
            "poll"
            "process"
            "pthread"
            "ptrace"
            "quota"
            "reboot"
            "resource"
            "sched"
            "signal"
            "socket"
            "term"
            "time"
            "ucontext"
            "uio"
            "user"
            "zerocopy"
          ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "feature"
          "fs"
          "user"
        ];
      };
      "nix 0.27.1" = rec {
        crateName = "nix";
        version = "0.27.1";
        edition = "2021";
        sha256 = "0ly0kkmij5f0sqz35lx9czlbk6zpihb7yh1bsy4irzwfd2f4xc1f";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "fs"
        ];
      };
      "nix 0.29.0" = rec {
        crateName = "nix";
        version = "0.29.0";
        edition = "2021";
        sha256 = "0ikvn7s9r2lrfdm3mx1h7nbfjvcc6s9vxdzw7j5xfkd2qdnp9qki";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "feature"
          "user"
        ];
      };
      "nix-compat" = rec {
        crateName = "nix-compat";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "drvfmt";
            path = "src/bin/drvfmt.rs";
            requiredFeatures = [ "serde" ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./nix-compat;
        };
        libName = "nix_compat";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "bstr";
            packageId = "bstr";
            features = [
              "alloc"
              "unicode"
              "serde"
            ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "ed25519";
            packageId = "ed25519";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "nix-compat-derive";
            packageId = "nix-compat-derive";
            optional = true;
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [
              "io-util"
              "macros"
              "sync"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "criterion";
            packageId = "criterion";
            features = [ "html_reports" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
            features = [ "unstable" ];
          }
          {
            name = "proptest";
            packageId = "proptest";
            usesDefaultFeatures = false;
            features = [
              "std"
              "alloc"
              "tempfile"
            ];
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "tokio-test";
            packageId = "tokio-test";
          }
          {
            name = "zstd";
            packageId = "zstd";
          }
        ];
        features = {
          "async" = [ "tokio" ];
          "bytes" = [ "dep:bytes" ];
          "daemon" = [
            "tokio"
            "nix-compat-derive"
            "futures"
          ];
          "default" = [
            "async"
            "daemon"
            "wire"
            "nix-compat-derive"
          ];
          "flakeref" = [ "url" ];
          "futures" = [ "dep:futures" ];
          "nix-compat-derive" = [ "dep:nix-compat-derive" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "serde" = [
            "dep:serde"
            "dep:serde_json"
            "dep:serde_with"
          ];
          "tokio" = [ "dep:tokio" ];
          "url" = [ "dep:url" ];
          "wire" = [
            "tokio"
            "pin-project-lite"
            "bytes"
          ];
        };
        resolvedDefaultFeatures = [
          "async"
          "bytes"
          "daemon"
          "default"
          "flakeref"
          "futures"
          "nix-compat-derive"
          "pin-project-lite"
          "serde"
          "test"
          "tokio"
          "url"
          "wire"
        ];
      };
      "nix-compat-derive" = rec {
        crateName = "nix-compat-derive";
        version = "0.1.0";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./nix-compat-derive;
        };
        procMacro = true;
        libName = "nix_compat_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "nix-compat";
            packageId = "nix-compat";
            usesDefaultFeatures = false;
            features = [
              "async"
              "wire"
              "test"
            ];
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "proptest";
            packageId = "proptest";
            usesDefaultFeatures = false;
            features = [
              "std"
              "alloc"
              "tempfile"
            ];
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "io-util"
              "macros"
            ];
          }
          {
            name = "tokio-test";
            packageId = "tokio-test";
          }
        ];

      };
      "nix-compat-derive-tests" = rec {
        crateName = "nix-compat-derive-tests";
        version = "0.1.0";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./nix-compat-derive-tests;
        };
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "nix-compat";
            packageId = "nix-compat";
            features = [
              "test"
              "wire"
            ];
          }
          {
            name = "nix-compat-derive";
            packageId = "nix-compat-derive";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "io-util"
              "macros"
            ];
          }
          {
            name = "tokio-test";
            packageId = "tokio-test";
          }
          {
            name = "trybuild";
            packageId = "trybuild";
          }
        ];

      };
      "nix-daemon" = rec {
        crateName = "nix-daemon";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "nix-daemon";
            path = "src/bin/nix-daemon.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./nix-daemon;
        };
        libName = "nix_daemon";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [
              "derive"
              "env"
            ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "nix-compat";
            packageId = "nix-compat";
          }
          {
            name = "snix-castore";
            packageId = "snix-castore";
          }
          {
            name = "snix-store";
            packageId = "snix-store";
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "macros"
              "net"
              "rt"
              "rt-multi-thread"
              "signal"
            ];
          }
          {
            name = "tokio-listener";
            packageId = "tokio-listener";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "default" = [ "otlp" ];
          "otlp" = [ "snix-tracing/otlp" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "otlp"
        ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "8.0.0";
        edition = "2021";
        sha256 = "01cl5xng9d0gxf26h39m0l8lprgpa00fcc75ps1yzgbib1vn35yz";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "memchr/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "nom8" = rec {
        crateName = "nom8";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1y6jzabxyrl05vxnh63r66ac2fh0symg5fnynxm4ii3zkif580df";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "memchr/std"
          ];
          "unstable-doc" = [
            "alloc"
            "std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [
              "consoleapi"
              "errhandlingapi"
              "fileapi"
              "handleapi"
              "processenv"
            ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];

      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.16.0";
        edition = "2015";
        sha256 = "0hra6ihpnh06dvfvz9ipscys0xfqa9ca9hzp384d5m02ssvgqqa1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0yai0vafhy85mvhknzfqd7lm04hzaln7i5c599rhy8mj831kyqaf";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0mksna1jj87ydh146gn6jcqkvvs920c3dgh0p4f3xk184kpl865g";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "extra-traits"
              "parsing"
            ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [
          "proc-macro-crate"
          "std"
        ];
      };
      "number_prefix" = rec {
        crateName = "number_prefix";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1wvh13wvlajqxkb1filsfzbrnq0vrmrw298v2j3sy82z1rm282w3";
        authors = [
          "Benjamin Sago <ogham@bsago.me>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [
            "read"
            "write"
            "build"
            "std"
            "compression"
            "wasm"
          ];
          "alloc" = [ "dep:alloc" ];
          "build" = [
            "build_core"
            "write_std"
            "elf"
          ];
          "build_core" = [
            "read_core"
            "write_core"
          ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [
            "dep:flate2"
            "dep:ruzstd"
            "std"
          ];
          "core" = [ "dep:core" ];
          "default" = [
            "read"
            "compression"
          ];
          "doc" = [
            "read_core"
            "write_std"
            "build_core"
            "std"
            "compression"
            "archive"
            "coff"
            "elf"
            "macho"
            "pe"
            "wasm"
            "xcoff"
          ];
          "pe" = [ "coff" ];
          "read" = [
            "read_core"
            "archive"
            "coff"
            "elf"
            "macho"
            "pe"
            "xcoff"
            "unaligned"
          ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
            "alloc"
            "memchr/rustc-dep-of-std"
          ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [
            "all"
            "unstable"
          ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [
            "write_std"
            "coff"
            "elf"
            "macho"
            "pe"
            "xcoff"
          ];
          "write_core" = [
            "dep:crc32fast"
            "dep:indexmap"
            "dep:hashbrown"
          ];
          "write_std" = [
            "write_core"
            "std"
            "indexmap?/std"
            "crc32fast?/std"
          ];
        };
        resolvedDefaultFeatures = [
          "archive"
          "coff"
          "elf"
          "macho"
          "pe"
          "read_core"
          "unaligned"
          "xcoff"
        ];
      };
      "object_store" = rec {
        crateName = "object_store";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1wz3m20hqs3v93dyxcqy7qpsbd4rqp6050hy49wcw5f740l4bnp6";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "hyper";
            packageId = "hyper";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "md-5";
            packageId = "md-5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
            optional = true;
            features = [
              "serialize"
              "overlapped-lists"
            ];
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "std"
              "std_rng"
            ];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "rustls-tls-native-roots"
              "http2"
            ];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "snafu";
            packageId = "snafu";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "sync"
              "macros"
              "rt"
              "time"
              "io-util"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "server" ];
          }
          {
            name = "rand";
            packageId = "rand";
          }
        ];
        features = {
          "aws" = [
            "cloud"
            "md-5"
          ];
          "azure" = [ "cloud" ];
          "base64" = [ "dep:base64" ];
          "cloud" = [
            "serde"
            "serde_json"
            "quick-xml"
            "hyper"
            "reqwest"
            "reqwest/json"
            "reqwest/stream"
            "chrono/serde"
            "base64"
            "rand"
            "ring"
          ];
          "gcp" = [
            "cloud"
            "rustls-pemfile"
          ];
          "http" = [ "cloud" ];
          "hyper" = [ "dep:hyper" ];
          "md-5" = [ "dep:md-5" ];
          "quick-xml" = [ "dep:quick-xml" ];
          "rand" = [ "dep:rand" ];
          "reqwest" = [ "dep:reqwest" ];
          "ring" = [ "dep:ring" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tls-webpki-roots" = [ "reqwest?/rustls-tls-webpki-roots" ];
        };
        resolvedDefaultFeatures = [
          "aws"
          "azure"
          "base64"
          "cloud"
          "gcp"
          "http"
          "hyper"
          "md-5"
          "quick-xml"
          "rand"
          "reqwest"
          "ring"
          "rustls-pemfile"
          "serde"
          "serde_json"
        ];
      };
      "oci-spec" = rec {
        crateName = "oci-spec";
        version = "0.7.1";
        edition = "2021";
        sha256 = "10mqy1f7cz1nfqyi69584i9nwhnf27b2d5hkls35ksz2xxc6wh6s";
        libName = "oci_spec";
        authors = [
          "Furisto"
          "Sascha Grunert <sgrunert@redhat.com>"
          "Toru Komatsu <k0ma@utam0k.jp>"
        ];
        dependencies = [
          {
            name = "derive_builder";
            packageId = "derive_builder";
          }
          {
            name = "getset";
            packageId = "getset";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "strum";
            packageId = "strum";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
        ];
        features = {
          "default" = [
            "distribution"
            "image"
            "runtime"
          ];
          "proptests" = [ "quickcheck" ];
          "quickcheck" = [ "dep:quickcheck" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "distribution"
          "image"
          "runtime"
        ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.20.2";
        edition = "2021";
        sha256 = "0xb7rw1aqr7pa4z3b00y7786gyf8awx2gca3md73afy76dzgwq8j";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [
            "dep:critical-section"
            "portable-atomic"
          ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "race"
          "std"
        ];
      };
      "oorandom" = rec {
        crateName = "oorandom";
        version = "11.1.4";
        edition = "2018";
        sha256 = "1sg4j19r5302a6jpn0kgfkbjnslrqr3ynxv8x2h2ddaaw7kvn45l";
        authors = [
          "Simon Heath <icefox@dreamquest.io>"
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1kq18qm48rvkwgcggfkqq6pm948190czqc94d6bm2sir5hq1l0gz";
        libName = "openssl_probe";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "opentelemetry" = rec {
        crateName = "opentelemetry";
        version = "0.28.0";
        edition = "2021";
        sha256 = "09k43sgaarw3zx5j434ngq1canpcjibsbxaqqa8dyp0acxxncvi3";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "trace"
            "metrics"
            "logs"
            "internal-logs"
          ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "internal-logs" = [ "tracing" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "spec_unstable_logs_enabled" = [ "logs" ];
          "testing" = [ "trace" ];
          "thiserror" = [ "dep:thiserror" ];
          "trace" = [
            "pin-project-lite"
            "futures-sink"
            "futures-core"
            "thiserror"
          ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "futures-core"
          "futures-sink"
          "internal-logs"
          "logs"
          "metrics"
          "pin-project-lite"
          "thiserror"
          "trace"
          "tracing"
        ];
      };
      "opentelemetry-http" = rec {
        crateName = "opentelemetry-http";
        version = "0.28.0";
        edition = "2021";
        sha256 = "0lv2sbsdr7b8bxnly92zzhlm1wzjbynib1xlkw9hs0qh56pkz1m8";
        libName = "opentelemetry_http";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            features = [ "trace" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "blocking" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "internal-logs" ];
          "hyper" = [
            "dep:http-body-util"
            "dep:hyper"
            "dep:hyper-util"
            "dep:tokio"
          ];
          "internal-logs" = [
            "tracing"
            "opentelemetry/internal-logs"
          ];
          "reqwest" = [ "dep:reqwest" ];
          "reqwest-rustls" = [
            "reqwest"
            "reqwest/rustls-tls-native-roots"
          ];
          "reqwest-rustls-webpki-roots" = [
            "reqwest"
            "reqwest/rustls-tls-webpki-roots"
          ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "internal-logs"
          "reqwest"
          "tracing"
        ];
      };
      "opentelemetry-otlp" = rec {
        crateName = "opentelemetry-otlp";
        version = "0.28.0";
        edition = "2021";
        sha256 = "148xq13ar11bvmk7pxbslrhh5pgf40bv83n6dlysigj1dm613vsv";
        libName = "opentelemetry_otlp";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
          }
          {
            name = "opentelemetry-http";
            packageId = "opentelemetry-http";
            optional = true;
          }
          {
            name = "opentelemetry-proto";
            packageId = "opentelemetry-proto";
            usesDefaultFeatures = false;
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "sync"
              "rt"
            ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [
              "macros"
              "rt-multi-thread"
            ];
          }
        ];
        features = {
          "default" = [
            "http-proto"
            "reqwest-blocking-client"
            "trace"
            "metrics"
            "logs"
            "internal-logs"
          ];
          "grpc-tonic" = [
            "tonic"
            "prost"
            "http"
            "tokio"
            "opentelemetry-proto/gen-tonic"
          ];
          "gzip-tonic" = [ "tonic/gzip" ];
          "http" = [ "dep:http" ];
          "http-json" = [
            "serde_json"
            "prost"
            "opentelemetry-http"
            "opentelemetry-proto/gen-tonic-messages"
            "opentelemetry-proto/with-serde"
            "http"
            "trace"
            "metrics"
          ];
          "http-proto" = [
            "prost"
            "opentelemetry-http"
            "opentelemetry-proto/gen-tonic-messages"
            "http"
            "trace"
            "metrics"
          ];
          "hyper-client" = [ "opentelemetry-http/hyper" ];
          "integration-testing" = [
            "tonic"
            "prost"
            "tokio/full"
            "trace"
            "logs"
          ];
          "internal-logs" = [
            "tracing"
            "opentelemetry/internal-logs"
          ];
          "logs" = [
            "opentelemetry/logs"
            "opentelemetry_sdk/logs"
            "opentelemetry-proto/logs"
          ];
          "metrics" = [
            "opentelemetry/metrics"
            "opentelemetry_sdk/metrics"
            "opentelemetry-proto/metrics"
          ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "prost" = [ "dep:prost" ];
          "reqwest" = [ "dep:reqwest" ];
          "reqwest-blocking-client" = [
            "reqwest/blocking"
            "opentelemetry-http/reqwest"
          ];
          "reqwest-client" = [
            "reqwest"
            "opentelemetry-http/reqwest"
          ];
          "reqwest-rustls" = [
            "reqwest"
            "opentelemetry-http/reqwest-rustls"
          ];
          "reqwest-rustls-webpki-roots" = [
            "reqwest"
            "opentelemetry-http/reqwest-rustls-webpki-roots"
          ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serialize" = [
            "serde"
            "serde_json"
          ];
          "tls" = [ "tonic/tls" ];
          "tls-roots" = [
            "tls"
            "tonic/tls-roots"
          ];
          "tls-webpki-roots" = [
            "tls"
            "tonic/tls-webpki-roots"
          ];
          "tokio" = [ "dep:tokio" ];
          "tonic" = [ "dep:tonic" ];
          "trace" = [
            "opentelemetry/trace"
            "opentelemetry_sdk/trace"
            "opentelemetry-proto/trace"
          ];
          "tracing" = [ "dep:tracing" ];
          "zstd-tonic" = [ "tonic/zstd" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "grpc-tonic"
          "http"
          "http-proto"
          "internal-logs"
          "logs"
          "metrics"
          "opentelemetry-http"
          "prost"
          "reqwest"
          "reqwest-blocking-client"
          "tokio"
          "tonic"
          "trace"
          "tracing"
        ];
      };
      "opentelemetry-proto" = rec {
        crateName = "opentelemetry-proto";
        version = "0.28.0";
        edition = "2021";
        sha256 = "0vbl4si1mny87pmqxxg6wday45pcc8bvpcrf46cpwwi4606qgy2n";
        libName = "opentelemetry_proto";
        dependencies = [
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
          }
          {
            name = "tonic";
            packageId = "tonic";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "codegen"
              "prost"
            ];
          }
        ];
        features = {
          "base64" = [ "dep:base64" ];
          "default" = [ "full" ];
          "full" = [
            "gen-tonic"
            "trace"
            "logs"
            "metrics"
            "zpages"
            "with-serde"
            "internal-logs"
          ];
          "gen-tonic" = [
            "gen-tonic-messages"
            "tonic/transport"
          ];
          "gen-tonic-messages" = [
            "tonic"
            "prost"
          ];
          "hex" = [ "dep:hex" ];
          "internal-logs" = [ "tracing" ];
          "logs" = [
            "opentelemetry/logs"
            "opentelemetry_sdk/logs"
          ];
          "metrics" = [
            "opentelemetry/metrics"
            "opentelemetry_sdk/metrics"
          ];
          "prost" = [ "dep:prost" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "testing" = [ "opentelemetry/testing" ];
          "tonic" = [ "dep:tonic" ];
          "trace" = [
            "opentelemetry/trace"
            "opentelemetry_sdk/trace"
          ];
          "tracing" = [ "dep:tracing" ];
          "with-schemars" = [ "schemars" ];
          "with-serde" = [
            "serde"
            "hex"
            "base64"
          ];
          "zpages" = [ "trace" ];
        };
        resolvedDefaultFeatures = [
          "gen-tonic"
          "gen-tonic-messages"
          "logs"
          "metrics"
          "prost"
          "tonic"
          "trace"
        ];
      };
      "opentelemetry-semantic-conventions" = rec {
        crateName = "opentelemetry-semantic-conventions";
        version = "0.28.0";
        edition = "2021";
        sha256 = "1dzra5yspllg0qi6hry2ncm19h7vxnmvh4y3sqn3cm9dikvs5crg";
        libName = "opentelemetry_semantic_conventions";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "opentelemetry_sdk" = rec {
        crateName = "opentelemetry_sdk";
        version = "0.28.0";
        edition = "2021";
        sha256 = "0w4mycm070f4knvi1x5v199apd1fvi0712qiyv0pz70889havpw4";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [
              "std"
              "sink"
              "async-await-macro"
            ];
          }
          {
            name = "glob";
            packageId = "glob";
            optional = true;
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "std"
              "std_rng"
              "small_rng"
            ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "rt"
              "time"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "async-trait" = [ "dep:async-trait" ];
          "default" = [
            "trace"
            "metrics"
            "logs"
            "internal-logs"
          ];
          "experimental_logs_batch_log_processor_with_async_runtime" = [ "logs" ];
          "experimental_metrics_disable_name_validation" = [ "metrics" ];
          "experimental_metrics_periodicreader_with_async_runtime" = [ "metrics" ];
          "experimental_trace_batch_span_processor_with_async_runtime" = [ "trace" ];
          "glob" = [ "dep:glob" ];
          "http" = [ "dep:http" ];
          "internal-logs" = [ "tracing" ];
          "jaeger_remote_sampler" = [
            "trace"
            "opentelemetry-http"
            "http"
            "serde"
            "serde_json"
            "url"
          ];
          "logs" = [
            "opentelemetry/logs"
            "serde_json"
          ];
          "metrics" = [
            "opentelemetry/metrics"
            "glob"
            "async-trait"
          ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "rand" = [ "dep:rand" ];
          "rt-async-std" = [
            "async-std"
            "experimental_async_runtime"
          ];
          "rt-tokio" = [
            "tokio"
            "tokio-stream"
            "experimental_async_runtime"
          ];
          "rt-tokio-current-thread" = [
            "tokio"
            "tokio-stream"
            "experimental_async_runtime"
          ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "spec_unstable_logs_enabled" = [
            "logs"
            "opentelemetry/spec_unstable_logs_enabled"
          ];
          "spec_unstable_metrics_views" = [ "metrics" ];
          "testing" = [
            "opentelemetry/testing"
            "trace"
            "metrics"
            "logs"
            "rt-async-std"
            "rt-tokio"
            "rt-tokio-current-thread"
            "tokio/macros"
            "tokio/rt-multi-thread"
          ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "trace" = [
            "opentelemetry/trace"
            "rand"
            "percent-encoding"
          ];
          "tracing" = [ "dep:tracing" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [
          "async-trait"
          "default"
          "experimental_async_runtime"
          "glob"
          "internal-logs"
          "logs"
          "metrics"
          "percent-encoding"
          "rand"
          "rt-tokio"
          "serde_json"
          "tokio"
          "tokio-stream"
          "trace"
          "tracing"
        ];
      };
      "os_str_bytes" = rec {
        crateName = "os_str_bytes";
        version = "6.6.1";
        edition = "2021";
        sha256 = "1885z1x4sm86v5p41ggrl49m58rbzzhd1kj72x46yy53p62msdg2";
        authors = [
          "dylni"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
        ];
        features = {
          "checked_conversions" = [ "conversions" ];
          "default" = [
            "memchr"
            "raw_os_str"
          ];
          "memchr" = [ "dep:memchr" ];
          "print_bytes" = [ "dep:print_bytes" ];
          "uniquote" = [ "dep:uniquote" ];
        };
        resolvedDefaultFeatures = [
          "conversions"
          "default"
          "memchr"
          "raw_os_str"
        ];
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.1";
        edition = "2018";
        sha256 = "1fnfgmzkfpjd69v4j9x737b1k8pnn054bvzcn5dm3pkgq595d3gk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [
            "parking_lot_core/nightly"
            "lock_api/nightly"
          ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.8";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [
            "petgraph"
            "thread-id"
            "backtrace"
          ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "path-clean" = rec {
        crateName = "path-clean";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1pcgqxw0mgg3ha5hi5xkjhyjf488bw5rw1g3qlr9awbq4szh3fpc";
        libName = "path_clean";
        authors = [
          "Dan Reeves <hey@danreev.es>"
        ];

      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.6.5";
        edition = "2018";
        sha256 = "1ns7mbxidnn2pqahbbjccxkrqkrll2i5rbxx43ns6rh6fn3cridl";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.7.0";
          }
        ];
        features = {
          "all" = [
            "unstable"
            "quickcheck"
            "matrix_graph"
            "stable_graph"
            "graphmap"
            "rayon"
          ];
          "default" = [
            "graphmap"
            "stable_graph"
            "matrix_graph"
          ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [
            "dep:rayon"
            "indexmap/rayon"
          ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [
            "serde"
            "serde_derive"
          ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "graphmap"
          "matrix_graph"
          "stable_graph"
        ];
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.1.7";
        edition = "2021";
        sha256 = "15cvflrzsgp1zbl5gv37al2r62nl8lc37xkfwf70ql3fji7gcmxy";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.1.7";
        edition = "2021";
        sha256 = "133mxf5vmvnvw4idw2y2lb5bxsza2xlyfl6psjy7mz3l12nmy3rw";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "parsing"
              "printing"
              "clone-impls"
              "proc-macro"
              "full"
              "visit-mut"
            ];
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1zz4xif3iknfrpmvqmh0pcc9mx4cxm28jywqydir3pimcla1wnli";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "piper" = rec {
        crateName = "piper";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0rn0mjjm0cwagdkay77wgmz3sqf8fqmv9d9czm79mvr2yj8c9j4n";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-io" = [ "dep:futures-io" ];
          "portable-atomic" = [
            "atomic-waker/portable-atomic"
            "portable_atomic_crate"
            "portable-atomic-util"
          ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [
            "fastrand/std"
            "futures-io"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "futures-io"
          "std"
        ];
      };
      "pkcs8" = rec {
        crateName = "pkcs8";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1dx7w21gvn07azszgqd3ryjhyphsrjrmq5mmz1fbxkj5g0vv4l7r";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "3des" = [
            "encryption"
            "pkcs5/3des"
          ];
          "alloc" = [
            "der/alloc"
            "der/zeroize"
            "spki/alloc"
          ];
          "des-insecure" = [
            "encryption"
            "pkcs5/des-insecure"
          ];
          "encryption" = [
            "alloc"
            "pkcs5/alloc"
            "pkcs5/pbes2"
            "rand_core"
          ];
          "getrandom" = [ "rand_core/getrandom" ];
          "pem" = [
            "alloc"
            "der/pem"
            "spki/pem"
          ];
          "pkcs5" = [ "dep:pkcs5" ];
          "rand_core" = [ "dep:rand_core" ];
          "sha1-insecure" = [
            "encryption"
            "pkcs5/sha1-insecure"
          ];
          "std" = [
            "alloc"
            "der/std"
            "spki/std"
          ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1wk6yp2phl91795ia0lwkr3wl4a9xkrympvhqq8cxk4d75hwhglm";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "plotters" = rec {
        crateName = "plotters";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0ixpy9svpmr2rkzkxvvdpysjjky4gw104d73n7pi2jbs7m06zsss";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "plotters-backend";
            packageId = "plotters-backend";
          }
          {
            name = "plotters-svg";
            packageId = "plotters-svg";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
            features = [
              "Document"
              "DomRect"
              "Element"
              "HtmlElement"
              "Node"
              "Window"
              "HtmlCanvasElement"
              "CanvasRenderingContext2d"
            ];
          }
        ];
        features = {
          "ab_glyph" = [
            "dep:ab_glyph"
            "once_cell"
          ];
          "all_elements" = [
            "errorbar"
            "candlestick"
            "boxplot"
            "histogram"
          ];
          "all_series" = [
            "area_series"
            "line_series"
            "point_series"
            "surface_series"
          ];
          "bitmap_backend" = [ "plotters-bitmap" ];
          "bitmap_encoder" = [ "plotters-bitmap/image_encoder" ];
          "bitmap_gif" = [ "plotters-bitmap/gif_backend" ];
          "chrono" = [ "dep:chrono" ];
          "datetime" = [ "chrono" ];
          "default" = [
            "bitmap_backend"
            "bitmap_encoder"
            "bitmap_gif"
            "svg_backend"
            "chrono"
            "ttf"
            "image"
            "deprecated_items"
            "all_series"
            "all_elements"
            "full_palette"
            "colormaps"
          ];
          "evcxr" = [ "svg_backend" ];
          "evcxr_bitmap" = [
            "evcxr"
            "bitmap_backend"
            "plotters-svg/bitmap_encoder"
          ];
          "font-kit" = [ "dep:font-kit" ];
          "fontconfig-dlopen" = [ "font-kit/source-fontconfig-dlopen" ];
          "image" = [ "dep:image" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "once_cell" = [ "dep:once_cell" ];
          "pathfinder_geometry" = [ "dep:pathfinder_geometry" ];
          "plotters-bitmap" = [ "dep:plotters-bitmap" ];
          "plotters-svg" = [ "dep:plotters-svg" ];
          "svg_backend" = [ "plotters-svg" ];
          "ttf" = [
            "font-kit"
            "ttf-parser"
            "lazy_static"
            "pathfinder_geometry"
          ];
          "ttf-parser" = [ "dep:ttf-parser" ];
        };
        resolvedDefaultFeatures = [
          "area_series"
          "line_series"
          "plotters-svg"
          "svg_backend"
        ];
      };
      "plotters-backend" = rec {
        crateName = "plotters-backend";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0ahpliim4hrrf7d4ispc2hwr7rzkn6d6nf7lyyrid2lm28yf2hnz";
        libName = "plotters_backend";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];

      };
      "plotters-svg" = rec {
        crateName = "plotters-svg";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0w56sxaa2crpasa1zj0bhxzihlapqfkncggavyngg0w86anf5fji";
        libName = "plotters_svg";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];
        dependencies = [
          {
            name = "plotters-backend";
            packageId = "plotters-backend";
          }
        ];
        features = {
          "bitmap_encoder" = [ "image" ];
          "image" = [ "dep:image" ];
        };
      };
      "polling" = rec {
        crateName = "polling";
        version = "3.7.4";
        edition = "2021";
        sha256 = "0bs4nhwfwsvlzlhah2gbhj3aa9ynvchv2g350wapswh26a65c156";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.4.0";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null)
              );
            features = [
              "event"
              "fs"
              "pipe"
              "process"
              "std"
              "time"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Wdk_Foundation"
              "Wdk_Storage_FileSystem"
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_Security"
              "Win32_Storage_FileSystem"
              "Win32_System_IO"
              "Win32_System_LibraryLoader"
              "Win32_System_Threading"
              "Win32_System_WindowsProgramming"
            ];
          }
        ];

      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.10.0";
        edition = "2018";
        sha256 = "1rjfim62djiakf5rcq3r526hac0d1dd9hwa1jmiin7q7ad2c4398";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "fallback"
        ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [
            "std"
            "macros"
          ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.20";
        edition = "2021";
        sha256 = "017ax9ssdnpww7nrl1hvqh2lzncpv04nnsibmnw9nxjnaqlpp5bp";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [
              "simd"
              "derive"
            ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "simd"
          "std"
        ];
      };
      "predicates" = rec {
        crateName = "predicates";
        version = "3.1.3";
        edition = "2021";
        sha256 = "0wrm57acvagx0xmh5xffx5xspsr2kbggm698x0vks132fpjrxld5";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
        ];
        features = {
          "default" = [
            "diff"
            "regex"
            "float-cmp"
            "normalize-line-endings"
            "color"
          ];
          "diff" = [ "dep:difflib" ];
          "float-cmp" = [ "dep:float-cmp" ];
          "normalize-line-endings" = [ "dep:normalize-line-endings" ];
          "regex" = [ "dep:regex" ];
        };
      };
      "predicates-core" = rec {
        crateName = "predicates-core";
        version = "1.0.9";
        edition = "2021";
        sha256 = "1yjz144yn3imq2r4mh7k9h0r8wv4yyjjj57bs0zwkscz24mlczkj";
        libName = "predicates_core";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];

      };
      "predicates-tree" = rec {
        crateName = "predicates-tree";
        version = "1.0.12";
        edition = "2021";
        sha256 = "0p223d9y02ywwxs3yl68kziswz4da4vabz67jfhp7yqx71njvpbj";
        libName = "predicates_tree";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
          {
            name = "termtree";
            packageId = "termtree";
          }
        ];

      };
      "pretty_assertions" = rec {
        crateName = "pretty_assertions";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0v8iq35ca4rw3rza5is3wjxwsf88303ivys07anc5yviybi31q9s";
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Florent Fayolle <florent.fayolle69@gmail.com>"
          "Tom Milligan <code@tommilligan.net>"
        ];
        dependencies = [
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "yansi";
            packageId = "yansi";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
          "unstable"
        ];
      };
      "prettyplease" = rec {
        crateName = "prettyplease";
        version = "0.2.25";
        edition = "2021";
        links = "prettyplease02";
        sha256 = "0cw0n68wb2d0qgcqm2w00af3zbidkclyrd2darylbl34bj4frlb4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [ "parsing" ];
          }
        ];
        features = {
          "verbatim" = [ "syn/parsing" ];
        };
      };
      "proc-macro-crate" = rec {
        crateName = "proc-macro-crate";
        version = "3.2.0";
        edition = "2021";
        sha256 = "0yzsqnavb3lmrcsmbrdjfrky9vcbl46v59xi9avn0796rb3likwf";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.22";
          }
        ];

      };
      "proc-macro-error-attr2" = rec {
        crateName = "proc-macro-error-attr2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1ifzi763l7swl258d8ar4wbpxj4c9c2im7zy89avm6xv6vgl5pln";
        procMacro = true;
        libName = "proc_macro_error_attr2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "proc-macro-error2" = rec {
        crateName = "proc-macro-error2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "00lq21vgh7mvyx51nwxwf822w2fpww1x0z8z0q47p8705g2hbv0i";
        libName = "proc_macro_error2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr2";
            packageId = "proc-macro-error-attr2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "syn-error"
        ];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.92";
        edition = "2021";
        sha256 = "1c1vjy5wg8iy7kxsxda564qf4ljp0asysmbn2i7caj177x5m9lrp";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "proptest" = rec {
        crateName = "proptest";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0l4y4bb8hffv7cys7d59qwqdmvmqjfzz0x9vblc08209clqfkjhl";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "unarray";
            packageId = "unarray";
          }
        ];
        features = {
          "attr-macro" = [ "proptest-macro" ];
          "bit-set" = [
            "dep:bit-set"
            "dep:bit-vec"
          ];
          "default" = [
            "std"
            "fork"
            "timeout"
            "bit-set"
          ];
          "default-code-coverage" = [
            "std"
            "fork"
            "timeout"
            "bit-set"
          ];
          "fork" = [
            "std"
            "rusty-fork"
            "tempfile"
          ];
          "handle-panics" = [ "std" ];
          "hardware-rng" = [ "x86" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "no_std" = [ "num-traits/libm" ];
          "proptest-macro" = [ "dep:proptest-macro" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "rusty-fork" = [ "dep:rusty-fork" ];
          "std" = [
            "rand/std"
            "lazy_static"
            "regex-syntax"
            "num-traits/std"
          ];
          "tempfile" = [ "dep:tempfile" ];
          "timeout" = [
            "fork"
            "rusty-fork/timeout"
          ];
          "x86" = [ "dep:x86" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "lazy_static"
          "regex-syntax"
          "std"
          "tempfile"
        ];
      };
      "prost" = rec {
        crateName = "prost";
        version = "0.13.4";
        edition = "2021";
        sha256 = "1v22ds00ixxga07m09w4vqvylpg1xpbmjp5333vcrr1h89nfy3rc";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive";
            optional = true;
          }
        ];
        features = {
          "default" = [
            "derive"
            "std"
          ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "derive"
          "prost-derive"
          "std"
        ];
      };
      "prost-build" = rec {
        crateName = "prost-build";
        version = "0.13.4";
        edition = "2021";
        sha256 = "0ys9hjx3ykzanzjz2ppxppdfxi62ga9h1ip2d065isw0xnzfbwyh";
        libName = "prost_build";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            usesDefaultFeatures = false;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
          }
          {
            name = "prost";
            packageId = "prost";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types";
            usesDefaultFeatures = false;
          }
          {
            name = "pulldown-cmark";
            packageId = "pulldown-cmark";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pulldown-cmark-to-cmark";
            packageId = "pulldown-cmark-to-cmark";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [
              "std"
              "unicode-bool"
            ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "cleanup-markdown" = [
            "dep:pulldown-cmark"
            "dep:pulldown-cmark-to-cmark"
          ];
          "default" = [ "format" ];
          "format" = [
            "dep:prettyplease"
            "dep:syn"
          ];
        };
        resolvedDefaultFeatures = [
          "cleanup-markdown"
          "default"
          "format"
        ];
      };
      "prost-derive" = rec {
        crateName = "prost-derive";
        version = "0.13.4";
        edition = "2021";
        sha256 = "1qv2040663cgjyilp9dfgrn83xsr8yv9bx5qkwnyvhm5gsfmlz0m";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-types" = rec {
        crateName = "prost-types";
        version = "0.13.4";
        edition = "2021";
        sha256 = "1z78yxzxfhxy7kgzrq3mcbv70jqksbs1mhpb799r67m6p9b1wbyc";
        libName = "prost_types";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "prost-wkt" = rec {
        crateName = "prost-wkt";
        version = "0.6.0";
        edition = "2021";
        sha256 = "16c2mbaq2hff51kwr204fncnmi0qx2zz4ff3pb1086qqxqmlxn58";
        libName = "prost_wkt";
        authors = [
          "fdeantoni <fdeantoni@gmail.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "inventory";
            packageId = "inventory";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "typetag";
            packageId = "typetag";
          }
        ];

      };
      "prost-wkt-build" = rec {
        crateName = "prost-wkt-build";
        version = "0.6.0";
        edition = "2021";
        sha256 = "054v5qqvdv29g5s1kr26zv0yvzc8gmnlx9k2dw6026g7rdd9srla";
        libName = "prost_wkt_build";
        authors = [
          "fdeantoni <fdeantoni@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "prost-wkt-types" = rec {
        crateName = "prost-wkt-types";
        version = "0.6.0";
        edition = "2021";
        sha256 = "0r2gxf5b604b00v1fwif1rn5nm5xk4vb3ri29dhm9rl2kf70dvq1";
        libName = "prost_wkt_types";
        authors = [
          "fdeantoni <fdeantoni@gmail.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-wkt";
            packageId = "prost-wkt";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        buildDependencies = [
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
          }
          {
            name = "prost-wkt-build";
            packageId = "prost-wkt-build";
          }
          {
            name = "regex";
            packageId = "regex";
          }
        ];
        features = {
          "default" = [ "std" ];
          "protobuf-src" = [ "dep:protobuf-src" ];
          "protox" = [ "dep:protox" ];
          "vendored-protoc" = [ "protobuf-src" ];
          "vendored-protox" = [ "protox" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "pulldown-cmark" = rec {
        crateName = "pulldown-cmark";
        version = "0.12.2";
        edition = "2021";
        crateBin = [ ];
        sha256 = "055v2bzzrkrbrc1s6l9mbkvpdkhkid5j7vdkpcnc9k7b582s4szq";
        libName = "pulldown_cmark";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
          "Marcus Klaas de Vries <mail@marcusklaas.nl>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        features = {
          "default" = [
            "getopts"
            "html"
          ];
          "getopts" = [ "dep:getopts" ];
          "html" = [ "pulldown-cmark-escape" ];
          "pulldown-cmark-escape" = [ "dep:pulldown-cmark-escape" ];
          "serde" = [ "dep:serde" ];
          "simd" = [ "pulldown-cmark-escape?/simd" ];
        };
      };
      "pulldown-cmark-to-cmark" = rec {
        crateName = "pulldown-cmark-to-cmark";
        version = "19.0.1";
        edition = "2018";
        sha256 = "12gm6wk67q4qzh73bbpyw5x3h1cr57g7mnlq14zwddni97g8fjp8";
        libName = "pulldown_cmark_to_cmark";
        authors = [
          "Sebastian Thiel <byronimo@gmail.com>"
          "Dylan Owen <dyltotheo@gmail.com>"
          "Alessandro Ogier <alessandro.ogier@gmail.com>"
          "Zixian Cai <2891235+caizixian@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "pulldown-cmark";
            packageId = "pulldown-cmark";
            usesDefaultFeatures = false;
          }
        ];

      };
      "quick-xml" = rec {
        crateName = "quick-xml";
        version = "0.36.2";
        edition = "2021";
        sha256 = "1zj3sjcjk6sn544wb2wvhr1km5f9cy664vzclygfsnph9mxrlr7p";
        libName = "quick_xml";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "overlapped-lists"
          "serde"
          "serialize"
        ];
      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.6";
        edition = "2021";
        sha256 = "1vq55p4kfc4zjxj58xrpf3kcjjqi4mn0wf52a5rzkiky4w46isb2";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = [ "tracing" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.0";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "sync"
              "rt"
              "rt-multi-thread"
              "time"
              "macros"
            ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "aws-lc-rs" = [ "proto/aws-lc-rs" ];
          "aws-lc-rs-fips" = [ "proto/aws-lc-rs-fips" ];
          "default" = [
            "log"
            "platform-verifier"
            "runtime-tokio"
            "rustls-ring"
          ];
          "futures-io" = [ "dep:futures-io" ];
          "log" = [
            "tracing/log"
            "proto/log"
            "udp/log"
          ];
          "platform-verifier" = [ "proto/platform-verifier" ];
          "ring" = [ "proto/ring" ];
          "runtime-async-std" = [
            "async-io"
            "async-std"
          ];
          "runtime-smol" = [
            "async-io"
            "smol"
          ];
          "runtime-tokio" = [
            "tokio/time"
            "tokio/rt"
            "tokio/net"
          ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [
            "dep:rustls"
            "aws-lc-rs"
            "proto/rustls-aws-lc-rs"
            "proto/aws-lc-rs"
          ];
          "rustls-aws-lc-rs-fips" = [
            "dep:rustls"
            "aws-lc-rs-fips"
            "proto/rustls-aws-lc-rs-fips"
            "proto/aws-lc-rs-fips"
          ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [
            "dep:rustls"
            "ring"
            "proto/rustls-ring"
            "proto/ring"
          ];
          "smol" = [ "dep:smol" ];
        };
        resolvedDefaultFeatures = [
          "ring"
          "runtime-tokio"
          "rustls"
          "rustls-ring"
        ];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.9";
        edition = "2021";
        sha256 = "0p8k3iqd0rcxc7b6m2yyijhw4bpfwa61lyzigwvjwzax97rmxzm2";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "js" ];
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm32_unknown_unknown_js" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.0";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "web" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [
              "alloc"
              "alloc"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "aws-lc-rs" = [
            "dep:aws-lc-rs"
            "aws-lc-rs?/aws-lc-sys"
            "aws-lc-rs?/prebuilt-nasm"
          ];
          "aws-lc-rs-fips" = [
            "aws-lc-rs"
            "aws-lc-rs?/fips"
          ];
          "default" = [
            "rustls-ring"
            "log"
          ];
          "log" = [ "tracing/log" ];
          "platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [
            "dep:rustls"
            "rustls?/aws-lc-rs"
            "aws-lc-rs"
          ];
          "rustls-aws-lc-rs-fips" = [
            "rustls-aws-lc-rs"
            "aws-lc-rs-fips"
          ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [
            "dep:rustls"
            "rustls?/ring"
            "ring"
          ];
        };
        resolvedDefaultFeatures = [
          "ring"
          "rustls-ring"
        ];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.9";
        edition = "2021";
        sha256 = "016rir0w5q6brwd33id2nvqi67xpl3k55ms4srqkmfml2xi2hh0w";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_IO"
              "Win32_Networking_WinSock"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [
            "tracing"
            "log"
          ];
          "direct-log" = [ "dep:log" ];
          "log" = [ "tracing/log" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.38";
        edition = "2018";
        sha256 = "1k0s75w61k6ch0rs263r4j69b7vj1wadqgb9dia4ylc9mymcqk8f";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "radix_trie" = rec {
        crateName = "radix_trie";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1zaq3im5ss03w91ij11cj97vvzc5y1f3064d9pi2ysnwziww2sf0";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
        ];
        dependencies = [
          {
            name = "endian-type";
            packageId = "endian-type";
          }
          {
            name = "nibble_vec";
            packageId = "nibble_vec";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [
            "std"
            "std_rng"
          ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [
            "serde"
            "rand_core/serde1"
          ];
          "simd_support" = [ "packed_simd" ];
          "std" = [
            "rand_core/std"
            "rand_chacha/std"
            "alloc"
            "getrandom"
            "libc"
          ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "getrandom"
          "libc"
          "rand_chacha"
          "small_rng"
          "std"
          "std_rng"
        ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [
            "alloc"
            "getrandom"
            "getrandom/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "getrandom"
          "std"
        ];
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.3.0";
        edition = "2018";
        sha256 = "13vcag7gmqspzyabfl1gr9ykvxd2142q2agrj8dkyjmfqmgg4nyj";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [
            "dep:wasm_sync"
            "rayon-core/web_spin_lock"
          ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        libName = "rayon_core";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "redb" = rec {
        crateName = "redb";
        version = "2.6.2";
        edition = "2024";
        sha256 = "1xykri7izzgqw4fbcbxqc35mzhiya101csd4pq48yfcg082qpcsr";
        type = [
          "cdylib"
          "rlib"
        ];
        authors = [
          "Christopher Berner <me@cberner.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "logging" = [ "dep:log" ];
          "python" = [
            "dep:pyo3"
            "dep:pyo3-build-config"
          ];
        };
        resolvedDefaultFeatures = [ "logging" ];
      };
      "redox_syscall 0.3.5" = rec {
        crateName = "redox_syscall";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0acgiy2lc1m2vr8cr33l5s7k9wzby8dybyab1a9p753hcbr68xjn";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "bitflags/rustc-dep-of-std"
          ];
        };
      };
      "redox_syscall 0.5.8" = rec {
        crateName = "redox_syscall";
        version = "0.5.8";
        edition = "2021";
        sha256 = "0d48ylyd6gsamynyp257p6n2zl4dw2fhnn5z9y3nhgpri6rn5a03";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [
            "core"
            "bitflags/rustc-dep-of-std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "userspace"
        ];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.6";
        edition = "2021";
        sha256 = "0hya2cxx6hxmjfxzv9n8rjl5igpychav7zfi1f81pz6i4krry05s";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            features = [ "std" ];
          }
          {
            name = "libredox";
            packageId = "libredox";
            usesDefaultFeatures = false;
            features = [
              "std"
              "call"
            ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "auth" = [
            "rust-argon2"
            "zeroize"
          ];
          "default" = [ "auth" ];
          "rust-argon2" = [ "dep:rust-argon2" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "syntax"
              "meta"
              "nfa-pikevm"
            ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "perf"
            "unicode"
            "regex-syntax/default"
          ];
          "logging" = [
            "aho-corasick?/logging"
            "memchr?/logging"
            "regex-automata/logging"
          ];
          "perf" = [
            "perf-cache"
            "perf-dfa"
            "perf-onepass"
            "perf-backtrack"
            "perf-inline"
            "perf-literal"
          ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [
            "regex-automata/dfa-build"
            "regex-automata/dfa-search"
          ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [
            "dep:aho-corasick"
            "dep:memchr"
            "regex-automata/perf-literal"
          ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [
            "aho-corasick?/std"
            "memchr?/std"
            "regex-automata/std"
            "regex-syntax/std"
          ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
            "regex-automata/unicode"
            "regex-syntax/unicode"
          ];
          "unicode-age" = [
            "regex-automata/unicode-age"
            "regex-syntax/unicode-age"
          ];
          "unicode-bool" = [
            "regex-automata/unicode-bool"
            "regex-syntax/unicode-bool"
          ];
          "unicode-case" = [
            "regex-automata/unicode-case"
            "regex-syntax/unicode-case"
          ];
          "unicode-gencat" = [
            "regex-automata/unicode-gencat"
            "regex-syntax/unicode-gencat"
          ];
          "unicode-perl" = [
            "regex-automata/unicode-perl"
            "regex-automata/unicode-word-boundary"
            "regex-syntax/unicode-perl"
          ];
          "unicode-script" = [
            "regex-automata/unicode-script"
            "regex-syntax/unicode-script"
          ];
          "unicode-segment" = [
            "regex-automata/unicode-segment"
            "regex-syntax/unicode-segment"
          ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "perf"
          "perf-backtrack"
          "perf-cache"
          "perf-dfa"
          "perf-inline"
          "perf-literal"
          "perf-onepass"
          "std"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
        ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [
            "std"
            "fst"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "regex-syntax"
          "std"
        ];
      };
      "regex-automata 0.4.9" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "syntax"
            "perf"
            "unicode"
            "meta"
            "nfa"
            "dfa"
            "hybrid"
          ];
          "dfa" = [
            "dfa-build"
            "dfa-search"
            "dfa-onepass"
          ];
          "dfa-build" = [
            "nfa-thompson"
            "dfa-search"
          ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [
            "alloc"
            "nfa-thompson"
          ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [
            "logging"
            "std"
          ];
          "logging" = [
            "dep:log"
            "aho-corasick?/logging"
            "memchr?/logging"
          ];
          "meta" = [
            "syntax"
            "nfa-pikevm"
          ];
          "nfa" = [
            "nfa-thompson"
            "nfa-pikevm"
            "nfa-backtrack"
          ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [
            "perf-inline"
            "perf-literal"
          ];
          "perf-literal" = [
            "perf-literal-substring"
            "perf-literal-multisubstring"
          ];
          "perf-literal-multisubstring" = [
            "std"
            "dep:aho-corasick"
          ];
          "perf-literal-substring" = [
            "aho-corasick?/perf-literal"
            "dep:memchr"
          ];
          "std" = [
            "regex-syntax?/std"
            "memchr?/std"
            "aho-corasick?/std"
            "alloc"
          ];
          "syntax" = [
            "dep:regex-syntax"
            "alloc"
          ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
            "unicode-word-boundary"
            "regex-syntax?/unicode"
          ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "dfa-onepass"
          "dfa-search"
          "hybrid"
          "meta"
          "nfa-backtrack"
          "nfa-pikevm"
          "nfa-thompson"
          "perf-inline"
          "perf-literal"
          "perf-literal-multisubstring"
          "perf-literal-substring"
          "std"
          "syntax"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
          "unicode-word-boundary"
        ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
        ];
      };
      "regex-syntax 0.8.5" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [
            "std"
            "unicode"
          ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
        ];
      };
      "relative-path" = rec {
        crateName = "relative-path";
        version = "1.9.3";
        edition = "2021";
        sha256 = "1limlh8fzwi21g0473fqzd6fln9iqkwvzp3816bxi31pkilz6fds";
        libName = "relative_path";
        authors = [
          "John-John Tedro <udoprog@tedro.se>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "reqwest" = rec {
        crateName = "reqwest";
        version = "0.12.12";
        edition = "2021";
        sha256 = "1nnigi6jcrqdd5k5myc53qdkdnrx8zjgan029q1w5hspf5039rs3";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "http1"
              "client"
            ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "http1"
              "tls12"
            ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "http1"
              "client"
              "client-legacy"
              "tokio"
            ];
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "quinn";
            packageId = "quinn";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "rustls"
              "runtime-tokio"
            ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "std"
              "tls12"
            ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            features = [ "futures" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "net"
              "time"
            ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tls12" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "codec"
              "io"
            ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "timeout"
              "util"
            ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-streams";
            packageId = "wasm-streams";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [
              "AbortController"
              "AbortSignal"
              "Headers"
              "Request"
              "RequestInit"
              "RequestMode"
              "Response"
              "Window"
              "FormData"
              "Blob"
              "BlobPropertyBag"
              "ServiceWorkerGlobalScope"
              "RequestCredentials"
              "File"
              "ReadableStream"
            ];
          }
          {
            name = "windows-registry";
            packageId = "windows-registry";
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "std"
              "alloc"
            ];
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "http1"
              "http2"
              "client"
              "server"
            ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "http1"
              "http2"
              "client"
              "client-legacy"
              "server-auto"
              "tokio"
            ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "ring" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "macros"
              "rt-multi-thread"
            ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "limit" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [
            "dep:hyper-rustls"
            "dep:tokio-rustls"
            "dep:rustls"
            "__tls"
            "dep:rustls-pemfile"
            "dep:rustls-pki-types"
          ];
          "__rustls-ring" = [
            "hyper-rustls?/ring"
            "tokio-rustls?/ring"
            "rustls?/ring"
            "quinn?/ring"
          ];
          "__tls" = [
            "dep:rustls-pemfile"
            "tokio/io-util"
          ];
          "blocking" = [
            "dep:futures-channel"
            "futures-channel?/sink"
            "futures-util/io"
            "futures-util/sink"
            "tokio/sync"
          ];
          "brotli" = [
            "dep:async-compression"
            "async-compression?/brotli"
            "dep:tokio-util"
          ];
          "charset" = [ "dep:encoding_rs" ];
          "cookies" = [
            "dep:cookie_crate"
            "dep:cookie_store"
          ];
          "default" = [
            "default-tls"
            "charset"
            "http2"
            "macos-system-configuration"
          ];
          "default-tls" = [
            "dep:hyper-tls"
            "dep:native-tls-crate"
            "__tls"
            "dep:tokio-native-tls"
          ];
          "deflate" = [
            "dep:async-compression"
            "async-compression?/zlib"
            "dep:tokio-util"
          ];
          "gzip" = [
            "dep:async-compression"
            "async-compression?/gzip"
            "dep:tokio-util"
          ];
          "h2" = [ "dep:h2" ];
          "hickory-dns" = [ "dep:hickory-resolver" ];
          "http2" = [
            "h2"
            "hyper/http2"
            "hyper-util/http2"
            "hyper-rustls?/http2"
          ];
          "http3" = [
            "rustls-tls-manual-roots"
            "dep:h3"
            "dep:h3-quinn"
            "dep:quinn"
            "dep:slab"
            "dep:futures-channel"
          ];
          "json" = [ "dep:serde_json" ];
          "macos-system-configuration" = [ "dep:system-configuration" ];
          "multipart" = [ "dep:mime_guess" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [
            "native-tls"
            "native-tls-crate?/alpn"
            "hyper-tls?/alpn"
          ];
          "native-tls-vendored" = [
            "native-tls"
            "native-tls-crate?/vendored"
          ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [
            "rustls-tls-manual-roots-no-provider"
            "__rustls-ring"
          ];
          "rustls-tls-manual-roots-no-provider" = [ "__rustls" ];
          "rustls-tls-native-roots" = [
            "rustls-tls-native-roots-no-provider"
            "__rustls-ring"
          ];
          "rustls-tls-native-roots-no-provider" = [
            "dep:rustls-native-certs"
            "hyper-rustls?/native-tokio"
            "__rustls"
          ];
          "rustls-tls-no-provider" = [ "rustls-tls-manual-roots-no-provider" ];
          "rustls-tls-webpki-roots" = [
            "rustls-tls-webpki-roots-no-provider"
            "__rustls-ring"
          ];
          "rustls-tls-webpki-roots-no-provider" = [
            "dep:webpki-roots"
            "hyper-rustls?/webpki-tokio"
            "__rustls"
          ];
          "socks" = [ "dep:tokio-socks" ];
          "stream" = [
            "tokio/fs"
            "dep:tokio-util"
            "dep:wasm-streams"
          ];
          "zstd" = [
            "dep:async-compression"
            "async-compression?/zstd"
            "dep:tokio-util"
          ];
        };
        resolvedDefaultFeatures = [
          "__rustls"
          "__rustls-ring"
          "__tls"
          "blocking"
          "h2"
          "http2"
          "json"
          "rustls-tls-native-roots"
          "rustls-tls-native-roots-no-provider"
          "stream"
        ];
      };
      "reqwest-middleware" = rec {
        crateName = "reqwest-middleware";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1i64p3wqqgj8yrfr97afn5fy161lkgkk046hm91pm6mx2dargs34";
        libName = "reqwest_middleware";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest";
            features = [ "rustls-tls" ];
          }
        ];
        features = {
          "charset" = [ "reqwest/charset" ];
          "http2" = [ "reqwest/http2" ];
          "json" = [ "reqwest/json" ];
          "multipart" = [ "reqwest/multipart" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
        };
      };
      "reqwest-tracing" = rec {
        crateName = "reqwest-tracing";
        version = "0.5.6";
        edition = "2018";
        sha256 = "0i177cgkdxk9h9zqa7vshd376p5p7py3y3y1mnsijczykj6qmj6r";
        libName = "reqwest_tracing";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" ];
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "matchit";
            packageId = "matchit 0.8.5";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            rename = "opentelemetry_0_28_pkg";
            optional = true;
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-opentelemetry";
            packageId = "tracing-opentelemetry";
            rename = "tracing-opentelemetry_0_29_pkg";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest";
            features = [ "rustls-tls" ];
          }
        ];
        features = {
          "opentelemetry_0_20" = [
            "opentelemetry_0_20_pkg"
            "tracing-opentelemetry_0_21_pkg"
          ];
          "opentelemetry_0_20_pkg" = [ "dep:opentelemetry_0_20_pkg" ];
          "opentelemetry_0_21" = [
            "opentelemetry_0_21_pkg"
            "tracing-opentelemetry_0_22_pkg"
          ];
          "opentelemetry_0_21_pkg" = [ "dep:opentelemetry_0_21_pkg" ];
          "opentelemetry_0_22" = [
            "opentelemetry_0_22_pkg"
            "tracing-opentelemetry_0_23_pkg"
          ];
          "opentelemetry_0_22_pkg" = [ "dep:opentelemetry_0_22_pkg" ];
          "opentelemetry_0_23" = [
            "opentelemetry_0_23_pkg"
            "tracing-opentelemetry_0_24_pkg"
          ];
          "opentelemetry_0_23_pkg" = [ "dep:opentelemetry_0_23_pkg" ];
          "opentelemetry_0_24" = [
            "opentelemetry_0_24_pkg"
            "tracing-opentelemetry_0_25_pkg"
          ];
          "opentelemetry_0_24_pkg" = [ "dep:opentelemetry_0_24_pkg" ];
          "opentelemetry_0_25" = [
            "opentelemetry_0_25_pkg"
            "tracing-opentelemetry_0_26_pkg"
          ];
          "opentelemetry_0_25_pkg" = [ "dep:opentelemetry_0_25_pkg" ];
          "opentelemetry_0_26" = [
            "opentelemetry_0_26_pkg"
            "tracing-opentelemetry_0_27_pkg"
          ];
          "opentelemetry_0_26_pkg" = [ "dep:opentelemetry_0_26_pkg" ];
          "opentelemetry_0_27" = [
            "opentelemetry_0_27_pkg"
            "tracing-opentelemetry_0_28_pkg"
          ];
          "opentelemetry_0_27_pkg" = [ "dep:opentelemetry_0_27_pkg" ];
          "opentelemetry_0_28" = [
            "opentelemetry_0_28_pkg"
            "tracing-opentelemetry_0_29_pkg"
          ];
          "opentelemetry_0_28_pkg" = [ "dep:opentelemetry_0_28_pkg" ];
          "tracing-opentelemetry_0_21_pkg" = [ "dep:tracing-opentelemetry_0_21_pkg" ];
          "tracing-opentelemetry_0_22_pkg" = [ "dep:tracing-opentelemetry_0_22_pkg" ];
          "tracing-opentelemetry_0_23_pkg" = [ "dep:tracing-opentelemetry_0_23_pkg" ];
          "tracing-opentelemetry_0_24_pkg" = [ "dep:tracing-opentelemetry_0_24_pkg" ];
          "tracing-opentelemetry_0_25_pkg" = [ "dep:tracing-opentelemetry_0_25_pkg" ];
          "tracing-opentelemetry_0_26_pkg" = [ "dep:tracing-opentelemetry_0_26_pkg" ];
          "tracing-opentelemetry_0_27_pkg" = [ "dep:tracing-opentelemetry_0_27_pkg" ];
          "tracing-opentelemetry_0_28_pkg" = [ "dep:tracing-opentelemetry_0_28_pkg" ];
          "tracing-opentelemetry_0_29_pkg" = [ "dep:tracing-opentelemetry_0_29_pkg" ];
        };
        resolvedDefaultFeatures = [
          "opentelemetry_0_28"
          "opentelemetry_0_28_pkg"
          "tracing-opentelemetry_0_29_pkg"
        ];
      };
      "reserve-port" = rec {
        crateName = "reserve-port";
        version = "2.0.1";
        edition = "2021";
        sha256 = "10x21rdb1hjzp6n5flbbw3hfd7brmirckz1q0zsf3a7s5d516f4q";
        libName = "reserve_port";
        authors = [
          "Joseph Lenton <josephlenton@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "ring" = rec {
        crateName = "ring";
        version = "0.17.14";
        edition = "2021";
        links = "ring_core_0_17_14_";
        sha256 = "1dw32gv19ccq4hsx3ribhpdzri1vnrlcfqb2vj41xn4l49n9ws54";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (("aarch64" == target."arch" or null) && ("little" == target."endian" or null))
                && ("apple" == target."vendor" or null)
                && (
                  ("ios" == target."os" or null)
                  || ("macos" == target."os" or null)
                  || ("tvos" == target."os" or null)
                  || ("visionos" == target."os" or null)
                  || ("watchos" == target."os" or null)
                )
              );
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (
                  (("aarch64" == target."arch" or null) && ("little" == target."endian" or null))
                  || (("arm" == target."arch" or null) && ("little" == target."endian" or null))
                )
                && (("android" == target."os" or null) || ("linux" == target."os" or null))
              );
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target =
              { target, features }:
              (
                (("aarch64" == target."arch" or null) && ("little" == target."endian" or null))
                && ("windows" == target."os" or null)
              );
            features = [
              "Win32_Foundation"
              "Win32_System_Threading"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [
            "alloc"
            "dev_urandom_fallback"
          ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "dev_urandom_fallback"
          "std"
          "wasm32_unknown_unknown_js"
        ];
      };
      "rnix" = rec {
        crateName = "rnix";
        version = "0.11.0";
        edition = "2021";
        sha256 = "0pybq9gp4b7lp0066236jpqi9lgb1bzvqc9axymwrq3hxgdwwddv";
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        dependencies = [
          {
            name = "rowan";
            packageId = "rowan";
          }
        ];

      };
      "rowan" = rec {
        crateName = "rowan";
        version = "0.15.16";
        edition = "2021";
        sha256 = "0gdf8whwfzv41dr6xp2rhvgy83ckgg7wa7bss8rfcipsac12nm0a";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "countme";
            packageId = "countme";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "inline-more" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "text-size";
            packageId = "text-size";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [
            "serde"
            "text-size/serde"
          ];
        };
      };
      "rstest" = rec {
        crateName = "rstest";
        version = "0.26.1";
        edition = "2021";
        sha256 = "0jcxhg9mxlr2p9an14algbcq6ax7r0sk1w1kbals5aiv0qy1k8zm";
        authors = [
          "Michele d'Amico <michele.damico@gmail.com>"
        ];
        dependencies = [
          {
            name = "rstest_macros";
            packageId = "rstest_macros";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-timeout" = [
            "dep:futures-timer"
            "dep:futures-util"
            "rstest_macros/async-timeout"
          ];
          "crate-name" = [ "rstest_macros/crate-name" ];
          "default" = [
            "async-timeout"
            "crate-name"
          ];
        };
      };
      "rstest_macros" = rec {
        crateName = "rstest_macros";
        version = "0.26.1";
        edition = "2021";
        sha256 = "185v185wn2x3llp3nn1i7h44vi5ffnnsj8b1a32m2ygzy08m714w";
        procMacro = true;
        authors = [
          "Michele d'Amico <michele.damico@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "relative-path";
            packageId = "relative-path";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "parsing"
              "extra-traits"
              "visit"
              "visit-mut"
            ];
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "crate-name" = [ "dep:proc-macro-crate" ];
          "default" = [
            "async-timeout"
            "crate-name"
          ];
        };
      };
      "rstest_reuse" = rec {
        crateName = "rstest_reuse";
        version = "0.7.0";
        edition = "2021";
        sha256 = "057y4v1rh9br58n2m3xqvm8xyx8k96jpgibgls3sah78f93gpa5k";
        procMacro = true;
        authors = [
          "Michele d'Amico <michele.damico@gmail.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "rust-multipart-rfc7578_2" = rec {
        crateName = "rust-multipart-rfc7578_2";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0mwd3i2mk91n6diaxnkw28vyjbifhrm5ls73pcpfzz8a1i0lidq3";
        libName = "rust_multipart_rfc7578_2";
        authors = [
          "Joseph Lenton <josephlenton@gmail.com>"
          "Ferris Tseng <ferristseng@fastmail.fm>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "io" ];
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
          }
          {
            name = "rand";
            packageId = "rand";
            features = [ "small_rng" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
      };
      "rustc-hash 1.1.0" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "rustc-hash 2.1.0" = rec {
        crateName = "rustc-hash";
        version = "2.1.0";
        edition = "2021";
        sha256 = "15yln6fmqlbg0k35r748h8g9xsd637ri23xihq81jb03ncwq1yy7";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [
            "dep:rand"
            "std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rustix" = rec {
        crateName = "rustix";
        version = "0.38.42";
        edition = "2021";
        sha256 = "11fvprv3p450ggyqacp7sdpjbbsgm5zvfjwnzy8bfbmbrf7c6ggr";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && (("little" == target."endian" or null) || ("s390x" == target."arch" or null))
                && (
                  ("arm" == target."arch" or null)
                  || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || ("riscv64" == target."arch" or null)
                  || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                  || ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                )
              );
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."windows" or false))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && (("little" == target."endian" or null) || ("s390x" == target."arch" or null))
                      && (
                        ("arm" == target."arch" or null)
                        || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || ("riscv64" == target."arch" or null)
                        || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                        || ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      )
                    )
                  )
                )
              );
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && (("little" == target."endian" or null) || ("s390x" == target."arch" or null))
                && (
                  ("arm" == target."arch" or null)
                  || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || ("riscv64" == target."arch" or null)
                  || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                  || ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                )
              );
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."windows" or false))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && (("little" == target."endian" or null) || ("s390x" == target."arch" or null))
                      && (
                        ("arm" == target."arch" or null)
                        || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || ("riscv64" == target."arch" or null)
                        || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                        || ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      )
                    )
                  )
                )
              );
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (("android" == target."os" or null) || ("linux" == target."os" or null))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && (("little" == target."endian" or null) || ("s390x" == target."arch" or null))
                      && (
                        ("arm" == target."arch" or null)
                        || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || ("riscv64" == target."arch" or null)
                        || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                        || ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      )
                    )
                  )
                )
              );
            features = [
              "general"
              "ioctl"
              "no_std"
            ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && (("little" == target."endian" or null) || ("s390x" == target."arch" or null))
                && (
                  ("arm" == target."arch" or null)
                  || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || ("riscv64" == target."arch" or null)
                  || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                  || ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                )
              );
            features = [
              "general"
              "errno"
              "ioctl"
              "no_std"
              "elf"
            ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_NetworkManagement_IpHelper"
              "Win32_System_Threading"
            ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [
            "event"
            "fs"
            "io_uring"
            "mm"
            "mount"
            "net"
            "param"
            "pipe"
            "process"
            "procfs"
            "pty"
            "rand"
            "runtime"
            "shm"
            "stdio"
            "system"
            "termios"
            "thread"
            "time"
          ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "std"
            "use-libc-auxv"
          ];
          "io_uring" = [
            "event"
            "fs"
            "net"
            "linux-raw-sys/io_uring"
          ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc-extra-traits" = [ "libc?/extra_traits" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [
            "linux-raw-sys/net"
            "linux-raw-sys/netlink"
            "linux-raw-sys/if_ether"
            "linux-raw-sys/xdp"
          ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [
            "once_cell"
            "itoa"
            "fs"
          ];
          "pty" = [
            "itoa"
            "fs"
          ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [
            "core"
            "rustc-std-workspace-alloc"
            "compiler_builtins"
            "linux-raw-sys/rustc-dep-of-std"
            "bitflags/rustc-dep-of-std"
            "compiler_builtins?/rustc-dep-of-std"
          ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [
            "bitflags/std"
            "alloc"
            "libc?/std"
            "libc_errno?/std"
            "libc-extra-traits"
          ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [
            "libc_errno"
            "libc"
            "libc-extra-traits"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "event"
          "fs"
          "libc-extra-traits"
          "net"
          "pipe"
          "process"
          "std"
          "time"
          "use-libc-auxv"
        ];
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.23.20";
        edition = "2021";
        sha256 = "06rvj13ia4hx0kba454vcm3p4f2jz907rrabi76k5lyba3rc6rah";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "race"
            ];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "alloc" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [
            "dep:aws-lc-rs"
            "webpki/aws_lc_rs"
          ];
          "brotli" = [
            "dep:brotli"
            "dep:brotli-decompressor"
            "std"
          ];
          "default" = [
            "aws_lc_rs"
            "logging"
            "std"
            "tls12"
          ];
          "fips" = [
            "aws_lc_rs"
            "aws-lc-rs?/fips"
          ];
          "hashbrown" = [ "dep:hashbrown" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [
            "rustversion"
            "std"
          ];
          "ring" = [
            "dep:ring"
            "webpki/ring"
          ];
          "rustversion" = [ "dep:rustversion" ];
          "std" = [
            "webpki/std"
            "pki-types/std"
            "once_cell/std"
          ];
          "zlib" = [ "dep:zlib-rs" ];
        };
        resolvedDefaultFeatures = [
          "log"
          "logging"
          "ring"
          "std"
          "tls12"
        ];
      };
      "rustls-native-certs" = rec {
        crateName = "rustls-native-certs";
        version = "0.8.1";
        edition = "2021";
        sha256 = "1ls7laa3748mkn23fmi3g4mlwk131lx6chq2lyc8v2mmabfz5kvz";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "std" ];
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pemfile" = rec {
        crateName = "rustls-pemfile";
        version = "2.2.0";
        edition = "2018";
        sha256 = "0l3f3mrfkgdjrava7ibwzgwc4h3dljw3pdkbsi9rkwz3zvji9qyw";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "pki-types/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.10.1";
        edition = "2021";
        sha256 = "0dqb3d0cbld1yrp084wyzgw6yk3qzzic8l5pbs1b6bcjzzk4ggyj";
        libName = "rustls_pki_types";
        dependencies = [
          {
            name = "web-time";
            packageId = "web-time";
            optional = true;
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
          "web"
          "web-time"
        ];
      };
      "rustls-webpki" = rec {
        crateName = "rustls-webpki";
        version = "0.102.8";
        edition = "2021";
        sha256 = "1sdy8ks86b7jpabpnb2px2s7f1sq8v0nqf6fnlvwzm4vfk41pjk4";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = [
            "ring?/alloc"
            "pki-types/alloc"
          ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" ];
          "default" = [
            "std"
            "ring"
          ];
          "ring" = [ "dep:ring" ];
          "std" = [
            "alloc"
            "pki-types/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "ring"
          "std"
        ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.19";
        edition = "2018";
        sha256 = "1m39qd65jcd1xgqzdm3017ppimiggh2446xngwp1ngr8hjbmpi7p";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "rustyline" = rec {
        crateName = "rustyline";
        version = "10.1.1";
        edition = "2018";
        sha256 = "1vvsd68cch0lpcg6mcwfvfdd6r4cxbwis3bf9443phzkqcr3rs61";
        authors = [
          "Katsu Kawakami <kkawa1570@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "clipboard-win";
            packageId = "clipboard-win";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "dirs-next";
            packageId = "dirs-next";
            optional = true;
          }
          {
            name = "fd-lock";
            packageId = "fd-lock";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "nix";
            packageId = "nix 0.25.1";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "fs"
              "ioctl"
              "poll"
              "signal"
              "term"
            ];
          }
          {
            name = "radix_trie";
            packageId = "radix_trie";
            optional = true;
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.1.14";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "consoleapi"
              "handleapi"
              "synchapi"
              "minwindef"
              "processenv"
              "std"
              "winbase"
              "wincon"
              "winuser"
            ];
          }
        ];
        features = {
          "case_insensitive_history_search" = [ "regex" ];
          "custom-bindings" = [ "radix_trie" ];
          "default" = [
            "custom-bindings"
            "with-dirs"
          ];
          "dirs-next" = [ "dep:dirs-next" ];
          "radix_trie" = [ "dep:radix_trie" ];
          "regex" = [ "dep:regex" ];
          "signal-hook" = [ "dep:signal-hook" ];
          "skim" = [ "dep:skim" ];
          "with-dirs" = [ "dirs-next" ];
          "with-fuzzy" = [ "skim" ];
        };
        resolvedDefaultFeatures = [
          "custom-bindings"
          "default"
          "dirs-next"
          "radix_trie"
          "with-dirs"
        ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.18";
        edition = "2018";
        sha256 = "17xx2s8j1lln7iackzd9p0sv546vjq71i779gphjq923vjh5pjzk";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.27";
        edition = "2018";
        sha256 = "0gbbhy28v72kd5iina0z2vcdl3vz63mk5idvkzn5r52z6jmfna8z";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [
              "Win32_Foundation"
              "Win32_Security_Cryptography"
              "Win32_Security_Authentication_Identity"
              "Win32_Security_Credentials"
              "Win32_System_LibraryLoader"
              "Win32_System_Memory"
              "Win32_System_SystemInformation"
            ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [
              "Win32_System_SystemInformation"
              "Win32_System_Time"
            ];
          }
        ];

      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.1";
        edition = "2015";
        sha256 = "15524h04mafihcvfpgxd8f4bgc3k95aclz8grjkg9a0rxcvn9kz1";
        libName = "scoped_tls";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_std"
        ];
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "3.1.0";
        edition = "2021";
        sha256 = "1g1wq04rb6gsyfawphv5vhmmicbm5l25gsvr05mvng6cpz4zilw1";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_12" = [ "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [
            "OSX_10_12"
            "security-framework-sys/OSX_10_13"
            "alpn"
            "session-tickets"
          ];
          "OSX_10_14" = [
            "OSX_10_13"
            "security-framework-sys/OSX_10_14"
          ];
          "OSX_10_15" = [
            "OSX_10_14"
            "security-framework-sys/OSX_10_15"
          ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
        };
        resolvedDefaultFeatures = [
          "OSX_10_12"
          "default"
        ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.13.0";
        edition = "2021";
        sha256 = "1mbhagj98y2byhjkr353y1nings01pfa9yk0gxmcb0ydd0vzsqqq";
        libName = "security_framework_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_12" ];
        };
        resolvedDefaultFeatures = [
          "OSX_10_10"
          "OSX_10_11"
          "OSX_10_12"
          "OSX_10_9"
        ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.24";
        edition = "2018";
        sha256 = "1fmvjjkd3f64y5fqr1nakkq371mnwzv09fbz5mbmdxril63ypdiw";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.217";
        edition = "2018";
        sha256 = "0w2ck1p1ajmrv1cf51qf7igjn2nc51r0izzc00fzmmhkvxjl5z02";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "derive"
          "rc"
          "serde_derive"
          "std"
        ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.217";
        edition = "2015";
        sha256 = "180r3rj5gi5s1m23q66cr5wlfgc5jrs6n1mdmql2njnhk37zg6ss";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "clone-impls"
              "derive"
              "parsing"
              "printing"
              "proc-macro"
            ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.134";
        edition = "2021";
        sha256 = "0z8wk61rzpqjmnwhv6k9zikhsfmsb6lr6qbg84aqpr1fqisl23yh";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [
            "indexmap"
            "std"
          ];
          "std" = [
            "memchr/std"
            "serde/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "raw_value"
          "std"
        ];
      };
      "serde_path_to_error" = rec {
        crateName = "serde_path_to_error";
        version = "0.1.16";
        edition = "2021";
        sha256 = "19hlz2359l37ifirskpcds7sxg0gzpqvfilibs7whdys0128i6dg";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_qs" = rec {
        crateName = "serde_qs";
        version = "0.12.0";
        edition = "2018";
        sha256 = "031kgpxbqkkxnql0k7sd80lyp98x7jc92311chrkc7k5d1as6c84";
        authors = [
          "Sam Scott <sam@osohq.com>"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "actix-web2" = [ "dep:actix-web2" ];
          "actix-web3" = [ "dep:actix-web3" ];
          "actix-web4" = [ "dep:actix-web4" ];
          "actix2" = [
            "actix-web2"
            "futures"
          ];
          "actix3" = [
            "actix-web3"
            "futures"
          ];
          "actix4" = [
            "actix-web4"
            "futures"
          ];
          "axum" = [
            "axum-framework"
            "futures"
          ];
          "axum-framework" = [ "dep:axum-framework" ];
          "futures" = [ "dep:futures" ];
          "tracing" = [ "dep:tracing" ];
          "warp" = [
            "futures"
            "tracing"
            "warp-framework"
          ];
          "warp-framework" = [ "dep:warp-framework" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.8";
        edition = "2021";
        sha256 = "1q89g70azwi4ybilz5jb8prfpa575165lmrffd49vmcf76qpqq47";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "serde_tagged" = rec {
        crateName = "serde_tagged";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1scr98aw9d9hf9bf0gr5fcmhkwsz0fpy2wr2zi5r4cnfya6j9kbn";
        authors = [
          "qzed <qzed@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "erased-serde";
            packageId = "erased-serde";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "default" = [ "erased" ];
          "erased" = [ "erased-serde" ];
          "erased-serde" = [ "dep:erased-serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "erased"
          "erased-serde"
        ];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "3.12.0";
        edition = "2021";
        sha256 = "1ai9c3cbdgrsvmlc4qpg9z73y80yplk3k7zp45wp97xnzkrggdnn";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
            rename = "chrono_0_4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            rename = "indexmap_1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde-1" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.7.0";
            rename = "indexmap_2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            rename = "time_0_3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
        ];
        features = {
          "alloc" = [
            "serde/alloc"
            "base64?/alloc"
            "chrono_0_4?/alloc"
            "hex?/alloc"
            "serde_json?/alloc"
            "time_0_3?/alloc"
          ];
          "base64" = [
            "dep:base64"
            "alloc"
          ];
          "chrono" = [ "chrono_0_4" ];
          "chrono_0_4" = [ "dep:chrono_0_4" ];
          "default" = [
            "std"
            "macros"
          ];
          "guide" = [
            "dep:doc-comment"
            "dep:document-features"
            "macros"
            "std"
          ];
          "hashbrown_0_14" = [
            "dep:hashbrown_0_14"
            "alloc"
          ];
          "hashbrown_0_15" = [
            "dep:hashbrown_0_15"
            "alloc"
          ];
          "hex" = [
            "dep:hex"
            "alloc"
          ];
          "indexmap" = [ "indexmap_1" ];
          "indexmap_1" = [
            "dep:indexmap_1"
            "alloc"
          ];
          "indexmap_2" = [
            "dep:indexmap_2"
            "alloc"
          ];
          "json" = [
            "dep:serde_json"
            "alloc"
          ];
          "macros" = [ "dep:serde_with_macros" ];
          "schemars_0_8" = [
            "dep:schemars_0_8"
            "std"
            "serde_with_macros?/schemars_0_8"
          ];
          "std" = [
            "alloc"
            "serde/std"
            "chrono_0_4?/clock"
            "chrono_0_4?/std"
            "indexmap_1?/std"
            "indexmap_2?/std"
            "time_0_3?/serde-well-known"
            "time_0_3?/std"
          ];
          "time_0_3" = [ "dep:time_0_3" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "base64"
          "default"
          "macros"
          "std"
        ];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "3.12.0";
        edition = "2021";
        sha256 = "13hznly0qq1rngsdh8gpnajab2knkrmvwwrbmii86g1s36jwl04d";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "extra-traits"
              "full"
              "parsing"
            ];
          }
        ];
        features = {
        };
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                || ("x86" == target."arch" or null)
                || ("x86_64" == target."arch" or null)
              );
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        sha256 = "1j1x78zk9il95w9iv46dh9wm73r6xrgj32y6lzzw7bxws9dbfgbr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                || ("x86_64" == target."arch" or null)
                || ("x86" == target."arch" or null)
              );
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1cb5akgq8ajnd5spyn587srvs4n26ryq0p78nswffwhv46sf1sd9";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "signature" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "dep:derive" ];
          "digest" = [ "dep:digest" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [
            "alloc"
            "rand_core?/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.13.2";
        edition = "2018";
        sha256 = "0rsw5samawl3wsw6glrsb127rx6sh89a8wyikicw6dkdcjd1lpiw";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "const_generics"
          "const_new"
        ];
      };
      "smol_str" = rec {
        crateName = "smol_str";
        version = "0.2.2";
        edition = "2018";
        sha256 = "1bfylqf2vnqaglw58930vpxm2rfzji5gjp15a2c0kh8aj6v8ylyx";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde?/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "snafu" = rec {
        crateName = "snafu";
        version = "0.7.5";
        edition = "2018";
        sha256 = "1mj2j2gfbf8mm1hr02zrbrqrh2zp01f61xgkx0lpln2w0ankgpp4";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "doc-comment";
            packageId = "doc-comment";
            usesDefaultFeatures = false;
          }
          {
            name = "snafu-derive";
            packageId = "snafu-derive";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtraces" = [
            "std"
            "backtrace"
          ];
          "backtraces-impl-backtrace-crate" = [ "backtraces" ];
          "default" = [
            "std"
            "rust_1_46"
          ];
          "futures" = [
            "futures-core-crate"
            "pin-project"
          ];
          "futures-core-crate" = [ "dep:futures-core-crate" ];
          "futures-crate" = [ "dep:futures-crate" ];
          "internal-dev-dependencies" = [ "futures-crate" ];
          "pin-project" = [ "dep:pin-project" ];
          "rust_1_39" = [ "snafu-derive/rust_1_39" ];
          "rust_1_46" = [
            "rust_1_39"
            "snafu-derive/rust_1_46"
          ];
          "rust_1_61" = [
            "rust_1_46"
            "snafu-derive/rust_1_61"
          ];
          "unstable-backtraces-impl-std" = [
            "backtraces-impl-std"
            "snafu-derive/unstable-backtraces-impl-std"
          ];
          "unstable-provider-api" = [ "snafu-derive/unstable-provider-api" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "rust_1_39"
          "rust_1_46"
          "std"
        ];
      };
      "snafu-derive" = rec {
        crateName = "snafu-derive";
        version = "0.7.5";
        edition = "2018";
        sha256 = "1gzy9rzggs090zf7hfvgp4lm1glrmg9qzh796686jnq7bxk7j04r";
        procMacro = true;
        libName = "snafu_derive";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [
          "rust_1_39"
          "rust_1_46"
        ];
      };
      "snix-build" = rec {
        crateName = "snix-build";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "snix-build";
            path = "src/bin/snix-build.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./build;
        };
        libName = "snix_build";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "bstr";
            packageId = "bstr";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [
              "derive"
              "env"
            ];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "nix";
            packageId = "nix 0.29.0";
            features = [ "user" ];
          }
          {
            name = "oci-spec";
            packageId = "oci-spec";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "snix-castore";
            packageId = "snix-castore";
            features = [ "fuse" ];
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "process" ];
          }
          {
            name = "tokio-listener";
            packageId = "tokio-listener";
            features = [ "tonic012" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [
              "tls"
              "tls-roots"
            ];
          }
          {
            name = "tonic-reflection";
            packageId = "tonic-reflection";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = [ "v4" ];
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "tonic-build";
            packageId = "tonic-build";
          }
        ];
        devDependencies = [
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "tonic-reflection" = [
            "dep:tonic-reflection"
            "snix-castore/tonic-reflection"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "tonic-reflection"
        ];
      };
      "snix-castore" = rec {
        crateName = "snix-castore";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "snix-castore";
            path = "src/bin/snix-castore.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./castore;
        };
        libName = "snix_castore";
        dependencies = [
          {
            name = "async-compression";
            packageId = "async-compression";
            features = [
              "tokio"
              "zstd"
            ];
          }
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "bigtable_rs";
            packageId = "bigtable_rs";
            optional = true;
          }
          {
            name = "blake3";
            packageId = "blake3";
            features = [
              "rayon"
              "std"
              "traits-preview"
            ];
          }
          {
            name = "bstr";
            packageId = "bstr";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [
              "derive"
              "env"
            ];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "erased-serde";
            packageId = "erased-serde";
          }
          {
            name = "fastcdc";
            packageId = "fastcdc";
            features = [ "tokio" ];
          }
          {
            name = "fuse-backend-rs";
            packageId = "fuse-backend-rs";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "object_store";
            packageId = "object_store";
            features = [ "http" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "redb";
            packageId = "redb";
            features = [ "logging" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_qs";
            packageId = "serde_qs";
          }
          {
            name = "serde_tagged";
            packageId = "serde_tagged";
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
            features = [ "tonic" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "threadpool";
            packageId = "threadpool";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "macros"
              "net"
              "rt"
              "rt-multi-thread"
              "signal"
            ];
          }
          {
            name = "tokio-listener";
            packageId = "tokio-listener";
            features = [
              "clap"
              "multi-listener"
              "sd_listen"
              "tonic012"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [
              "fs"
              "net"
            ];
          }
          {
            name = "tokio-tar";
            packageId = "tokio-tar";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [
              "io"
              "io-util"
              "codec"
            ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.19";
            optional = true;
          }
          {
            name = "tonic";
            packageId = "tonic";
          }
          {
            name = "tonic-health";
            packageId = "tonic-health";
            usesDefaultFeatures = false;
          }
          {
            name = "tonic-reflection";
            packageId = "tonic-reflection";
            optional = true;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "trace" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-indicatif";
            packageId = "tracing-indicatif";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "vhost";
            packageId = "vhost";
            optional = true;
          }
          {
            name = "vhost-user-backend";
            packageId = "vhost-user-backend";
            optional = true;
          }
          {
            name = "virtio-bindings";
            packageId = "virtio-bindings 0.2.4";
            optional = true;
          }
          {
            name = "virtio-queue";
            packageId = "virtio-queue";
            optional = true;
          }
          {
            name = "vm-memory";
            packageId = "vm-memory";
            optional = true;
          }
          {
            name = "vmm-sys-util";
            packageId = "vmm-sys-util";
            optional = true;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "wu-manber";
            packageId = "wu-manber";
          }
          {
            name = "zstd";
            packageId = "zstd";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "tonic-build";
            packageId = "tonic-build";
          }
        ];
        devDependencies = [
          {
            name = "async-process";
            packageId = "async-process";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "rstest_reuse";
            packageId = "rstest_reuse";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio-retry";
            packageId = "tokio-retry";
          }
          {
            name = "tokio-test";
            packageId = "tokio-test";
          }
          {
            name = "xattr";
            packageId = "xattr";
          }
        ];
        features = {
          "cloud" = [
            "dep:bigtable_rs"
            "object_store/aws"
            "object_store/azure"
            "object_store/gcp"
          ];
          "default" = [ "cloud" ];
          "fs" = [
            "dep:fuse-backend-rs"
            "dep:threadpool"
            "dep:libc"
          ];
          "fuse" = [ "fs" ];
          "toml" = [ "dep:toml" ];
          "tonic-reflection" = [ "dep:tonic-reflection" ];
          "virtiofs" = [
            "fs"
            "dep:vhost"
            "dep:vhost-user-backend"
            "dep:virtio-queue"
            "dep:vm-memory"
            "dep:vmm-sys-util"
            "dep:virtio-bindings"
            "fuse-backend-rs?/vhost-user-fs"
            "fuse-backend-rs?/virtiofs"
          ];
          "xp-composition-cli" = [
            "toml"
            "xp-composition-url-refs"
          ];
        };
        resolvedDefaultFeatures = [
          "cloud"
          "default"
          "fs"
          "fuse"
          "integration"
          "toml"
          "tonic-reflection"
          "virtiofs"
          "xp-composition-cli"
          "xp-composition-url-refs"
        ];
      };
      "snix-castore-http" = rec {
        crateName = "snix-castore-http";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "snix-castore-http";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./castore-http;
        };
        libName = "snix_castore_http";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "axum";
            packageId = "axum";
            features = [ "tracing" ];
          }
          {
            name = "axum-extra";
            packageId = "axum-extra";
          }
          {
            name = "axum-range";
            packageId = "axum-range";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
          }
          {
            name = "path-clean";
            packageId = "path-clean";
          }
          {
            name = "snix-castore";
            packageId = "snix-castore";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "tracing" ];
          }
          {
            name = "tokio-listener";
            packageId = "tokio-listener";
            features = [
              "axum07"
              "clap"
              "multi-listener"
              "sd_listen"
            ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        devDependencies = [
          {
            name = "axum-test";
            packageId = "axum-test";
          }
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "tracing-test";
            packageId = "tracing-test";
          }
        ];

      };
      "snix-cli" = rec {
        crateName = "snix-cli";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "snix";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./cli;
        };
        libName = "snix_cli";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [
              "derive"
              "env"
            ];
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "rnix";
            packageId = "rnix";
          }
          {
            name = "rowan";
            packageId = "rowan";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.0";
          }
          {
            name = "rustyline";
            packageId = "rustyline";
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "snix-build";
            packageId = "snix-build";
          }
          {
            name = "snix-eval";
            packageId = "snix-eval";
          }
          {
            name = "snix-glue";
            packageId = "snix-glue";
          }
          {
            name = "snix-store";
            packageId = "snix-store";
            usesDefaultFeatures = false;
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-indicatif";
            packageId = "tracing-indicatif";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wu-manber";
            packageId = "wu-manber";
          }
        ];
        devDependencies = [
          {
            name = "expect-test";
            packageId = "expect-test";
          }
        ];
        features = {
          "tracy" = [ "snix-tracing/tracy" ];
          "xp-store-composition-cli" = [ "snix-store/xp-composition-cli" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "tracy"
          "xp-store-composition-cli"
        ];
      };
      "snix-eval" = rec {
        crateName = "snix-eval";
        version = "0.1.0";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./eval;
        };
        libName = "snix_eval";
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            features = [ "serde" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "codemap";
            packageId = "codemap";
          }
          {
            name = "codemap-diagnostic";
            packageId = "codemap-diagnostic";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "genawaiter";
            packageId = "genawaiter";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "lexical-core";
            packageId = "lexical-core";
            features = [
              "format"
              "parse-floats"
            ];
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "os_str_bytes";
            packageId = "os_str_bytes";
            features = [ "conversions" ];
          }
          {
            name = "path-clean";
            packageId = "path-clean";
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "std"
              "alloc"
              "tempfile"
            ];
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rnix";
            packageId = "rnix";
          }
          {
            name = "rowan";
            packageId = "rowan";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.0";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [
              "rc"
              "derive"
            ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "snix-eval-builtin-macros";
            packageId = "snix-eval-builtin-macros";
            rename = "builtin-macros";
          }
          {
            name = "tabwriter";
            packageId = "tabwriter";
          }
          {
            name = "test-strategy";
            packageId = "test-strategy";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "toml";
            packageId = "toml 0.6.0";
          }
          {
            name = "vu128";
            packageId = "vu128";
          }
        ];
        devDependencies = [
          {
            name = "criterion";
            packageId = "criterion";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
            features = [ "unstable" ];
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "arbitrary" = [
            "proptest"
            "test-strategy"
          ];
          "default" = [
            "impure"
            "arbitrary"
            "nix_tests"
          ];
          "proptest" = [ "dep:proptest" ];
          "test-strategy" = [ "dep:test-strategy" ];
        };
        resolvedDefaultFeatures = [
          "arbitrary"
          "default"
          "impure"
          "nix_tests"
          "no_leak"
          "proptest"
          "test-strategy"
        ];
      };
      "snix-eval-builtin-macros" = rec {
        crateName = "snix-eval-builtin-macros";
        version = "0.0.1";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./eval/builtin-macros;
        };
        procMacro = true;
        libName = "snix_eval_builtin_macros";
        authors = [
          "Griffin Smith <root@gws.fyi>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "full"
              "parsing"
              "printing"
              "visit"
              "visit-mut"
              "extra-traits"
            ];
          }
        ];
        devDependencies = [
          {
            name = "snix-eval";
            packageId = "snix-eval";
          }
        ];

      };
      "snix-glue" = rec {
        crateName = "snix-glue";
        version = "0.1.0";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./glue;
        };
        libName = "snix_glue";
        dependencies = [
          {
            name = "async-compression";
            packageId = "async-compression";
            features = [
              "tokio"
              "gzip"
              "bzip2"
              "xz"
            ];
          }
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "bstr";
            packageId = "bstr";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "nix-compat";
            packageId = "nix-compat";
            features = [ "flakeref" ];
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = [ "rustls-tls-native-roots" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "snix-build";
            packageId = "snix-build";
            usesDefaultFeatures = false;
          }
          {
            name = "snix-castore";
            packageId = "snix-castore";
          }
          {
            name = "snix-eval";
            packageId = "snix-eval";
          }
          {
            name = "snix-store";
            packageId = "snix-store";
            usesDefaultFeatures = false;
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-tar";
            packageId = "tokio-tar";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [
              "io"
              "io-util"
              "compat"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-indicatif";
            packageId = "tracing-indicatif";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        devDependencies = [
          {
            name = "criterion";
            packageId = "criterion";
            features = [ "html_reports" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "nix";
            packageId = "nix 0.27.1";
            features = [ "fs" ];
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "default" = [ "nix_tests" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "nix_tests"
        ];
      };
      "snix-serde" = rec {
        crateName = "snix-serde";
        version = "0.1.0";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./serde;
        };
        libName = "snix_serde";
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "snix-eval";
            packageId = "snix-eval";
          }
        ];

      };
      "snix-store" = rec {
        crateName = "snix-store";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "snix-store";
            path = "src/bin/snix-store.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./store;
        };
        libName = "snix_store";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-compression";
            packageId = "async-compression";
            features = [
              "tokio"
              "bzip2"
              "gzip"
              "xz"
              "zstd"
            ];
          }
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "bigtable_rs";
            packageId = "bigtable_rs";
            optional = true;
          }
          {
            name = "blake3";
            packageId = "blake3";
            features = [
              "rayon"
              "std"
            ];
          }
          {
            name = "bstr";
            packageId = "bstr";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [
              "derive"
              "env"
            ];
          }
          {
            name = "count-write";
            packageId = "count-write";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "ed25519";
            packageId = "ed25519";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
          }
          {
            name = "lru";
            packageId = "lru";
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "mimalloc";
            packageId = "mimalloc";
          }
          {
            name = "nix-compat";
            packageId = "nix-compat";
            features = [
              "async"
              "serde"
            ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "redb";
            packageId = "redb";
            features = [ "logging" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = [
              "rustls-tls-native-roots"
              "stream"
            ];
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_qs";
            packageId = "serde_qs";
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "snix-castore";
            packageId = "snix-castore";
          }
          {
            name = "snix-tracing";
            packageId = "snix-tracing";
            features = [
              "tonic"
              "reqwest"
            ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "macros"
              "net"
              "rt"
              "rt-multi-thread"
              "signal"
            ];
          }
          {
            name = "tokio-listener";
            packageId = "tokio-listener";
            features = [
              "clap"
              "multi-listener"
              "sd_listen"
              "tonic012"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "fs" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [
              "io"
              "io-util"
              "compat"
            ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.19";
            optional = true;
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [
              "tls"
              "tls-roots"
            ];
          }
          {
            name = "tonic-health";
            packageId = "tonic-health";
            usesDefaultFeatures = false;
          }
          {
            name = "tonic-reflection";
            packageId = "tonic-reflection";
            optional = true;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "trace" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-indicatif";
            packageId = "tracing-indicatif";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
          {
            name = "tonic-build";
            packageId = "tonic-build";
          }
        ];
        devDependencies = [
          {
            name = "async-process";
            packageId = "async-process";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "rstest";
            packageId = "rstest";
            usesDefaultFeatures = false;
          }
          {
            name = "rstest_reuse";
            packageId = "rstest_reuse";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio-retry";
            packageId = "tokio-retry";
          }
        ];
        features = {
          "cloud" = [
            "dep:bigtable_rs"
            "snix-castore/cloud"
          ];
          "default" = [
            "cloud"
            "fuse"
            "otlp"
            "tonic-reflection"
          ];
          "fuse" = [ "snix-castore/fuse" ];
          "otlp" = [ "snix-tracing/otlp" ];
          "toml" = [ "dep:toml" ];
          "tonic-reflection" = [
            "dep:tonic-reflection"
            "snix-castore/tonic-reflection"
          ];
          "tracy" = [ "snix-tracing/tracy" ];
          "virtiofs" = [ "snix-castore/virtiofs" ];
          "xp-composition-cli" = [
            "toml"
            "snix-castore/xp-composition-url-refs"
          ];
        };
        resolvedDefaultFeatures = [
          "cloud"
          "default"
          "fuse"
          "integration"
          "otlp"
          "toml"
          "tonic-reflection"
          "tracy"
          "virtiofs"
          "xp-composition-cli"
        ];
      };
      "snix-tracing" = rec {
        crateName = "snix-tracing";
        version = "0.1.0";
        edition = "2024";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./tracing;
        };
        libName = "snix_tracing";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
            optional = true;
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            optional = true;
          }
          {
            name = "opentelemetry-http";
            packageId = "opentelemetry-http";
            optional = true;
          }
          {
            name = "opentelemetry-otlp";
            packageId = "opentelemetry-otlp";
            optional = true;
            features = [ "grpc-tonic" ];
          }
          {
            name = "opentelemetry-semantic-conventions";
            packageId = "opentelemetry-semantic-conventions";
            optional = true;
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            optional = true;
            features = [ "rt-tokio" ];
          }
          {
            name = "reqwest-tracing";
            packageId = "reqwest-tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.9";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "sync"
              "rt"
            ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [
              "max_level_trace"
              "release_max_level_debug"
            ];
          }
          {
            name = "tracing-indicatif";
            packageId = "tracing-indicatif";
          }
          {
            name = "tracing-opentelemetry";
            packageId = "tracing-opentelemetry";
            optional = true;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
          {
            name = "tracing-tracy";
            packageId = "tracing-tracy";
            optional = true;
            features = [ "flush-on-exit" ];
          }
        ];
        features = {
          "axum" = [ "dep:axum" ];
          "otlp" = [
            "dep:tracing-opentelemetry"
            "dep:opentelemetry"
            "dep:opentelemetry-otlp"
            "dep:opentelemetry_sdk"
            "dep:opentelemetry-http"
            "dep:opentelemetry-semantic-conventions"
            "reqwest-tracing?/opentelemetry_0_28"
          ];
          "reqwest" = [ "dep:reqwest-tracing" ];
          "tonic" = [
            "dep:tonic"
            "dep:http"
          ];
          "tracy" = [ "dep:tracing-tracy" ];
        };
        resolvedDefaultFeatures = [
          "axum"
          "default"
          "otlp"
          "reqwest"
          "tonic"
          "tracy"
        ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.8";
        edition = "2021";
        sha256 = "1s7vjmb5gzp3iaqi94rh9r63k9cj00kjgbfn7gn60kmnk6fjcw69";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_System_IO"
              "Win32_System_Threading"
              "Win32_System_WindowsProgramming"
            ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [
            "lock_api"
            "mutex"
            "spin_mutex"
            "rwlock"
            "once"
            "lazy"
            "barrier"
          ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [
            "mutex"
            "ticket_mutex"
          ];
        };
        resolvedDefaultFeatures = [
          "mutex"
          "spin_mutex"
        ];
      };
      "spki" = rec {
        crateName = "spki";
        version = "0.7.3";
        edition = "2021";
        sha256 = "17fj8k5fmx4w9mp27l970clrh5qa7r5sjdvbsln987xhb34dc7nr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
        ];
        features = {
          "alloc" = [
            "base64ct?/alloc"
            "der/alloc"
          ];
          "arbitrary" = [
            "std"
            "dep:arbitrary"
            "der/arbitrary"
          ];
          "base64" = [ "dep:base64ct" ];
          "fingerprint" = [ "sha2" ];
          "pem" = [
            "alloc"
            "der/pem"
          ];
          "sha2" = [ "dep:sha2" ];
          "std" = [
            "der/std"
            "alloc"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "str-buf" = rec {
        crateName = "str-buf";
        version = "1.0.6";
        edition = "2018";
        sha256 = "1l7q4nha7wpsr0970bfqm773vhmpwr9l6rr8r4gwgrh46wvdh24y";
        libName = "str_buf";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "structmeta" = rec {
        crateName = "structmeta";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0alyl12b7fab8izrpliil73sxs1ivr5vm0pisallmxlb4zb44j0h";
        authors = [
          "frozenlib"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "structmeta-derive";
            packageId = "structmeta-derive";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "extra-traits"
              "full"
            ];
          }
        ];

      };
      "structmeta-derive" = rec {
        crateName = "structmeta-derive";
        version = "0.1.6";
        edition = "2021";
        sha256 = "14vxik2m3dm7bwx016qfz062fwznkbq02fyq8vby545m0pj0nhi4";
        procMacro = true;
        libName = "structmeta_derive";
        authors = [
          "frozenlib"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" ];
          }
        ];

      };
      "strum" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "strum_macros" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "parsing"
              "extra-traits"
            ];
          }
        ];

      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [
            "std"
            "i128"
          ];
        };
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [
            "derive"
            "parsing"
            "printing"
            "clone-impls"
            "proc-macro"
          ];
          "printing" = [ "quote" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "quote/proc-macro"
          ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [
          "clone-impls"
          "default"
          "derive"
          "extra-traits"
          "full"
          "parsing"
          "printing"
          "proc-macro"
          "quote"
          "visit"
          "visit-mut"
        ];
      };
      "syn 2.0.93" = rec {
        crateName = "syn";
        version = "2.0.93";
        edition = "2021";
        sha256 = "0n6hk0yipq1q6cc8wb9jhw54l9vlvwiyc0182fqns3gfv9i60y4w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [
            "derive"
            "parsing"
            "printing"
            "clone-impls"
            "proc-macro"
          ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "quote?/proc-macro"
          ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [
          "clone-impls"
          "default"
          "derive"
          "extra-traits"
          "fold"
          "full"
          "parsing"
          "printing"
          "proc-macro"
          "visit"
          "visit-mut"
        ];
      };
      "sync_wrapper" = rec {
        crateName = "sync_wrapper";
        version = "1.0.2";
        edition = "2021";
        sha256 = "0qvjyasd6w18mjg5xlaq5jgy84jsjfsvmnn12c13gypxbv75dwhb";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [
          "futures"
          "futures-core"
        ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.1";
        edition = "2018";
        sha256 = "0wc9f002ia2zqcbj0q2id5x6n7g1zjqba7qkg2mr0qvvmdk7dby8";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "derive"
              "parsing"
              "printing"
              "clone-impls"
              "visit"
              "extra-traits"
            ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "syn/proc-macro"
            "quote/proc-macro"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "tabwriter" = rec {
        crateName = "tabwriter";
        version = "1.4.0";
        edition = "2021";
        sha256 = "1xp5j7v8jsk92zcmiyh4ya9akhrchjvc595vwcvxrxk49wn2h9x3";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width 0.1.14";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "target-triple" = rec {
        crateName = "target-triple";
        version = "0.1.3";
        edition = "2021";
        sha256 = "0y1hq4v4k1706rr3rdmw92as4kchchdxj7qkr2plb025vc6db922";
        libName = "target_triple";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.14.0";
        edition = "2021";
        sha256 = "037f9jm13bmfc6xq9w86dp0nylrddh6ynvl6db4gm1xwzi8y5k18";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Storage_FileSystem"
              "Win32_Foundation"
            ];
          }
        ];
        features = {
        };
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "termtree" = rec {
        crateName = "termtree";
        version = "0.5.1";
        edition = "2021";
        sha256 = "10s610ax6nb70yi7xfmwcb6d3wi9sj5isd0m63gy2pizr2zgwl4g";

      };
      "test-strategy" = rec {
        crateName = "test-strategy";
        version = "0.2.1";
        edition = "2021";
        sha256 = "105lxqs0vnqff5821sgns8q1scvrwfx1yw6iz7i7nr862j6l1mk2";
        procMacro = true;
        libName = "test_strategy";
        authors = [
          "frozenlib"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "structmeta";
            packageId = "structmeta";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "visit"
              "full"
            ];
          }
        ];

      };
      "text-size" = rec {
        crateName = "text-size";
        version = "1.1.1";
        edition = "2018";
        sha256 = "0cwjbkl7w3xc8mnkhg1nwij6p5y2qkcfldgss8ddnawvhf3s32pi";
        libName = "text_size";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
          "Christopher Durham (CAD97) <cad97@cad97.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];

      };
      "thiserror 2.0.9" = rec {
        crateName = "thiserror";
        version = "2.0.9";
        edition = "2021";
        sha256 = "1k5j0ri0kjrnlblv5ikaglbkg1sxxwh0qrxbidxgc38rs0zn8wph";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.9";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];

      };
      "thiserror-impl 2.0.9" = rec {
        crateName = "thiserror-impl";
        version = "2.0.9";
        edition = "2021";
        sha256 = "1m77z5vb4w7xn7y12zxnbwncva4bwbi45y45xvkf5aki20kzll3v";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.1";
        edition = "2015";
        sha256 = "1amgfyzvynbm8pacniivzq9r0fh3chhs7kijic81j76l6c5ycl6h";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "time" = rec {
        crateName = "time";
        version = "0.3.37";
        edition = "2021";
        sha256 = "08bvydyc14plkwhchzia5bcdbmm0mk5fzilsdpjx06w6hf48drrm";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [
            "dep:itoa"
            "std"
            "time-macros?/formatting"
          ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [
            "std"
            "dep:libc"
            "dep:num_threads"
          ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [
            "dep:quickcheck"
            "alloc"
            "deranged/quickcheck"
          ];
          "rand" = [
            "dep:rand"
            "deranged/rand"
          ];
          "serde" = [
            "dep:serde"
            "time-macros?/serde"
            "deranged/serde"
          ];
          "serde-human-readable" = [
            "serde"
            "formatting"
            "parsing"
          ];
          "serde-well-known" = [
            "serde"
            "formatting"
            "parsing"
          ];
          "std" = [
            "alloc"
            "deranged/std"
          ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "formatting"
          "macros"
          "parsing"
          "serde"
          "serde-well-known"
          "std"
        ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1wx3qizcihw6z151hywfzzyd1y5dl804ydyxci6qm07vbakpr4pg";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.19";
        edition = "2021";
        sha256 = "1pl558z26pp342l5y91n6dxb60xwhar975wk6jc4npiygq0ycd18";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [
          "formatting"
          "parsing"
          "serde"
        ];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.7.6";
        edition = "2021";
        sha256 = "0bxqaw7z8r2kzngxlzlgvld1r6jbnwyylyvyjbv1q71rvgaga5wi";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "zerovec"
        ];
      };
      "tinytemplate" = rec {
        crateName = "tinytemplate";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1g5n77cqkdh9hy75zdb01adxn45mkh9y40wdr7l68xpz35gnnkdy";
        authors = [
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.8.1";
        edition = "2018";
        sha256 = "1s41rv7n39sjsxz3kd3d4adw45ndkxz1d18rfbz2wd7s9n8bhb82";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "rustc_1_61" = [ "rustc_1_57" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "tinyvec_macros"
        ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.42.0";
        edition = "2021";
        sha256 = "0lbmf21h16iibdy7m63ck66grkwa7b1x8yy9gwvp60j5n0hrpv2w";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 1.0.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tokio_unstable" or false);
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Security_Authorization"
            ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [
            "fs"
            "io-util"
            "io-std"
            "macros"
            "net"
            "parking_lot"
            "process"
            "rt"
            "rt-multi-thread"
            "signal"
            "sync"
            "time"
          ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [
            "libc"
            "mio/os-poll"
            "mio/os-ext"
            "mio/net"
            "socket2"
            "windows-sys/Win32_Foundation"
            "windows-sys/Win32_Security"
            "windows-sys/Win32_Storage_FileSystem"
            "windows-sys/Win32_System_Pipes"
            "windows-sys/Win32_System_SystemServices"
          ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [
            "bytes"
            "libc"
            "mio/os-poll"
            "mio/os-ext"
            "mio/net"
            "signal-hook-registry"
            "windows-sys/Win32_Foundation"
            "windows-sys/Win32_System_Threading"
            "windows-sys/Win32_System_WindowsProgramming"
          ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [
            "libc"
            "mio/os-poll"
            "mio/net"
            "mio/os-ext"
            "signal-hook-registry"
            "windows-sys/Win32_Foundation"
            "windows-sys/Win32_System_Console"
          ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [
            "rt"
            "sync"
            "time"
          ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [
          "bytes"
          "default"
          "fs"
          "io-std"
          "io-util"
          "libc"
          "macros"
          "mio"
          "net"
          "process"
          "rt"
          "rt-multi-thread"
          "signal"
          "signal-hook-registry"
          "socket2"
          "sync"
          "test-util"
          "time"
          "tokio-macros"
          "tracing"
          "windows-sys"
        ];
      };
      "tokio-listener" = rec {
        crateName = "tokio-listener";
        version = "0.4.3";
        edition = "2021";
        sha256 = "0iigg0w7n4r3ggcz0lj0vb2smq93dlwrqr06r1di54ij2afl6jli";
        libName = "tokio_listener";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            rename = "axum07";
            optional = true;
          }
          {
            name = "clap";
            packageId = "clap";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "derive"
              "std"
            ];
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
          }
          {
            name = "hyper";
            packageId = "hyper";
            rename = "hyper1";
            optional = true;
            features = [ "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [
              "server"
              "server-auto"
            ];
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "user"
              "fs"
            ];
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "net"
              "io-std"
              "time"
              "sync"
            ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            features = [
              "net"
              "codec"
            ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            rename = "tonic_012";
            optional = true;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
            features = [ "util" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "help" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "macros"
              "rt"
              "io-util"
            ];
          }
        ];
        features = {
          "axum07" = [
            "dep:hyper1"
            "dep:hyper-util"
            "dep:futures-util"
            "dep:tower-service"
            "dep:tower"
            "dep:axum07"
          ];
          "clap" = [ "dep:clap" ];
          "default" = [
            "user_facing_default"
            "tokio-util"
          ];
          "hyper014" = [ "dep:hyper014" ];
          "inetd" = [ "dep:futures-util" ];
          "multi-listener" = [ "dep:futures-util" ];
          "nix" = [ "dep:nix" ];
          "sd_listen" = [ "socket2" ];
          "serde" = [
            "dep:serde"
            "serde_with"
          ];
          "serde_with" = [ "dep:serde_with" ];
          "socket2" = [ "dep:socket2" ];
          "socket_options" = [ "socket2" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tonic010" = [ "dep:tonic_010" ];
          "tonic011" = [ "dep:tonic_011" ];
          "tonic012" = [ "dep:tonic_012" ];
          "unix_path_tools" = [ "nix" ];
          "user_facing_default" = [
            "inetd"
            "unix"
            "unix_path_tools"
            "sd_listen"
            "socket_options"
          ];
        };
        resolvedDefaultFeatures = [
          "axum07"
          "clap"
          "default"
          "inetd"
          "multi-listener"
          "nix"
          "sd_listen"
          "socket2"
          "socket_options"
          "tokio-util"
          "tonic012"
          "unix"
          "unix_path_tools"
          "user_facing_default"
        ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0lnpg14h1v3fh2jvnc8cz7cjf0m7z1xgkwfpcyy632g829imjgb9";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];

      };
      "tokio-retry" = rec {
        crateName = "tokio-retry";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0kr1hnm5dmb9gfkby88yg2xj8g6x4i4gipva0c8ca3xyxhvfnmvz";
        libName = "tokio_retry";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
        ];
        dependencies = [
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "tokio-rustls" = rec {
        crateName = "tokio-rustls";
        version = "0.26.1";
        edition = "2021";
        sha256 = "0dxz4bhkn4bwnvzjqvqlg70ba5fslnmf9r6yr87wzq5cx9shjvaz";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "rustls/aws_lc_rs" ];
          "default" = [
            "logging"
            "tls12"
            "aws_lc_rs"
          ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [
          "logging"
          "ring"
          "tls12"
        ];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.17";
        edition = "2021";
        sha256 = "0ix0770hfp4x5rh5bl7vsnr3d4iz4ms43i522xw70xaap9xqv9gc";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "full"
              "test-util"
            ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "full" = [
            "time"
            "net"
            "io-util"
            "fs"
            "sync"
            "signal"
          ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [
            "tokio/sync"
            "tokio-util"
          ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "fs"
          "net"
          "time"
        ];
      };
      "tokio-tar" = rec {
        crateName = "tokio-tar";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0xffvap4g7hlswk5daklk3jaqha6s6wxw72c24kmqgna23018mwx";
        libName = "tokio_tar";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "dignifiedquire <me@dignifiequire.com>"
          "Artem Vorotnikov <artem@vorotnikov.me>"
          "Aiden McClelland <me@drbonez.dev>"
        ];
        dependencies = [
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.3.5";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "fs"
              "io-util"
              "rt"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "xattr";
            packageId = "xattr";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "xattr" ];
          "xattr" = [ "dep:xattr" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "xattr"
        ];
      };
      "tokio-test" = rec {
        crateName = "tokio-test";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1xzri2m3dg8nzdyznm77nymvil9cyh1gfdfrbnska51iqfmvls14";
        libName = "tokio_test";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "rt"
              "sync"
              "time"
              "test-util"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.13";
        edition = "2021";
        sha256 = "0y0h10a52c7hrldmr3410bp7j3fadq0jn9nf7awddgd2an6smz6p";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [
            "codec"
            "compat"
            "io-util"
            "time"
            "net"
            "rt"
          ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [
            "io"
            "tokio/rt"
            "tokio/io-util"
          ];
          "net" = [ "tokio/net" ];
          "rt" = [
            "tokio/rt"
            "tokio/sync"
            "futures-util"
            "hashbrown"
          ];
          "slab" = [ "dep:slab" ];
          "time" = [
            "tokio/time"
            "slab"
          ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [
          "codec"
          "compat"
          "default"
          "futures-io"
          "io"
          "io-util"
          "net"
        ];
      };
      "toml 0.6.0" = rec {
        crateName = "toml";
        version = "0.6.0";
        edition = "2021";
        sha256 = "05zjz69wjymp9yrgccg5vhvxpf855rgn23vl1yvri4nwwj8difag";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime 0.5.1";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.18.1";
            optional = true;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [
            "parse"
            "display"
          ];
          "display" = [ "dep:toml_edit" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "display"
          "parse"
        ];
      };
      "toml 0.8.19" = rec {
        crateName = "toml";
        version = "0.8.19";
        edition = "2021";
        sha256 = "0knjd3mkxyb87qcs2dark3qkpadidap3frqfj5nqvhpxwfc1zvd1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime 0.6.8";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.22";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [
            "parse"
            "display"
          ];
          "display" = [
            "dep:toml_edit"
            "toml_edit?/display"
          ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [
            "dep:toml_edit"
            "toml_edit?/parse"
          ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "display"
          "parse"
        ];
      };
      "toml_datetime 0.5.1" = rec {
        crateName = "toml_datetime";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1xcw3kyklh3s2gxp65ma26rgkl7505la4xx1r55kfgcfmikz8ls5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_datetime 0.6.8" = rec {
        crateName = "toml_datetime";
        version = "0.6.8";
        edition = "2021";
        sha256 = "0hgv7v9g35d7y9r2afic58jvlwnf73vgd1mz2k8gihlgrf73bmqd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit 0.18.1" = rec {
        crateName = "toml_edit";
        version = "0.18.1";
        edition = "2021";
        sha256 = "0ax1bwzd4xclpids3b69nd1nxqi3x3qa4ymz51jbrp6hsy6rvian";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "nom8";
            packageId = "nom8";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime 0.5.1";
          }
        ];
        features = {
          "easy" = [ "serde" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [
            "dep:serde"
            "toml_datetime/serde"
            "dep:serde_spanned"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "serde"
        ];
      };
      "toml_edit 0.22.22" = rec {
        crateName = "toml_edit";
        version = "0.22.22";
        edition = "2021";
        sha256 = "1xf7sxfzmnc45f75x302qrn5aph52vc8w226v59yhrm211i8vr2a";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.7.0";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime 0.6.8";
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        features = {
          "default" = [
            "parse"
            "display"
          ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [
            "dep:serde"
            "toml_datetime/serde"
            "dep:serde_spanned"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "display"
          "parse"
          "serde"
        ];
      };
      "tonic" = rec {
        crateName = "tonic";
        version = "0.12.3";
        edition = "2021";
        sha256 = "0ljd1lfjpw0vrm5wbv15x6nq2i38llsanls5rkzmdn2n0wrmnz47";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "axum";
            packageId = "axum";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            optional = true;
            features = [
              "http1"
              "http2"
            ];
          }
          {
            name = "hyper-timeout";
            packageId = "hyper-timeout";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
            optional = true;
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "logging"
              "tls12"
              "ring"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "rt"
              "macros"
            ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" ];
          }
        ];
        features = {
          "channel" = [
            "dep:hyper"
            "hyper?/client"
            "dep:hyper-util"
            "hyper-util?/client-legacy"
            "dep:tower"
            "tower?/balance"
            "tower?/buffer"
            "tower?/discover"
            "tower?/limit"
            "tower?/util"
            "dep:tokio"
            "tokio?/time"
            "dep:hyper-timeout"
          ];
          "codegen" = [ "dep:async-trait" ];
          "default" = [
            "transport"
            "codegen"
            "prost"
          ];
          "gzip" = [ "dep:flate2" ];
          "prost" = [ "dep:prost" ];
          "router" = [
            "dep:axum"
            "dep:tower"
            "tower?/util"
          ];
          "server" = [
            "router"
            "dep:async-stream"
            "dep:h2"
            "dep:hyper"
            "hyper?/server"
            "dep:hyper-util"
            "hyper-util?/service"
            "hyper-util?/server-auto"
            "dep:socket2"
            "dep:tokio"
            "tokio?/macros"
            "tokio?/net"
            "tokio?/time"
            "tokio-stream/net"
            "dep:tower"
            "tower?/util"
            "tower?/limit"
          ];
          "tls" = [
            "dep:rustls-pemfile"
            "dep:tokio-rustls"
            "dep:tokio"
            "tokio?/rt"
            "tokio?/macros"
          ];
          "tls-native-roots" = [
            "tls"
            "channel"
            "dep:rustls-native-certs"
          ];
          "tls-roots" = [ "tls-native-roots" ];
          "tls-webpki-roots" = [
            "tls"
            "channel"
            "dep:webpki-roots"
          ];
          "transport" = [
            "server"
            "channel"
          ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [
          "channel"
          "codegen"
          "default"
          "prost"
          "router"
          "server"
          "tls"
          "tls-native-roots"
          "tls-roots"
          "transport"
        ];
      };
      "tonic-build" = rec {
        crateName = "tonic-build";
        version = "0.12.3";
        edition = "2021";
        sha256 = "04baqblgrlc0g8scnhpky5s0n4cljaixrrdrr6cv6wx7kq8cwmwm";
        libName = "tonic_build";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "prost-build";
            packageId = "prost-build";
            optional = true;
          }
          {
            name = "prost-types";
            packageId = "prost-types";
            optional = true;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];
        features = {
          "cleanup-markdown" = [
            "prost"
            "prost-build/cleanup-markdown"
          ];
          "default" = [
            "transport"
            "prost"
          ];
          "prost" = [
            "prost-build"
            "dep:prost-types"
          ];
          "prost-build" = [ "dep:prost-build" ];
        };
        resolvedDefaultFeatures = [
          "cleanup-markdown"
          "default"
          "prost"
          "prost-build"
          "transport"
        ];
      };
      "tonic-health" = rec {
        crateName = "tonic-health";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1ch97bilfc8djdzhxaq1v4kvbj9kk51daqhic1f0y4hjp3fk9bqy";
        libName = "tonic_health";
        authors = [
          "James Nugent <james@jen20.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tonic";
            packageId = "tonic";
            usesDefaultFeatures = false;
            features = [
              "codegen"
              "prost"
            ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "rt-multi-thread"
              "macros"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
        ];
        features = {
          "default" = [ "transport" ];
        };
      };
      "tonic-reflection" = rec {
        crateName = "tonic-reflection";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09xs7h268jyf1mzzi1x97djw7cvqnnlvdzdp4q0dikvz5vsq33c7";
        libName = "tonic_reflection";
        authors = [
          "James Nugent <james@jen20.com>"
          "Samani G. Gikandi <samani@gojulas.com>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [
              "sync"
              "rt"
            ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
            features = [ "net" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            usesDefaultFeatures = false;
            features = [
              "codegen"
              "prost"
            ];
          }
        ];
        devDependencies = [
          {
            name = "tonic";
            packageId = "tonic";
            usesDefaultFeatures = false;
            features = [ "transport" ];
          }
        ];
        features = {
          "default" = [ "server" ];
          "prost-types" = [ "dep:prost-types" ];
          "server" = [
            "prost-types"
            "dep:tokio"
            "dep:tokio-stream"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "prost-types"
          "server"
        ];
      };
      "tower 0.4.13" = rec {
        crateName = "tower";
        version = "0.4.13";
        edition = "2018";
        sha256 = "073wncyqav4sak1p755hf6vl66njgfc1z1g1di9rxx3cvvh9pymq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "macros"
              "sync"
              "test-util"
              "rt-multi-thread"
            ];
          }
        ];
        features = {
          "__common" = [
            "futures-core"
            "pin-project-lite"
          ];
          "balance" = [
            "discover"
            "load"
            "ready-cache"
            "make"
            "rand"
            "slab"
          ];
          "buffer" = [
            "__common"
            "tokio/sync"
            "tokio/rt"
            "tokio-util"
            "tracing"
          ];
          "default" = [ "log" ];
          "discover" = [ "__common" ];
          "filter" = [
            "__common"
            "futures-util"
          ];
          "full" = [
            "balance"
            "buffer"
            "discover"
            "filter"
            "hedge"
            "limit"
            "load"
            "load-shed"
            "make"
            "ready-cache"
            "reconnect"
            "retry"
            "spawn-ready"
            "steer"
            "timeout"
            "util"
          ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [
            "util"
            "filter"
            "futures-util"
            "hdrhistogram"
            "tokio/time"
            "tracing"
          ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [
            "__common"
            "tokio/time"
            "tokio/sync"
            "tokio-util"
            "tracing"
          ];
          "load" = [
            "__common"
            "tokio/time"
            "tracing"
          ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [
            "futures-util"
            "pin-project-lite"
            "tokio/io-std"
          ];
          "pin-project" = [ "dep:pin-project" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "rand" = [ "dep:rand" ];
          "ready-cache" = [
            "futures-core"
            "futures-util"
            "indexmap"
            "tokio/sync"
            "tracing"
            "pin-project-lite"
          ];
          "reconnect" = [
            "make"
            "tokio/io-std"
            "tracing"
          ];
          "retry" = [
            "__common"
            "tokio/time"
          ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [
            "__common"
            "futures-util"
            "tokio/sync"
            "tokio/rt"
            "util"
            "tracing"
          ];
          "timeout" = [
            "pin-project-lite"
            "tokio/time"
          ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [
            "__common"
            "futures-util"
            "pin-project"
          ];
        };
        resolvedDefaultFeatures = [
          "__common"
          "balance"
          "buffer"
          "default"
          "discover"
          "futures-core"
          "futures-util"
          "indexmap"
          "limit"
          "load"
          "log"
          "make"
          "pin-project"
          "pin-project-lite"
          "rand"
          "ready-cache"
          "slab"
          "tokio"
          "tokio-util"
          "tracing"
          "util"
        ];
      };
      "tower 0.5.2" = rec {
        crateName = "tower";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1ybmd59nm4abl9bsvy6rx31m4zvzp5rja2slzpn712y9b68ssffh";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [
              "macros"
              "sync"
              "test-util"
              "rt-multi-thread"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "__common" = [
            "futures-core"
            "pin-project-lite"
          ];
          "balance" = [
            "discover"
            "load"
            "ready-cache"
            "make"
            "slab"
            "util"
          ];
          "buffer" = [
            "__common"
            "tokio/sync"
            "tokio/rt"
            "tokio-util"
            "tracing"
          ];
          "discover" = [ "__common" ];
          "filter" = [
            "__common"
            "futures-util"
          ];
          "full" = [
            "balance"
            "buffer"
            "discover"
            "filter"
            "hedge"
            "limit"
            "load"
            "load-shed"
            "make"
            "ready-cache"
            "reconnect"
            "retry"
            "spawn-ready"
            "steer"
            "timeout"
            "util"
          ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [
            "util"
            "filter"
            "futures-util"
            "hdrhistogram"
            "tokio/time"
            "tracing"
          ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [
            "__common"
            "tokio/time"
            "tokio/sync"
            "tokio-util"
            "tracing"
          ];
          "load" = [
            "__common"
            "tokio/time"
            "tracing"
          ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [
            "futures-util"
            "pin-project-lite"
            "tokio/io-std"
          ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "ready-cache" = [
            "futures-core"
            "futures-util"
            "indexmap"
            "tokio/sync"
            "tracing"
            "pin-project-lite"
          ];
          "reconnect" = [
            "make"
            "tokio/io-std"
            "tracing"
          ];
          "retry" = [
            "__common"
            "tokio/time"
            "util"
          ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [
            "__common"
            "futures-util"
            "tokio/sync"
            "tokio/rt"
            "util"
            "tracing"
          ];
          "sync_wrapper" = [ "dep:sync_wrapper" ];
          "timeout" = [
            "pin-project-lite"
            "tokio/time"
          ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [
            "__common"
            "futures-util"
            "pin-project-lite"
            "sync_wrapper"
          ];
        };
        resolvedDefaultFeatures = [
          "__common"
          "futures-core"
          "futures-util"
          "log"
          "make"
          "pin-project-lite"
          "sync_wrapper"
          "timeout"
          "tokio"
          "tracing"
          "util"
        ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.6.2";
        edition = "2018";
        sha256 = "15wnvhl6cpir9125s73bqjzjsvfb0fmndmsimnl2ddnlhfvs6gs0";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "async-compression";
            packageId = "async-compression";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
          }
          {
            name = "http-body";
            packageId = "http-body";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "io" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [
            "base64"
            "validate-request"
          ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [
            "tracing"
            "futures-util/std"
            "dep:http-body"
            "dep:http-body-util"
          ];
          "compression-br" = [
            "async-compression/brotli"
            "futures-core"
            "dep:http-body"
            "tokio-util"
            "tokio"
          ];
          "compression-deflate" = [
            "async-compression/zlib"
            "futures-core"
            "dep:http-body"
            "tokio-util"
            "tokio"
          ];
          "compression-full" = [
            "compression-br"
            "compression-deflate"
            "compression-gzip"
            "compression-zstd"
          ];
          "compression-gzip" = [
            "async-compression/gzip"
            "futures-core"
            "dep:http-body"
            "tokio-util"
            "tokio"
          ];
          "compression-zstd" = [
            "async-compression/zstd"
            "futures-core"
            "dep:http-body"
            "tokio-util"
            "tokio"
          ];
          "decompression-br" = [
            "async-compression/brotli"
            "futures-core"
            "dep:http-body"
            "dep:http-body-util"
            "tokio-util"
            "tokio"
          ];
          "decompression-deflate" = [
            "async-compression/zlib"
            "futures-core"
            "dep:http-body"
            "dep:http-body-util"
            "tokio-util"
            "tokio"
          ];
          "decompression-full" = [
            "decompression-br"
            "decompression-deflate"
            "decompression-gzip"
            "decompression-zstd"
          ];
          "decompression-gzip" = [
            "async-compression/gzip"
            "futures-core"
            "dep:http-body"
            "dep:http-body-util"
            "tokio-util"
            "tokio"
          ];
          "decompression-zstd" = [
            "async-compression/zstd"
            "futures-core"
            "dep:http-body"
            "dep:http-body-util"
            "tokio-util"
            "tokio"
          ];
          "follow-redirect" = [
            "futures-util"
            "dep:http-body"
            "iri-string"
            "tower/util"
          ];
          "fs" = [
            "futures-util"
            "dep:http-body"
            "dep:http-body-util"
            "tokio/fs"
            "tokio-util/io"
            "tokio/io-util"
            "dep:http-range-header"
            "mime_guess"
            "mime"
            "percent-encoding"
            "httpdate"
            "set-status"
            "futures-util/alloc"
            "tracing"
          ];
          "full" = [
            "add-extension"
            "auth"
            "catch-panic"
            "compression-full"
            "cors"
            "decompression-full"
            "follow-redirect"
            "fs"
            "limit"
            "map-request-body"
            "map-response-body"
            "metrics"
            "normalize-path"
            "propagate-header"
            "redirect"
            "request-id"
            "sensitive-headers"
            "set-header"
            "set-status"
            "timeout"
            "trace"
            "util"
            "validate-request"
          ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "limit" = [
            "dep:http-body"
            "dep:http-body-util"
          ];
          "metrics" = [
            "dep:http-body"
            "tokio/time"
          ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [
            "dep:http-body"
            "tokio/time"
          ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [
            "dep:http-body"
            "tracing"
          ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [
          "async-compression"
          "compression-zstd"
          "default"
          "futures-core"
          "tokio"
          "tokio-util"
          "trace"
          "tracing"
        ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-otel-http-metrics" = rec {
        crateName = "tower-otel-http-metrics";
        version = "0.11.0";
        edition = "2021";
        sha256 = "0n8c8k11kcxk0gmb01d0lhv80qwy774323n9ngd5rgxbvnl97f6z";
        libName = "tower_otel_http_metrics";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "matched-path"
              "macros"
            ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.2.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
            features = [ "metrics" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "axum" = [ "dep:axum" ];
        };
        resolvedDefaultFeatures = [
          "axum"
          "default"
        ];
      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [
            "std"
            "attributes"
          ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [
          "attributes"
          "default"
          "log"
          "max_level_trace"
          "release_max_level_debug"
          "std"
          "tracing-attributes"
        ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.28";
        edition = "2018";
        sha256 = "0v92l9cxs42rdm4m5hsa8z7ln1xsiw1zc2iil8c6k7lzq0jf2nir";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "full"
              "parsing"
              "printing"
              "visit-mut"
              "clone-impls"
              "extra-traits"
              "proc-macro"
            ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.33";
        edition = "2018";
        sha256 = "170gc7cxyjx824r9kr17zc9gvzx89ypqfdzq259pr56gg5bwjwp6";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [
            "std"
            "valuable?/std"
          ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "once_cell"
          "std"
        ];
      };
      "tracing-futures" = rec {
        crateName = "tracing-futures";
        version = "0.2.5";
        edition = "2018";
        sha256 = "1wimg0iwa2ldq7xv98lvivvf3q9ykfminig8r1bs0ig22np9bl4p";
        libName = "tracing_futures";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std-future"
            "std"
          ];
          "futures" = [ "dep:futures" ];
          "futures-01" = [
            "futures_01"
            "std"
          ];
          "futures-03" = [
            "std-future"
            "futures"
            "futures-task"
            "std"
          ];
          "futures-task" = [ "dep:futures-task" ];
          "futures_01" = [ "dep:futures_01" ];
          "pin-project" = [ "dep:pin-project" ];
          "std" = [ "tracing/std" ];
          "std-future" = [ "pin-project" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-executor" = [ "dep:tokio-executor" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "pin-project"
          "std"
          "std-future"
        ];
      };
      "tracing-indicatif" = rec {
        crateName = "tracing-indicatif";
        version = "0.3.8";
        edition = "2021";
        sha256 = "100ixzdbczwdpzkzzk3g9iq44llfxpymar6zbvvlfr78kn72bfkl";
        libName = "tracing_indicatif";
        dependencies = [
          {
            name = "indicatif";
            packageId = "indicatif";
            features = [ "in_memory" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];

      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [
            "log-tracer"
            "std"
          ];
          "interest-cache" = [
            "lru"
            "ahash"
          ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [
          "log-tracer"
          "std"
        ];
      };
      "tracing-opentelemetry" = rec {
        crateName = "tracing-opentelemetry";
        version = "0.29.0";
        edition = "2021";
        sha256 = "0dnca0b7bxbp6gd64skkvzy3p58yjh35kvnxpggz7sfwd4jjs7vj";
        libName = "tracing_opentelemetry";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [
              "registry"
              "std"
            ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
        ];
        devDependencies = [
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            features = [
              "trace"
              "metrics"
            ];
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
            features = [
              "trace"
              "rt-tokio"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [
              "std"
              "attributes"
            ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [
              "registry"
              "std"
              "fmt"
            ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [
            "tracing-log"
            "metrics"
          ];
          "futures-util" = [ "dep:futures-util" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "metrics" = [
            "opentelemetry/metrics"
            "opentelemetry_sdk/metrics"
            "smallvec"
          ];
          "smallvec" = [ "dep:smallvec" ];
          "thiserror" = [ "dep:thiserror" ];
          "thiserror-1" = [ "dep:thiserror-1" ];
          "tracing-log" = [ "dep:tracing-log" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "metrics"
          "smallvec"
          "tracing-log"
        ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.19";
        edition = "2018";
        sha256 = "0220rignck8072i89jjsh140vmh14ydwpdwnifyaf3xcnpn9s678";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "std"
              "unicode-case"
              "unicode-perl"
            ];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [
              "log-tracer"
              "std"
            ];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [
            "fmt"
            "nu-ansi-term"
          ];
          "chrono" = [ "dep:chrono" ];
          "default" = [
            "smallvec"
            "fmt"
            "ansi"
            "tracing-log"
            "std"
          ];
          "env-filter" = [
            "matchers"
            "regex"
            "once_cell"
            "tracing"
            "std"
            "thread_local"
          ];
          "fmt" = [
            "registry"
            "std"
          ];
          "json" = [
            "tracing-serde"
            "serde"
            "serde_json"
          ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [
            "sharded-slab"
            "thread_local"
            "std"
          ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [
            "alloc"
            "tracing-core/std"
          ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [
            "tracing-core/valuable"
            "valuable_crate"
            "valuable-serde"
            "tracing-serde/valuable"
          ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "ansi"
          "default"
          "env-filter"
          "fmt"
          "matchers"
          "nu-ansi-term"
          "once_cell"
          "regex"
          "registry"
          "sharded-slab"
          "smallvec"
          "std"
          "thread_local"
          "tracing"
          "tracing-log"
        ];
      };
      "tracing-test" = rec {
        crateName = "tracing-test";
        version = "0.2.5";
        edition = "2018";
        sha256 = "0s0x076wpga7k1a3cl8da76rrgvs45zzq9rl6q75w3gy6qa8jysm";
        libName = "tracing_test";
        authors = [
          "Danilo Bargen <mail@dbrgn.ch>"
        ];
        dependencies = [
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
          {
            name = "tracing-test-macro";
            packageId = "tracing-test-macro";
          }
        ];
        features = {
          "no-env-filter" = [ "tracing-test-macro/no-env-filter" ];
        };
      };
      "tracing-test-macro" = rec {
        crateName = "tracing-test-macro";
        version = "0.2.5";
        edition = "2018";
        sha256 = "0s3m7a3pycn8r4xyql5gv5b85sdrqp4w24k1aqy26zf80vdrsr84";
        procMacro = true;
        libName = "tracing_test_macro";
        authors = [
          "Danilo Bargen <mail@dbrgn.ch>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];
        features = {
        };
      };
      "tracing-tracy" = rec {
        crateName = "tracing-tracy";
        version = "0.11.4";
        edition = "2021";
        sha256 = "1fp4asppg1kzz44ww4961xgd1nfj1gf57ajcwklhyvm9mx91iahf";
        libName = "tracing_tracy";
        authors = [
          "Simonas Kazlauskas <tracing-tracy@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [
              "fmt"
              "registry"
            ];
          }
          {
            name = "tracy-client";
            packageId = "tracy-client";
            rename = "client";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "broadcast" = [ "client/broadcast" ];
          "callstack-inlines" = [ "client/callstack-inlines" ];
          "code-transfer" = [ "client/code-transfer" ];
          "context-switch-tracing" = [ "client/context-switch-tracing" ];
          "debuginfod" = [ "client/debuginfod" ];
          "default" = [
            "enable"
            "system-tracing"
            "context-switch-tracing"
            "sampling"
            "code-transfer"
            "broadcast"
            "callstack-inlines"
          ];
          "delayed-init" = [ "client/delayed-init" ];
          "demangle" = [ "client/demangle" ];
          "enable" = [ "client/enable" ];
          "fibers" = [ "client/fibers" ];
          "flush-on-exit" = [ "client/flush-on-exit" ];
          "manual-lifetime" = [ "client/manual-lifetime" ];
          "ondemand" = [ "client/ondemand" ];
          "only-ipv4" = [ "client/only-ipv4" ];
          "only-localhost" = [ "client/only-localhost" ];
          "sampling" = [ "client/sampling" ];
          "system-tracing" = [ "client/system-tracing" ];
          "timer-fallback" = [ "client/timer-fallback" ];
          "verify" = [ "client/verify" ];
        };
        resolvedDefaultFeatures = [
          "broadcast"
          "callstack-inlines"
          "code-transfer"
          "context-switch-tracing"
          "default"
          "enable"
          "flush-on-exit"
          "sampling"
          "system-tracing"
        ];
      };
      "tracy-client" = rec {
        crateName = "tracy-client";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1nrn739vanildbbzfdcsh8y1fzp2p848db49vmpvf0jv600jq2nr";
        libName = "tracy_client";
        authors = [
          "Simonas Kazlauskas <tracy-client@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "loom";
            packageId = "loom";
            target = { target, features }: (target."loom" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracy-client-sys";
            packageId = "tracy-client-sys";
            rename = "sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "broadcast" = [ "sys/broadcast" ];
          "callstack-inlines" = [ "sys/callstack-inlines" ];
          "code-transfer" = [ "sys/code-transfer" ];
          "context-switch-tracing" = [ "sys/context-switch-tracing" ];
          "debuginfod" = [ "sys/debuginfod" ];
          "default" = [
            "enable"
            "system-tracing"
            "context-switch-tracing"
            "sampling"
            "code-transfer"
            "broadcast"
            "callstack-inlines"
          ];
          "delayed-init" = [ "sys/delayed-init" ];
          "demangle" = [
            "sys/demangle"
            "dep:rustc-demangle"
          ];
          "enable" = [ "sys/enable" ];
          "fibers" = [ "sys/fibers" ];
          "flush-on-exit" = [ "sys/flush-on-exit" ];
          "manual-lifetime" = [ "sys/manual-lifetime" ];
          "ondemand" = [ "sys/ondemand" ];
          "only-ipv4" = [ "sys/only-ipv4" ];
          "only-localhost" = [ "sys/only-localhost" ];
          "sampling" = [ "sys/sampling" ];
          "system-tracing" = [ "sys/system-tracing" ];
          "timer-fallback" = [ "sys/timer-fallback" ];
          "verify" = [ "sys/verify" ];
        };
        resolvedDefaultFeatures = [
          "broadcast"
          "callstack-inlines"
          "code-transfer"
          "context-switch-tracing"
          "enable"
          "flush-on-exit"
          "sampling"
          "system-tracing"
        ];
      };
      "tracy-client-sys" = rec {
        crateName = "tracy-client-sys";
        version = "0.24.3";
        edition = "2021";
        sha256 = "0ps3iwb7q1fzs9pir6b0nqi8n7i67lci4jp6z4xrq8s8lmyz7zv9";
        libName = "tracy_client_sys";
        authors = [
          "Simonas Kazlauskas <tracy-client-sys@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "enable"
            "system-tracing"
            "context-switch-tracing"
            "sampling"
            "code-transfer"
            "broadcast"
            "callstack-inlines"
          ];
          "manual-lifetime" = [ "delayed-init" ];
        };
        resolvedDefaultFeatures = [
          "broadcast"
          "callstack-inlines"
          "code-transfer"
          "context-switch-tracing"
          "enable"
          "flush-on-exit"
          "sampling"
          "system-tracing"
        ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "trybuild" = rec {
        crateName = "trybuild";
        version = "1.0.101";
        edition = "2021";
        sha256 = "1m6yv898m8qbig2kjhn0c2b513nrgcmkszsbw7qjdh4nahm37kcd";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "target-triple";
            packageId = "target-triple";
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "toml";
            packageId = "toml 0.8.19";
          }
        ];
        features = {
          "diff" = [ "dissimilar" ];
          "dissimilar" = [ "dep:dissimilar" ];
        };
      };
      "typeid" = rec {
        crateName = "typeid";
        version = "1.0.2";
        edition = "2018";
        sha256 = "0vi32jv3s3nbybbl4r317wi2bk8j4fx4d8p88jji8pnd1hpdn4qf";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.17.0";
        edition = "2018";
        sha256 = "09dqxv69m9lj9zvv6xw5vxaqx15ps0vxyy5myg33i0kbqvq0pzs2";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "typetag" = rec {
        crateName = "typetag";
        version = "0.2.19";
        edition = "2021";
        sha256 = "03ngfjqi23faalhcabgns2sdm32qf0p7pzp0gwlpqc6xblvc6kq4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "erased-serde";
            packageId = "erased-serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "inventory";
            packageId = "inventory";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "derive"
            ];
          }
          {
            name = "typetag-impl";
            packageId = "typetag-impl";
          }
        ];

      };
      "typetag-impl" = rec {
        crateName = "typetag-impl";
        version = "0.2.19";
        edition = "2021";
        sha256 = "1p2malnsja9cb2i4mcagn7d8bffsxf7lxxvmywgjvgcwmhk05lyr";
        procMacro = true;
        libName = "typetag_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
        ];

      };
      "unarray" = rec {
        crateName = "unarray";
        version = "0.1.4";
        edition = "2018";
        sha256 = "154smf048k84prsdgh09nkm2n0w0336v84jd4zikyn6v6jrqbspa";

      };
      "unicase" = rec {
        crateName = "unicase";
        version = "2.8.1";
        edition = "2018";
        sha256 = "0fd5ddbhpva7wrln2iah054ar2pc1drqjcll0f493vj3fv8l9f3m";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
        };
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.14";
        edition = "2018";
        sha256 = "10ywa1pg0glgkr4l3dppjxizr9r2b7im0ycbfa0137l69z5fdfdd";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.12.0";
        edition = "2018";
        sha256 = "14qla2jfx74yyb9ds3d2mpwpa4l4lzb9z57c6d2ba511458z5k7n";
        libName = "unicode_segmentation";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width 0.1.14" = rec {
        crateName = "unicode-width";
        version = "0.1.14";
        edition = "2021";
        sha256 = "1bzn2zv0gp8xxbxbhifw778a7fc93pa6a1kj24jgg9msj07f7mkx";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [
            "std"
            "core"
            "compiler_builtins"
          ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [
          "cjk"
          "default"
        ];
      };
      "unicode-width 0.2.0" = rec {
        crateName = "unicode-width";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1zd0r5vs52ifxn25rs06gxrgz8cmh4xpra922k0xlmrchib1kj0z";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [
            "std"
            "core"
            "compiler_builtins"
          ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [
          "cjk"
          "default"
        ];
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.5.4";
        edition = "2018";
        sha256 = "0q6sgznyy2n4l5lm16zahkisvc9nip9aa5q1pps7656xra3bdy1j";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "compiled_data"
            ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [
            "idna/std"
            "percent-encoding/std"
            "form_urlencoded/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "utf16_iter" = rec {
        crateName = "utf16_iter";
        version = "1.0.5";
        edition = "2021";
        sha256 = "0ik2krdr73hfgsdzw0218fn35fa09dg2hvbi1xp3bmdfrp9js8y8";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "uuid" = rec {
        crateName = "uuid";
        version = "1.11.0";
        edition = "2018";
        sha256 = "0sj4l28lif2wm4xrafdfgqjywjzv43wzp8nii9a4i539myhg1igq";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "atomic" = [ "dep:atomic" ];
          "borsh" = [
            "dep:borsh"
            "dep:borsh-derive"
          ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "fast-rng" = [
            "rng"
            "dep:rand"
          ];
          "js" = [
            "dep:wasm-bindgen"
            "getrandom?/js"
          ];
          "macro-diagnostics" = [ "dep:uuid-macro-internal" ];
          "md5" = [ "dep:md-5" ];
          "rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "sha1" = [ "dep:sha1_smol" ];
          "slog" = [ "dep:slog" ];
          "v1" = [ "atomic" ];
          "v3" = [ "md5" ];
          "v4" = [ "rng" ];
          "v5" = [ "sha1" ];
          "v6" = [ "atomic" ];
          "v7" = [ "rng" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "rng"
          "std"
          "v4"
        ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "vhost" = rec {
        crateName = "vhost";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0dczb95w5vcq852fzxsbc6zh7ll0p1mz7yrrchvv8xjjpy6rwxm6";
        authors = [
          "Liu Jiang <gerry@linux.alibaba.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "vm-memory";
            packageId = "vm-memory";
          }
          {
            name = "vmm-sys-util";
            packageId = "vmm-sys-util";
          }
        ];
        devDependencies = [
          {
            name = "vm-memory";
            packageId = "vm-memory";
            features = [ "backend-mmap" ];
          }
        ];
        features = {
          "vhost-net" = [ "vhost-kern" ];
          "vhost-user-master" = [ "vhost-user" ];
          "vhost-user-slave" = [ "vhost-user" ];
          "vhost-vdpa" = [ "vhost-kern" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "vhost-user"
          "vhost-user-slave"
        ];
      };
      "vhost-user-backend" = rec {
        crateName = "vhost-user-backend";
        version = "0.8.0";
        edition = "2018";
        sha256 = "00s33wy8cj2i8b4hlxn7wd8zm1fpaa5kjhzv77b3khsavf8pn8wz";
        libName = "vhost_user_backend";
        authors = [
          "The Cloud Hypervisor Authors"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "vhost";
            packageId = "vhost";
            features = [ "vhost-user-slave" ];
          }
          {
            name = "virtio-bindings";
            packageId = "virtio-bindings 0.1.0";
          }
          {
            name = "virtio-queue";
            packageId = "virtio-queue";
          }
          {
            name = "vm-memory";
            packageId = "vm-memory";
            features = [
              "backend-mmap"
              "backend-atomic"
            ];
          }
          {
            name = "vmm-sys-util";
            packageId = "vmm-sys-util";
          }
        ];
        devDependencies = [
          {
            name = "vhost";
            packageId = "vhost";
            features = [
              "vhost-user-master"
              "vhost-user-slave"
            ];
          }
          {
            name = "vm-memory";
            packageId = "vm-memory";
            features = [
              "backend-mmap"
              "backend-atomic"
              "backend-bitmap"
            ];
          }
        ];

      };
      "virtio-bindings 0.1.0" = rec {
        crateName = "virtio-bindings";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0sxxhhmz1r4s4q5pd2lykswcv9qk05fmpwc5xlb8aj45h8bi5x9z";
        libName = "virtio_bindings";
        authors = [
          "Sergio Lopez <slp@redhat.com>"
        ];
        features = {
        };
      };
      "virtio-bindings 0.2.4" = rec {
        crateName = "virtio-bindings";
        version = "0.2.4";
        edition = "2021";
        sha256 = "0s0angigj4j81xyxr380jpqjx89p3qm1as2ks45lbjzq00ffc48p";
        libName = "virtio_bindings";
        authors = [
          "Sergio Lopez <slp@redhat.com>"
        ];
        features = {
        };
      };
      "virtio-queue" = rec {
        crateName = "virtio-queue";
        version = "0.7.1";
        edition = "2021";
        sha256 = "1gbppbapj7c0vyca88vl34cx4sp2cy9yg0v6bvyd5h11rhmixa1v";
        libName = "virtio_queue";
        authors = [
          "The Chromium OS Authors"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "virtio-bindings";
            packageId = "virtio-bindings 0.1.0";
          }
          {
            name = "vm-memory";
            packageId = "vm-memory";
          }
          {
            name = "vmm-sys-util";
            packageId = "vmm-sys-util";
          }
        ];
        devDependencies = [
          {
            name = "vm-memory";
            packageId = "vm-memory";
            features = [
              "backend-mmap"
              "backend-atomic"
            ];
          }
        ];
        features = {
        };
      };
      "vm-memory" = rec {
        crateName = "vm-memory";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0z423a8i4s3addq4yjad4ar5l6qwarjwdn94lismbd0mcqv712k8";
        libName = "vm_memory";
        authors = [
          "Liu Jiang <gerry@linux.alibaba.com>"
        ];
        dependencies = [
          {
            name = "arc-swap";
            packageId = "arc-swap";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "errhandlingapi"
              "sysinfoapi"
            ];
          }
        ];
        features = {
          "arc-swap" = [ "dep:arc-swap" ];
          "backend-atomic" = [ "arc-swap" ];
        };
        resolvedDefaultFeatures = [
          "arc-swap"
          "backend-atomic"
          "backend-mmap"
          "default"
        ];
      };
      "vmm-sys-util" = rec {
        crateName = "vmm-sys-util";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0a9azxk6wsahwkggshbdga4jdryzfw6j5r21f11gf50j4f2b1ds8";
        libName = "vmm_sys_util";
        authors = [
          "Intel Virtualization Team <vmm-maintainers@intel.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
            target =
              { target, features }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "with-serde" = [
            "serde"
            "serde_derive"
          ];
        };
      };
      "vt100" = rec {
        crateName = "vt100";
        version = "0.15.2";
        edition = "2021";
        sha256 = "1pklc8y984axmxr0cd363srr2d27wd5rj15xlcmkjznvy0xqdkc4";
        authors = [
          "Jesse Luehrs <doy@tozt.net>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.1.14";
          }
          {
            name = "vte";
            packageId = "vte";
          }
        ];
        devDependencies = [
          {
            name = "vte";
            packageId = "vte";
          }
        ];

      };
      "vte" = rec {
        crateName = "vte";
        version = "0.11.1";
        edition = "2021";
        sha256 = "15r1ff4j8ndqj9vsyil3wqwxhhl7jsz5g58f31n0h1wlpxgjn0pm";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
          {
            name = "vte_generate_state_changes";
            packageId = "vte_generate_state_changes";
          }
        ];
        features = {
          "ansi" = [ "log" ];
          "arrayvec" = [ "dep:arrayvec" ];
          "default" = [ "no_std" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "utf8parse/nightly" ];
          "no_std" = [ "arrayvec" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "arrayvec"
          "default"
          "no_std"
        ];
      };
      "vte_generate_state_changes" = rec {
        crateName = "vte_generate_state_changes";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0biwgpcji3w4llz7h4bi8c2rwqchm9gmyr7dnjki1m853gp9ndif";
        procMacro = true;
        authors = [
          "Christian Duerr <contact@christianduerr.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "vu128" = rec {
        crateName = "vu128";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1pczgy26c0lsri1ddrx5wkgn0rcq4da04pqya5rl6vrwfnys73di";
        libPath = "vu128/vu128.rs";
        authors = [
          "John Millikin <john@john-millikin.com>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "compiler_builtins"
            "core"
            "rustc-std-workspace-alloc"
          ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.99";
        edition = "2021";
        sha256 = "15k3rzb3kjrxyqnh0916gq99mrpwhwy62smawxxc2w0x3llgcx54";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "spans"
            "std"
          ];
          "enable-interning" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [
            "serde"
            "serde_json"
            "std"
          ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "std" = [
            "wasm-bindgen-macro/std"
            "once_cell/std"
          ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [
            "wasm-bindgen-macro/xxx_debug_only_print_generated_code"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "spans"
          "std"
        ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.99";
        edition = "2021";
        sha256 = "0ycwa4c68j34687k513djgyy2asn3fw3yp4g9rkq2kvbchwbp2az";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [
          "spans"
          "std"
        ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.49";
        edition = "2021";
        sha256 = "18pc937q8kg549czxk3ah57h9vb7q56c62zz9qcfk17a8jdns5rq";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [
              "MessageEvent"
              "Worker"
            ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
          "std" = [
            "wasm-bindgen/std"
            "js-sys/std"
            "web-sys/std"
            "once_cell/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.99";
        edition = "2021";
        sha256 = "1znlcrk5bvisr3vscwlqkdby959n3sb367zgdzpjwjd7v4giiiic";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "std" = [ "wasm-bindgen-macro-support/std" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [
          "spans"
          "std"
        ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.99";
        edition = "2021";
        sha256 = "1hihsgyg0kf46kjhgfv8x5g9x0q1d0aizj6n7s84ag1xfrdskmrh";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [
              "visit"
              "visit-mut"
              "full"
            ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
          "std" = [ "wasm-bindgen-backend/std" ];
        };
        resolvedDefaultFeatures = [
          "spans"
          "std"
        ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.99";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "19h61snrhh1qhb5gz6zyb89l7fbj1fhmxcvi09p9l0mav8zsnfll";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "wasm-streams" = rec {
        crateName = "wasm-streams";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0rddn007hp6k2cm91mm9y33n79b0jxv0c3znzszcvv67hn6ks18m";
        libName = "wasm_streams";
        type = [
          "cdylib"
          "rlib"
        ];
        authors = [
          "Mattias Buelens <mattias@buelens.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [
              "io"
              "sink"
            ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [
              "AbortSignal"
              "QueuingStrategy"
              "ReadableStream"
              "ReadableStreamType"
              "ReadableWritablePair"
              "ReadableStreamByobReader"
              "ReadableStreamReaderMode"
              "ReadableStreamReadResult"
              "ReadableStreamByobRequest"
              "ReadableStreamDefaultReader"
              "ReadableByteStreamController"
              "ReadableStreamGetReaderOptions"
              "ReadableStreamDefaultController"
              "StreamPipeOptions"
              "TransformStream"
              "TransformStreamDefaultController"
              "Transformer"
              "UnderlyingSink"
              "UnderlyingSource"
              "WritableStream"
              "WritableStreamDefaultController"
              "WritableStreamDefaultWriter"
            ];
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [
              "console"
              "AbortSignal"
              "ErrorEvent"
              "PromiseRejectionEvent"
              "Response"
              "ReadableStream"
              "Window"
            ];
          }
        ];

      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.76";
        edition = "2021";
        sha256 = "1g0j3kii20mh7hqmdajz2r4c21zynb9h9h026wymalkx88ip5p84";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [
            "EventTarget"
            "Node"
          ];
          "AudioBufferSourceNode" = [
            "AudioNode"
            "AudioScheduledSourceNode"
            "EventTarget"
          ];
          "AudioContext" = [
            "BaseAudioContext"
            "EventTarget"
          ];
          "AudioDestinationNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "AudioStreamTrack" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [
            "EventTarget"
            "PermissionStatus"
          ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [
            "EventTarget"
            "MediaStream"
          ];
          "CanvasCaptureMediaStreamTrack" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "CdataSection" = [
            "CharacterData"
            "EventTarget"
            "Node"
            "Text"
          ];
          "ChannelMergerNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "ChannelSplitterNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "CharacterData" = [
            "EventTarget"
            "Node"
          ];
          "ChromeWorker" = [
            "EventTarget"
            "Worker"
          ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [
            "CharacterData"
            "EventTarget"
            "Node"
          ];
          "CompositionEvent" = [
            "Event"
            "UiEvent"
          ];
          "ConstantSourceNode" = [
            "AudioNode"
            "AudioScheduledSourceNode"
            "EventTarget"
          ];
          "ConvolverNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "CssAnimation" = [
            "Animation"
            "EventTarget"
          ];
          "CssConditionRule" = [
            "CssGroupingRule"
            "CssRule"
          ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [
            "CssConditionRule"
            "CssGroupingRule"
            "CssRule"
          ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [
            "CssConditionRule"
            "CssGroupingRule"
            "CssRule"
          ];
          "CssTransition" = [
            "Animation"
            "EventTarget"
          ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [
            "EventTarget"
            "WorkerGlobalScope"
          ];
          "DelayNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [
            "EventTarget"
            "Node"
          ];
          "DocumentFragment" = [
            "EventTarget"
            "Node"
          ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [
            "EventTarget"
            "Node"
          ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "DynamicsCompressorNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "Element" = [
            "EventTarget"
            "Node"
          ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "FetchEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [
            "Event"
            "UiEvent"
          ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlAreaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlAudioElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "HtmlMediaElement"
            "Node"
          ];
          "HtmlBaseElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlBodyElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlBrElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlButtonElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlCanvasElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDataElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDataListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDetailsElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDialogElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDirectoryElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDivElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDocument" = [
            "Document"
            "EventTarget"
            "Node"
          ];
          "HtmlElement" = [
            "Element"
            "EventTarget"
            "Node"
          ];
          "HtmlEmbedElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFieldSetElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFontElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFrameElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFrameSetElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHeadElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHeadingElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHrElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHtmlElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlIFrameElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlImageElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlInputElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLabelElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLegendElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLiElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLinkElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMapElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMediaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMenuElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMenuItemElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMetaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMeterElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlModElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlObjectElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOptGroupElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOptionElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlParagraphElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlParamElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlPictureElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlPreElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlProgressElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlQuoteElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlScriptElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSelectElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSlotElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSourceElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSpanElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlStyleElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableCaptionElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableCellElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableColElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableRowElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableSectionElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTemplateElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTextAreaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTimeElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTitleElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTrackElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlUListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlUnknownElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlVideoElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "HtmlMediaElement"
            "Node"
          ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [
            "DomRequest"
            "EventTarget"
          ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [
            "EventTarget"
            "IdbRequest"
          ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [
            "Event"
            "UiEvent"
          ];
          "KeyFrameRequestEvent" = [ "Event" ];
          "KeyboardEvent" = [
            "Event"
            "UiEvent"
          ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [
            "EventTarget"
            "MediaStream"
          ];
          "MathMlElement" = [
            "Element"
            "EventTarget"
            "Node"
          ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "MediaStreamAudioSourceNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [
            "EventTarget"
            "MidiPort"
          ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [
            "EventTarget"
            "MidiPort"
          ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [
            "Event"
            "UiEvent"
          ];
          "MouseScrollEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [
            "BaseAudioContext"
            "EventTarget"
          ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [
            "AudioNode"
            "AudioScheduledSourceNode"
            "EventTarget"
          ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "PaymentMethodChangeEvent" = [
            "Event"
            "PaymentRequestUpdateEvent"
          ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [
            "PerformanceEntry"
            "PerformanceResourceTiming"
          ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [
            "CharacterData"
            "EventTarget"
            "Node"
          ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcRtpScriptTransformer" = [ "EventTarget" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcTransformEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "SFrameTransform" = [ "EventTarget" ];
          "SFrameTransformErrorEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "ScrollAreaEvent" = [
            "Event"
            "UiEvent"
          ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [
            "EventTarget"
            "WorkerGlobalScope"
          ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [
            "DocumentFragment"
            "EventTarget"
            "Node"
          ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [
            "EventTarget"
            "WorkerGlobalScope"
          ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [
            "Event"
            "SpeechSynthesisEvent"
          ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgAnimateMotionElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgAnimateTransformElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgAnimationElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgCircleElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgClipPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgComponentTransferFunctionElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgDefsElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgDescElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgElement" = [
            "Element"
            "EventTarget"
            "Node"
          ];
          "SvgEllipseElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgFilterElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgForeignObjectElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgGeometryElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgGradientElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgGraphicsElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgImageElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgLineElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgLinearGradientElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGradientElement"
          ];
          "SvgMarkerElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgMaskElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgMetadataElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgPolygonElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgPolylineElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgRadialGradientElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGradientElement"
          ];
          "SvgRectElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgScriptElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgSetElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgStopElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgStyleElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgSwitchElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgSymbolElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgTextContentElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgTextElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
            "SvgTextPositioningElement"
          ];
          "SvgTextPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
          ];
          "SvgTextPositioningElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
          ];
          "SvgTitleElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgUseElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgViewElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgaElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgfeBlendElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeColorMatrixElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeComponentTransferElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeCompositeElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeConvolveMatrixElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDiffuseLightingElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDisplacementMapElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDistantLightElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDropShadowElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeFloodElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeFuncAElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeFuncBElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeFuncGElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeFuncRElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeGaussianBlurElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeImageElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeMergeElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeMergeNodeElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeMorphologyElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeOffsetElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfePointLightElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeSpecularLightingElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeSpotLightElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeTileElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeTurbulenceElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvggElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgmPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgsvgElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgtSpanElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
            "SvgTextPositioningElement"
          ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [
            "AbortSignal"
            "EventTarget"
          ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [
            "CharacterData"
            "EventTarget"
            "Node"
          ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [
            "Event"
            "UiEvent"
          ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [
            "EventTarget"
            "PermissionStatus"
          ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [
            "EventTarget"
            "TextTrackCue"
          ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [
            "DomMatrix"
            "DomMatrixReadOnly"
          ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [
            "Document"
            "EventTarget"
            "Node"
          ];
          "XmlHttpRequest" = [
            "EventTarget"
            "XmlHttpRequestEventTarget"
          ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [
            "EventTarget"
            "XmlHttpRequestEventTarget"
          ];
          "XrBoundedReferenceSpace" = [
            "EventTarget"
            "XrReferenceSpace"
            "XrSpace"
          ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [
            "EventTarget"
            "XrSpace"
          ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [
            "EventTarget"
            "PermissionStatus"
          ];
          "XrReferenceSpace" = [
            "EventTarget"
            "XrSpace"
          ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [
            "EventTarget"
            "XrLayer"
          ];
          "default" = [ "std" ];
          "std" = [
            "wasm-bindgen/std"
            "js-sys/std"
          ];
        };
        resolvedDefaultFeatures = [
          "AbortController"
          "AbortSignal"
          "Blob"
          "BlobPropertyBag"
          "CanvasRenderingContext2d"
          "Document"
          "DomRect"
          "DomRectReadOnly"
          "Element"
          "Event"
          "EventTarget"
          "File"
          "FormData"
          "Headers"
          "HtmlCanvasElement"
          "HtmlElement"
          "MessageEvent"
          "Node"
          "QueuingStrategy"
          "ReadableByteStreamController"
          "ReadableStream"
          "ReadableStreamByobReader"
          "ReadableStreamByobRequest"
          "ReadableStreamDefaultController"
          "ReadableStreamDefaultReader"
          "ReadableStreamGetReaderOptions"
          "ReadableStreamReadResult"
          "ReadableStreamReaderMode"
          "ReadableStreamType"
          "ReadableWritablePair"
          "Request"
          "RequestCredentials"
          "RequestInit"
          "RequestMode"
          "Response"
          "ServiceWorkerGlobalScope"
          "StreamPipeOptions"
          "TransformStream"
          "TransformStreamDefaultController"
          "Transformer"
          "UnderlyingSink"
          "UnderlyingSource"
          "Window"
          "Worker"
          "WorkerGlobalScope"
          "WritableStream"
          "WritableStreamDefaultController"
          "WritableStreamDefaultWriter"
          "default"
          "std"
        ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [
          "basetsd"
          "consoleapi"
          "errhandlingapi"
          "fileapi"
          "handleapi"
          "knownfolders"
          "minwindef"
          "objbase"
          "processenv"
          "shellapi"
          "shlobj"
          "std"
          "stringapiset"
          "synchapi"
          "sysinfoapi"
          "winbase"
          "wincon"
          "winerror"
          "winuser"
        ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Storage_FileSystem"
              "Win32_System_Console"
              "Win32_System_SystemInformation"
            ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows" = rec {
        crateName = "windows";
        version = "0.58.0";
        edition = "2021";
        sha256 = "1dkjj94b0gn91nn1n22cvm4afsj98f5qrhcl3112v6f4jcfx816x";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.58.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI" = [ "Foundation" ];
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel" = [ "Foundation" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_PackageExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data" = [ "Foundation" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices" = [ "Foundation" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded" = [ "Foundation" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization" = [ "Foundation" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics" = [ "Foundation" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management" = [ "Foundation" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Setup" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media" = [ "Foundation" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking" = [ "Foundation" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception" = [ "Foundation" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone" = [ "Foundation" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security" = [ "Foundation" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services" = [ "Foundation" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage" = [ "Foundation" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System" = [ "Foundation" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteDesktop_Provider" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI" = [ "Foundation" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Notifications_Preview" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web" = [ "Foundation" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "default" = [ "std" ];
          "std" = [ "windows-core/std" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Foundation"
          "Win32_System"
          "Win32_System_Diagnostics"
          "Win32_System_Diagnostics_Debug"
          "Win32_System_Kernel"
          "Win32_System_Memory"
          "Win32_System_SystemInformation"
          "default"
          "std"
        ];
      };
      "windows-core 0.52.0" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-core 0.58.0" = rec {
        crateName = "windows-core";
        version = "0.58.0";
        edition = "2021";
        sha256 = "16czypy425jzmiys4yb3pwsh7cm6grxn9kjp889iqnf2r17d99kb";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
          }
          {
            name = "windows-result";
            packageId = "windows-result";
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.58.0";
        edition = "2021";
        sha256 = "16spr5z65z21qyv379rv2mb1s5q2i9ibd1p2pkn0dr9qr535pg9b";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "parsing"
              "proc-macro"
              "printing"
              "full"
              "derive"
            ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.58.0";
        edition = "2021";
        sha256 = "059mxmfvx3x88q74ms0qlxmj2pnidmr5mzn60hakn7f95m34qg05";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            usesDefaultFeatures = false;
            features = [
              "parsing"
              "proc-macro"
              "printing"
              "full"
              "derive"
              "clone-impls"
            ];
          }
        ];

      };
      "windows-registry" = rec {
        crateName = "windows-registry";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1c04923fq0rbvl3z0h67xr6rh2fgwkizhclhqv0j79i0nwdh0074";
        libName = "windows_registry";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-result";
            packageId = "windows-result";
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];

      };
      "windows-result" = rec {
        crateName = "windows-result";
        version = "0.2.0";
        edition = "2021";
        sha256 = "03mf2z1xcy2slhhsm15z24p76qxgm2m74xdjp8bihyag47c4640x";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "windows-strings" = rec {
        crateName = "windows-strings";
        version = "0.1.0";
        edition = "2021";
        sha256 = "042dxvi3133f7dyi2pgcvknwkikk47k8bddwxbq5s0l6qhjv3nac";
        libName = "windows_strings";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-result";
            packageId = "windows-result";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Foundation"
          "Win32_Networking"
          "Win32_Networking_WinSock"
          "Win32_Security"
          "Win32_Storage"
          "Win32_Storage_FileSystem"
          "Win32_System"
          "Win32_System_IO"
          "Win32_System_Pipes"
          "Win32_System_WindowsProgramming"
          "default"
        ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [
          "Wdk"
          "Wdk_Foundation"
          "Wdk_Storage"
          "Wdk_Storage_FileSystem"
          "Wdk_System"
          "Wdk_System_IO"
          "Win32"
          "Win32_Foundation"
          "Win32_Networking"
          "Win32_Networking_WinSock"
          "Win32_Security"
          "Win32_Storage"
          "Win32_Storage_FileSystem"
          "Win32_System"
          "Win32_System_Console"
          "Win32_System_IO"
          "Win32_System_Pipes"
          "Win32_System_SystemServices"
          "Win32_System_Threading"
          "Win32_System_WindowsProgramming"
          "default"
        ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [
          "Wdk"
          "Wdk_Foundation"
          "Wdk_Storage"
          "Wdk_Storage_FileSystem"
          "Win32"
          "Win32_Foundation"
          "Win32_NetworkManagement"
          "Win32_NetworkManagement_IpHelper"
          "Win32_Networking"
          "Win32_Networking_WinSock"
          "Win32_Security"
          "Win32_Security_Authentication"
          "Win32_Security_Authentication_Identity"
          "Win32_Security_Credentials"
          "Win32_Security_Cryptography"
          "Win32_Storage"
          "Win32_Storage_FileSystem"
          "Win32_System"
          "Win32_System_Com"
          "Win32_System_Console"
          "Win32_System_Diagnostics"
          "Win32_System_Diagnostics_Debug"
          "Win32_System_IO"
          "Win32_System_LibraryLoader"
          "Win32_System_Memory"
          "Win32_System_SystemInformation"
          "Win32_System_Threading"
          "Win32_System_WindowsProgramming"
          "Win32_UI"
          "Win32_UI_Input"
          "Win32_UI_Input_KeyboardAndMouse"
          "Win32_UI_Shell"
          "default"
        ];
      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target =
              { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target =
              { target, features }:
              (
                ("x86_64" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!("llvm" == target."abi" or null))
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target =
              { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target =
              { target, features }:
              (
                ("x86_64" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target =
              { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!("llvm" == target."abi" or null))
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target =
              { target, features }:
              (
                ("x86_64" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!("llvm" == target."abi" or null))
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target =
              { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target =
              { target, features }:
              (
                (("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null))
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.6.21";
        edition = "2021";
        sha256 = "0s3x124zh15c2q2hd9kh7skr48b9v6zlkry64ma7lh7jax9bpxg6";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [
            "std"
            "dep:anstream"
            "dep:anstyle"
            "dep:is-terminal"
            "dep:terminal_size"
          ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [
            "alloc"
            "memchr?/std"
          ];
          "unstable-doc" = [
            "alloc"
            "std"
            "simd"
            "unstable-recover"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "write16" = rec {
        crateName = "write16";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0dnryvrrbrnl7vvf5vb1zkmwldhjkf2n5znliviam7bm4900z2fi";
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "smallvec" = [ "dep:smallvec" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.5.5";
        edition = "2021";
        sha256 = "0lawr6y0bwqfyayf3z8zmqlhpnzhdx0ahs54isacbhyjwa7g778y";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "either" = [ "dep:either" ];
        };
      };
      "wu-manber" = rec {
        crateName = "wu-manber";
        version = "0.1.0";
        edition = "2015";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/tvlfyi/wu-manber.git";
          rev = "0d5b22bea136659f7de60b102a7030e0daaa503d";
          sha256 = "1zhk83lbq99xzyjwphv2qrb8f8qgfqwa5bbbvyzm0z0bljsjv0pd";
        };
        libName = "wu_manber";
        authors = [
          "Joe Neeman <joeneeman@gmail.com>"
        ];

      };
      "xattr" = rec {
        crateName = "xattr";
        version = "1.3.1";
        edition = "2021";
        sha256 = "0kqxm36w89vc6qcpn6pizlhgjgzq138sx4hdhbv2g6wk4ld4za4d";
        authors = [
          "Steven Allen <steven@stebalien.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }: (("freebsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [
              "fs"
              "std"
            ];
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        features = {
          "default" = [ "unsupported" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "unsupported"
        ];
      };
      "xz2" = rec {
        crateName = "xz2";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1qk7nzpblizvayyq4xzi4b0zacmmbqr6vb9fc0v1avyp17f4931q";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "lzma-sys";
            packageId = "lzma-sys";
          }
        ];
        features = {
          "futures" = [ "dep:futures" ];
          "static" = [ "lzma-sys/static" ];
          "tokio" = [
            "tokio-io"
            "futures"
          ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
      };
      "yansi" = rec {
        crateName = "yansi";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0jdh55jyv0dpd38ij4qh60zglbw9aa8wafqai6m0wa7xaxk3mrfg";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        features = {
          "default" = [ "std" ];
          "detect-env" = [ "std" ];
          "detect-tty" = [
            "is-terminal"
            "std"
          ];
          "hyperlink" = [ "std" ];
          "is-terminal" = [ "dep:is-terminal" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0h3znzrdmll0a7sglzf9ji0p5iqml11wrj1dypaf6ad6kbpnl3hj";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "stable_deref_trait/alloc"
            "serde?/alloc"
            "zerofrom/alloc"
          ];
          "default" = [
            "alloc"
            "zerofrom"
          ];
          "derive" = [
            "dep:yoke-derive"
            "zerofrom/derive"
          ];
          "serde" = [ "dep:serde" ];
          "zerofrom" = [ "dep:zerofrom" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "derive"
          "zerofrom"
        ];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0m4i4a7gy826bfvnqa9wy6sp90qf0as3wps3wb0smjaamn68g013";
        procMacro = true;
        libName = "yoke_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.7.35";
        edition = "2018";
        sha256 = "1w36q7b9il2flg0qskapgi9ymgg7p985vniqd09vi0mwib8lz6qv";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [
            "alloc"
            "derive"
            "simd"
          ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "byteorder" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [
          "byteorder"
          "default"
          "derive"
          "simd"
          "zerocopy-derive"
        ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.7.35";
        edition = "2018";
        sha256 = "0gnf2ap2y92nwdalzz3x7142f2b83sni66l39vxp2ijd6j080kzs";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
          }
        ];

      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.5";
        edition = "2021";
        sha256 = "0bnd8vjcllzrvr3wvn8x14k2hkrpyy1fm3crkn2y3plmr44fxwyg";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "dep:zerofrom-derive" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "derive"
        ];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.5";
        edition = "2021";
        sha256 = "022q55phhb44qbrcfbc48k0b741fl8gnazw3hpmmndbx5ycfspjr";
        procMacro = true;
        libName = "zerofrom_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
        ];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.10.4";
        edition = "2021";
        sha256 = "0yghix7n3fjfdppwghknzvx9v8cf826h2qal5nqvy8yzg4yqjaxa";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bench" = [
            "serde"
            "databake"
          ];
          "databake" = [ "dep:databake" ];
          "derive" = [ "dep:zerovec-derive" ];
          "hashmap" = [ "dep:twox-hash" ];
          "serde" = [ "dep:serde" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [
          "derive"
          "yoke"
        ];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.10.3";
        edition = "2021";
        sha256 = "1ik322dys6wnap5d3gcsn09azmssq466xryn5czfm13mn7gsdbvf";
        procMacro = true;
        libName = "zerovec_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.93";
            features = [ "extra-traits" ];
          }
        ];

      };
      "zstd" = rec {
        crateName = "zstd";
        version = "0.13.2";
        edition = "2018";
        sha256 = "1ygkr6wspm9clbp7ykyl0rv69cfsf9q4lic9wcqiwn34lrwbgwpw";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [
            "legacy"
            "arrays"
            "zdict_builder"
          ];
          "experimental" = [ "zstd-safe/experimental" ];
          "fat-lto" = [ "zstd-safe/fat-lto" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "thin-lto" = [ "zstd-safe/thin-lto" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [
          "arrays"
          "default"
          "legacy"
          "zdict_builder"
        ];
      };
      "zstd-safe" = rec {
        crateName = "zstd-safe";
        version = "7.2.1";
        edition = "2018";
        sha256 = "0nch85m5cr493y26yvndm6a8j6sd9mxpr2awrim3dslcnr6sp8sl";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [
            "legacy"
            "arrays"
            "zdict_builder"
          ];
          "experimental" = [ "zstd-sys/experimental" ];
          "fat-lto" = [ "zstd-sys/fat-lto" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "thin-lto" = [ "zstd-sys/thin-lto" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [
          "arrays"
          "legacy"
          "std"
          "zdict_builder"
        ];
      };
      "zstd-sys" = rec {
        crateName = "zstd-sys";
        version = "2.0.13+zstd.1.5.6";
        edition = "2018";
        links = "zstd";
        sha256 = "1almbackh06am0d2kc4a089n3al91jg3ahgg9kcrg3zfrwhhzzrq";
        libName = "zstd_sys";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "default" = [
            "legacy"
            "zdict_builder"
          ];
        };
        resolvedDefaultFeatures = [
          "legacy"
          "std"
          "zdict_builder"
        ];
      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /*
      Target (platform) data for conditional dependencies.
      This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      inherit (platform.rust.platform)
        arch
        os
        vendor
        ;
      family = platform.rust.platform.target-family;
      env = "gnu";
      endian = if platform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      debug_assertions = false;
    };

    # Filters common temp files and build files.
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter =
      name: type:
      let
        baseName = builtins.baseNameOf (builtins.toString name);
      in
      !(
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory"
          && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (type == "symlink" && lib.hasPrefix "result" baseName)

        # Filter out IDE config
        || (type == "directory" && (baseName == ".idea" || baseName == ".vscode"))
        || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

    /*
      Returns a crate which depends on successful test execution
      of crate given as the second argument.

      testCrateFlags: list of flags to pass to the test exectuable
      testInputs: list of packages that should be available during test execution
    */
    crateWithTest =
      {
        crate,
        testCrate,
        testCrateFlags,
        testInputs,
        testPreRun,
        testPostRun,
      }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test =
          let
            drv = testCrate.override (_: {
              buildTests = true;
              release = false;
            });
            # If the user hasn't set any pre/post commands, we don't want to
            # insert empty lines. This means that any existing users of crate2nix
            # don't get a spurious rebuild unless they set these explicitly.
            testCommand = pkgs.lib.concatStringsSep "\n" (
              pkgs.lib.filter (s: s != "") [
                testPreRun
                "$f $testCrateFlags 2>&1 | tee -a $out"
                testPostRun
              ]
            );
          in
          pkgs.stdenvNoCC.mkDerivation {
            name = "run-tests-${testCrate.name}";

            inherit (crate) src;

            inherit testCrateFlags;

            buildInputs = testInputs;

            buildPhase = ''
              set -e
              export RUST_BACKTRACE=1

              # build outputs
              testRoot=target/debug
              mkdir -p $testRoot

              # executables of the crate
              # we copy to prevent std::env::current_exe() to resolve to a store location
              for i in ${crate}/bin/*; do
                cp "$i" "$testRoot"
              done
              chmod +w -R .

              # test harness executables are suffixed with a hash, like cargo does
              # this allows to prevent name collision with the main
              # executables of the crate
              hash=$(basename $out)
              for file in ${drv}/tests/*; do
                f=$testRoot/$(basename $file)-$hash
                cp $file $f
                ${testCommand}
              done
            '';
          };
      in
      pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru = (crate.passthru or { }) // {
            inherit test;
          };
        }
        (
          lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          ''
        );

    # A restricted overridable version of builtRustCratesWithFeatures.
    buildRustCrateWithFeatures =
      {
        packageId,
        features ? rootFeatures,
        crateOverrides ? defaultCrateOverrides,
        buildRustCrateForPkgsFunc ? null,
        runTests ? false,
        testCrateFlags ? [ ],
        testInputs ? [ ],
        # Any command to run immediatelly before a test is executed.
        testPreRun ? "",
        # Any command run immediatelly after a test is executed.
        testPostRun ? "",
      }:
      lib.makeOverridable
        (
          {
            features,
            crateOverrides,
            runTests,
            testCrateFlags,
            testInputs,
            testPreRun,
            testPostRun,
          }:
          let
            buildRustCrateForPkgsFuncOverriden =
              if buildRustCrateForPkgsFunc != null then
                buildRustCrateForPkgsFunc
              else
                (
                  if crateOverrides == pkgs.defaultCrateOverrides then
                    buildRustCrateForPkgs
                  else
                    pkgs:
                    (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
                );
            builtRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = false;
            };
            builtTestRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = true;
            };
            drv = builtRustCrates.crates.${packageId};
            testDrv = builtTestRustCrates.crates.${packageId};
            derivation =
              if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit
                    testCrateFlags
                    testInputs
                    testPreRun
                    testPostRun
                    ;
                }
              else
                drv;
          in
          derivation
        )
        {
          inherit
            features
            crateOverrides
            runTests
            testCrateFlags
            testInputs
            testPreRun
            testPostRun
            ;
        };

    /*
      Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
      for the corresponding crate.
    */
    builtRustCratesWithFeatures =
      {
        packageId,
        features,
        crateConfigs ? crates,
        buildRustCrateForPkgsFunc,
        runTests,
        makeTarget ? makeDefaultTarget,
      }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args
          // {
            inherit rootPackageId;
            target = makeTarget stdenv.hostPlatform // {
              test = runTests;
            };
          }
        );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs =
          pkgs:
          let
            self = {
              crates = lib.mapAttrs (
                packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId
              ) crateConfigs;
              target = makeTarget stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl =
          self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig = builtins.removeAttrs crateConfig' [
              "resolvedDefaultFeatures"
              "devDependencies"
            ];
            devDependencies = lib.optionals (runTests && packageId == rootPackageId) (
              crateConfig'.devDependencies or [ ]
            );
            dependencies = dependencyDerivations {
              inherit features;
              inherit (self) target;
              buildByPackageId =
                depPackageId:
                # proc_macro crates must be compiled for the build architecture
                if crateConfigs.${depPackageId}.procMacro or false then
                  self.build.crates.${depPackageId}
                else
                  self.crates.${depPackageId};
              dependencies = (crateConfig.dependencies or [ ]) ++ devDependencies;
            };
            buildDependencies = dependencyDerivations {
              inherit features;
              inherit (self.build) target;
              buildByPackageId = depPackageId: self.build.crates.${depPackageId};
              dependencies = crateConfig.buildDependencies or [ ];
            };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped = lib.groupBy (dependency: dependency.name) dependenciesWithRenames;
                versionAndRename =
                  dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  {
                    inherit (dep) rename;
                    inherit (package) version;
                  };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs (
            crateConfig
            // {
              src =
                crateConfig.src or (pkgs.fetchurl rec {
                  name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                  # https://www.pietroalbini.org/blog/downloading-crates-io/
                  # Not rate-limited, CDN URL.
                  url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                  sha256 =
                    assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                    crateConfig.sha256;
                });
              extraRustcOpts =
                lib.lists.optional (targetFeatures != [ ])
                  "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit
                features
                dependencies
                buildDependencies
                crateRenames
                release
                ;
            }
          );
      in
      builtByPackageIdByPkgs;

    # Returns the actual derivations for the given dependencies.
    dependencyDerivations =
      {
        buildByPackageId,
        features,
        dependencies,
        target,
      }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

    /*
      Returns a sanitized version of val with all values substituted that cannot
      be serialized as JSON.
    */
    sanitizeForJson =
      val:
      if builtins.isAttrs val then
        lib.mapAttrs (n: sanitizeForJson) val
      else if builtins.isList val then
        builtins.map sanitizeForJson val
      else if builtins.isFunction val then
        "function"
      else
        val;

    # Returns various tools to debug a crate.
    debugCrate =
      {
        packageId,
        target ? makeDefaultTarget stdenv.hostPlatform,
      }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson (buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [ ];
              "03_dependencies" = crate.dependencies or [ ];
            };
            inherit packageId;
          });
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in
      {
        internal = debug;
      };

    /*
      Returns differences between cargo default features and crate2nix default
      features.

      This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures =
      {
        crateConfigs ? crates,
        packageId,
        target,
      }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures = prefixValues "crate2nix" (mergePackageFeatures {
          inherit crateConfigs packageId target;
          features = [ "default" ];
        });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [
          mergedFeatures
          configs
        ];
        onlyInCargo = builtins.attrNames (
          lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined
        );
        onlyInCrate2Nix = builtins.attrNames (
          lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined
        );
        differentFeatures = lib.filterAttrs (
          n: v:
          (v ? "crate2nix")
          && (v ? "cargo")
          && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
        ) combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

    /*
      Returns an attrset mapping packageId to the list of enabled features.

      If multiple paths to a dependency enable different features, the
      corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures =
      {
        crateConfigs ? crates,
        packageId,
        rootPackageId ? packageId,
        features ? rootFeatures,
        dependencyPath ? [ crates.${packageId}.crateName ],
        featuresByPackageId ? { },
        target,
        # Adds devDependencies to the crate with rootPackageId.
        runTests ? false,
        ...
      }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures =
          dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          {
            inherit packageId features;
          };
        resolveDependencies =
          cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache (
            cache:
            { packageId, features }:
            let
              cacheFeatures = cache.${packageId} or [ ];
              combinedFeatures = sortedUnique (cacheFeatures ++ features);
            in
            if cache ? ${packageId} && cache.${packageId} == combinedFeatures then
              cache
            else
              mergePackageFeatures {
                features = combinedFeatures;
                featuresByPackageId = cache;
                inherit
                  crateConfigs
                  packageId
                  target
                  runTests
                  rootPackageId
                  ;
              }
          );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies = resolveDependencies cacheWithSelf "dep" (
          crateConfig.dependencies or [ ]
          ++ lib.optionals (runTests && packageId == rootPackageId) (crateConfig.devDependencies or [ ])
        );
        cacheWithAll = resolveDependencies cacheWithDependencies "build" (
          crateConfig.buildDependencies or [ ]
        );
      in
      cacheWithAll;

    # Returns the enabled dependencies given the enabled features.
    filterEnabledDependencies =
      {
        dependencies,
        features,
        target,
      }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency dep) features)
      ) dependencies;

    # Returns whether the given feature should enable the given dependency.
    doesFeatureEnableDependency =
      dependency: feature:
      let
        name = dependency.rename or dependency.name;
        prefix = "${name}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
      in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /*
      Returns the expanded features for the given inputFeatures by applying the
      rules in featureMap.

      featureMap is an attribute set which maps feature names to lists of further
      feature names to enable in case this feature is selected.
    */
    expandFeatures =
      featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeaturesNoCycle =
          oldSeen: inputFeatures:
          if inputFeatures != [ ] then
            let
              # The feature we're currently expanding.
              feature = builtins.head inputFeatures;
              # All the features we've seen/expanded so far, including the one
              # we're currently processing.
              seen = oldSeen // {
                ${feature} = 1;
              };
              # Expand the feature but be careful to not re-introduce a feature
              # that we've already seen: this can easily cause a cycle, see issue
              # #209.
              enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
            in
            [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else
            [ ];
        outFeatures = expandFeaturesNoCycle { } inputFeatures;
      in
      sortedUnique outFeatures;

    /*
      This function adds optional dependencies as features if they are enabled
      indirectly by dependency features. This function mimics Cargo's behavior
      described in a note at:
      https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures =
      dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      let
        additionalFeatures = lib.concatMap (
          dependency:
          assert (builtins.isAttrs dependency);
          let
            enabled = builtins.any (doesFeatureEnableDependency dependency) features;
          in
          if (dependency.optional or false) && enabled then
            [ (dependency.rename or dependency.name) ]
          else
            [ ]
        ) dependencies;
      in
      sortedUnique (features ++ additionalFeatures);

    /*
      Returns the actual features for the given dependency.

      features: The features of the crate that refers this dependency.
    */
    dependencyFeatures =
      features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil = if dependency.usesDefaultFeatures or true then [ "default" ] else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures =
          let
            name = dependency.rename or dependency.name;
            stripPrefixMatch = prefix: s: if lib.hasPrefix prefix s then lib.removePrefix prefix s else null;
            extractFeature =
              feature:
              lib.findFirst (f: f != null) null (
                map (prefix: stripPrefixMatch prefix feature) [
                  (name + "/")
                  (name + "?/")
                ]
              );
            dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
          in
          dependencyFeatures;
      in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    # Sorts and removes duplicates from a list of strings.
    sortedUnique =
      features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
      builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning =
      message: value:
      if strictDeprecation then
        builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else
        builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}
