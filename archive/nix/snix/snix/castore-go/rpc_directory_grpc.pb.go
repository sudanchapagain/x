// SPDX-License-Identifier: MIT
// Copyright © 2022 The Tvix Authors
// Copyright © 2025 The Snix Project

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: snix/castore/protos/rpc_directory.proto

package castorev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DirectoryService_Get_FullMethodName = "/snix.castore.v1.DirectoryService/Get"
	DirectoryService_Put_FullMethodName = "/snix.castore.v1.DirectoryService/Put"
)

// DirectoryServiceClient is the client API for DirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryServiceClient interface {
	// Get retrieves a stream of Directory messages, by using the lookup
	// parameters in GetDirectoryRequest.
	// Keep in mind multiple DirectoryNodes in different parts of the graph might
	// have the same digest if they have the same underlying contents,
	// so sending subsequent ones can be omitted.
	//
	// It is okay for certain implementations to only allow retrieval of
	// Directory digests that are at the "root", aka the last element that's
	// sent in a Put. This makes sense for implementations bundling closures of
	// directories together in batches.
	Get(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Directory], error)
	// Put uploads a graph of Directory messages.
	// Individual Directory messages need to be send in an order walking up
	// from the leaves to the root - a Directory message can only refer to
	// Directory messages previously sent in the same stream.
	// Keep in mind multiple DirectoryNodes in different parts of the graph might
	// have the same digest if they have the same underlying contents,
	// so sending subsequent ones can be omitted.
	// We might add a separate method, allowing to send partial graphs at a later
	// time, if requiring to send the full graph turns out to be a problem.
	Put(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Directory, PutDirectoryResponse], error)
}

type directoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryServiceClient(cc grpc.ClientConnInterface) DirectoryServiceClient {
	return &directoryServiceClient{cc}
}

func (c *directoryServiceClient) Get(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Directory], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DirectoryService_ServiceDesc.Streams[0], DirectoryService_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDirectoryRequest, Directory]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DirectoryService_GetClient = grpc.ServerStreamingClient[Directory]

func (c *directoryServiceClient) Put(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Directory, PutDirectoryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DirectoryService_ServiceDesc.Streams[1], DirectoryService_Put_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Directory, PutDirectoryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DirectoryService_PutClient = grpc.ClientStreamingClient[Directory, PutDirectoryResponse]

// DirectoryServiceServer is the server API for DirectoryService service.
// All implementations must embed UnimplementedDirectoryServiceServer
// for forward compatibility.
type DirectoryServiceServer interface {
	// Get retrieves a stream of Directory messages, by using the lookup
	// parameters in GetDirectoryRequest.
	// Keep in mind multiple DirectoryNodes in different parts of the graph might
	// have the same digest if they have the same underlying contents,
	// so sending subsequent ones can be omitted.
	//
	// It is okay for certain implementations to only allow retrieval of
	// Directory digests that are at the "root", aka the last element that's
	// sent in a Put. This makes sense for implementations bundling closures of
	// directories together in batches.
	Get(*GetDirectoryRequest, grpc.ServerStreamingServer[Directory]) error
	// Put uploads a graph of Directory messages.
	// Individual Directory messages need to be send in an order walking up
	// from the leaves to the root - a Directory message can only refer to
	// Directory messages previously sent in the same stream.
	// Keep in mind multiple DirectoryNodes in different parts of the graph might
	// have the same digest if they have the same underlying contents,
	// so sending subsequent ones can be omitted.
	// We might add a separate method, allowing to send partial graphs at a later
	// time, if requiring to send the full graph turns out to be a problem.
	Put(grpc.ClientStreamingServer[Directory, PutDirectoryResponse]) error
	mustEmbedUnimplementedDirectoryServiceServer()
}

// UnimplementedDirectoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDirectoryServiceServer struct{}

func (UnimplementedDirectoryServiceServer) Get(*GetDirectoryRequest, grpc.ServerStreamingServer[Directory]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDirectoryServiceServer) Put(grpc.ClientStreamingServer[Directory, PutDirectoryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDirectoryServiceServer) mustEmbedUnimplementedDirectoryServiceServer() {}
func (UnimplementedDirectoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeDirectoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServiceServer will
// result in compilation errors.
type UnsafeDirectoryServiceServer interface {
	mustEmbedUnimplementedDirectoryServiceServer()
}

func RegisterDirectoryServiceServer(s grpc.ServiceRegistrar, srv DirectoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDirectoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DirectoryService_ServiceDesc, srv)
}

func _DirectoryService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDirectoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServiceServer).Get(m, &grpc.GenericServerStream[GetDirectoryRequest, Directory]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DirectoryService_GetServer = grpc.ServerStreamingServer[Directory]

func _DirectoryService_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirectoryServiceServer).Put(&grpc.GenericServerStream[Directory, PutDirectoryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DirectoryService_PutServer = grpc.ClientStreamingServer[Directory, PutDirectoryResponse]

// DirectoryService_ServiceDesc is the grpc.ServiceDesc for DirectoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snix.castore.v1.DirectoryService",
	HandlerType: (*DirectoryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _DirectoryService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _DirectoryService_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "snix/castore/protos/rpc_directory.proto",
}
